(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{498:function(t,r,s){"use strict";s.r(r);var e=s(1),n=Object(e.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-437-path-sum-iii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-437-path-sum-iii"}},[t._v("#")]),t._v(" LeetCode-437-Path Sum Ⅲ")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:"http://www.tamarous.com/2017/11/26/path-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Path Sum"),s("OutboundLink")],1),t._v(" 和 "),s("a",{attrs:{href:"http://www.tamarous.com/2017/11/26/path-sum-%e2%85%a1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Path Sum Ⅱ"),s("OutboundLink")],1),t._v("之后，Path Sum 大家庭又迎来了第三位成员。那么这个"),s("a",{attrs:{href:"https://leetcode.com/problems/path-sum-iii/description/",target:"_blank",rel:"noopener noreferrer"}},[t._v("新成员"),s("OutboundLink")],1),t._v("又提出了什么样的要求呢？")]),t._v(" "),s("p",[t._v("题意是这样的：给出一棵二叉树和一个数值 sum，计算这棵树上的节点之和等于sum 的所有路径的条数。和之前不同的是，这道题中路径可以从树中的任何一个节点开始。")]),t._v(" "),s("p",[t._v("思路：二叉树的题目，大部分都可以用递归的思想来解决，这道题也不例外。基本思路和之前类似，可以参照前面的两篇博文。但是要注意的是，由于路径可以从任何地方开始，在任何地方结束，因此：root 处存在和为 sum 的路径，root->left 处存在和为 sum 的路径以及 root->right 存在和为 sum 的路径这三种情况是需要累加到一起的。我们可以写一个辅助函数"),s("code",[t._v("int rootSum(TreeNode *root, int sum)")]),t._v(" 来计算从某个节点 node 处开始和为 sum 的路径条数，那么最后的总条数为 "),s("code",[t._v("rootSum(root,sum) + pathSum(root->left, sum) + pathSum(root->right, sum)")]),t._v("。")]),t._v(" "),s("p",[t._v("代码如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n    int rootSum(TreeNode *root, int sum) {\n        if (root == NULL) {\n            return 0;\n        }\n        if (sum == root->val) {\n            return 1 + rootSum(root->left, 0) + rootSum(root->right,0);\n        } else {\n            return rootSum(root->left, sum - root->val) + rootSum(root->right, sum - root->val);\n        }\n    }\n    int pathSum(TreeNode* root, int sum) {\n        if (root == NULL) {\n            return 0;\n        }\n        return rootSum(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);\n    }\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])])])}),[],!1,null,null,null);r.default=n.exports}}]);