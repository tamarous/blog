(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{381:function(e,n,t){"use strict";t.r(n);var i=t(42),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"leetcode-63-unique-paths-ii"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-63-unique-paths-ii"}},[e._v("#")]),e._v(" LeetCode-63-Unique Paths Ⅱ")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/unique-paths-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这道题"),t("OutboundLink")],1),e._v("是"),t("a",{attrs:{href:"http://www.tamarous.com/2018/01/09/unique-paths/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unique Path"),t("OutboundLink")],1),e._v("的续集。")]),e._v(" "),t("p",[e._v("题意：输入一个二维数组，这个二维数组的元素如果是0，表示对应网格处没有障碍，可以正常向下或向右移动；如果这个数字是1，表示对应网格处有个障碍，机器人🤖将不能通过。")]),e._v(" "),t("p",[e._v("思路：\n（1）首先我们考虑一下特殊情况。如果第一个网格或最后一个网格对应的数字为1，那么意味着是不可达的，因此直接返回0即可。\n（2）排除掉这两种情况后，我们还是先生成一个二维数组 dp，dp[i][j]表示走到图中第 i 行第 j 列个网格点共有多少种走法。首先考虑第一行。如果某个位置的 "),t("code",[e._v("obstacle[0][j] = 1")]),e._v("，那么这个网格点以及它右面和它下面的其他网格点都无法到达，因此我们需要一个标记 flag 来表示是否遇到了 obstacle = 1的情况。如果 "),t("code",[e._v("flag = true")]),e._v("，那么"),t("code",[e._v("dp[0][j] = 1")]),e._v("。只有当 "),t("code",[e._v("flag != true && obstacle[0][j] != 1")]),e._v(" 时，有 "),t("code",[e._v("dp[0][j] = 1")]),e._v("。第一列也是类似的。\n（3）然后考虑第 i 行第 j 列的网格点。对于 dp[i][j] 来说，如果 "),t("code",[e._v("obstacle[i][j] = 0")]),e._v("，那么 "),t("code",[e._v("dp[i][j] = dp[i-1][j] + dp[i][j-1]")]),e._v("；如果"),t("code",[e._v("obstacle[i][j] = 1")]),e._v("，那么 "),t("code",[e._v("dp[i][j] = 0")]),e._v("。这就是该题的状态转移方程。")]),e._v(" "),t("p",[e._v("代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        \n        vector<vector<int> > dp(m,vector<int>(n));\n        bool flag = false;\n        if(obstacleGrid[0][0] == 1) {\n            return 0;\n        }\n        for(int i = 0; i < m; i++) {\n            if (obstacleGrid[i][0] != 1 && !flag) {\n                dp[i][0] = 1;\n            } else {\n                if (obstacleGrid[i][0] == 1) {\n                    flag = true;\n                    dp[i][0] = 0;\n                } else if (flag) {\n                    dp[i][1] = 0;\n                }\n            }\n        }\n        flag = false;\n        for(int i = 1; i < n; i++) {\n            if (obstacleGrid[0][i] != 1 && !flag) {\n                dp[0][i] = 1;\n            } else {\n                if (obstacleGrid[0][i] == 1) {\n                    flag = true;\n                    dp[0][i] = 0;\n                } else if (flag) {\n                    dp[0][i] = 0;\n                }\n            }\n        }\n        \n        for(int i = 1; i < m; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = obstacleGrid[i][j] != 1 ? dp[i-1][j] + dp[i][j-1] : 0;\n            }\n        }\n        return dp[m-1][n-1] = obstacleGrid[m-1][n-1] != 1?dp[m-1][n-1]:0;\n    }\n};\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);