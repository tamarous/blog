(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{483:function(t,s,n){"use strict";n.r(s);var a=n(1),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"gopool-实现分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gopool-实现分析"}},[t._v("#")]),t._v(" Gopool 实现分析")]),t._v(" "),n("p",[t._v("Gopool 是字节跳动开源项目 "),n("a",{attrs:{href:"https://github.com/bytedance/gopkg",target:"_blank",rel:"noopener noreferrer"}},[t._v("gopkg"),n("OutboundLink")],1),t._v(" 中的一个小工具，作用是以池化的思想来实现 goroutine 的复用，限制应用中 goutine 数量的无限增长。")]),t._v(" "),n("h2",{attrs:{id:"使用介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用介绍"}},[t._v("#")]),t._v(" 使用介绍")]),t._v(" "),n("p",[t._v("Gopool 使用起来非常简单，只需要将项目中的 go 关键字替换为 gopool.Go：")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do your job")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("替换成")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("gopool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Go")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// do your job")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("h2",{attrs:{id:"文件目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件目录"}},[t._v("#")]),t._v(" 文件目录")]),t._v(" "),n("p",[t._v("Gopool 目录下共有 6 个文件，非常简洁：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(".\n├── README.md\n├── config.go\n├── gopool.go\n├── pool.go\n├── pool_test.go\n└── worker.go\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h3",{attrs:{id:"gopool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gopool"}},[t._v("#")]),t._v(" gopool")]),t._v(" "),n("p",[t._v("首先来看 gopool.go 这个文件。在这个文件的 init 方法中创建了 defaultPool:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func init() {\n\tdefaultPool = NewPool("gopool.DefaultPool", math.MaxInt32, NewConfig())\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("示例中的 gopool.Go 实际上是在调用 defaultPool 的同名方法：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func Go(f func()) {\n\tCtxGo(context.Background(), f)\n}\n\n// CtxGo is preferred than Go.\nfunc CtxGo(ctx context.Context, f func()) {\n\tdefaultPool.CtxGo(ctx, f)\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h3",{attrs:{id:"pool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pool"}},[t._v("#")]),t._v(" pool")]),t._v(" "),n("p",[t._v("defaultPool 实现了 Pool 接口，其定义位于 pool.go 中：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("type Pool interface {\n\t// 返回当前 pool 的名称\n\tName() string\n\t// 设置 pool 中 goroutine 的最大数量\n\tSetCap(cap int32)\n\t// 执行用户传入的 func\n\tGo(f func())\n\t// 在用户指定的 context 中执行用户传入的 func\n\tCtxGo(ctx context.Context, f func())\n\t// 设置异常处理方法\n\tSetPanicHandler(f func(context.Context, interface{}))\n\t// 返回当前 running 状态的 worker\n\tWorkerCount() int32\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("同时在这个文件里定义了名为 pool 的结构体，并实现了上述 Pool 接口")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("type pool struct {\n\t// 当前 pool 的名称\n\tname string\n\n\t// 当前 pool 的容量\n\tcap int32\n\t// 配置信息\n\tconfig *Config\n\t// 由 task 组成的链表\n\ttaskHead  *task\n\ttaskTail  *task\n\ttaskLock  sync.Mutex\n\ttaskCount int32\n\n\t// 记录当前处于 running 状态的 worker 数量\n\tworkerCount int32\n\n\t// worker 异常时的恢复方法\n\tpanicHandler func(context.Context, interface{})\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("p",[t._v("让我们深入看一下 CtxGo 这个接口方法是怎么实现的：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func (p *pool) CtxGo(ctx context.Context, f func()) {\n\n   // 从 taskPool 中获取一个 task\n\tt := taskPool.Get().(*task)\n\tt.ctx = ctx\n\tt.f = f\n\t\n\t// 更新 taskHead 和 taskTail 两个指针的指向\n\tp.taskLock.Lock()\n\tif p.taskHead == nil {\n\t\tp.taskHead = t\n\t\tp.taskTail = t\n\t} else {\n\t\tp.taskTail.next = t\n\t\tp.taskTail = t\n\t}\n\tp.taskLock.Unlock()\n\tatomic.AddInt32(&p.taskCount, 1)\n\t\t\n\t// 如果 task 的数量比设置的阈值大，并且 p 的 worker 的数量小于 pool 的容量\n\t// 或者 p 的 worker 数量为 0\n\tif (atomic.LoadInt32(&p.taskCount) >= p.config.ScaleThreshold && p.WorkerCount() < atomic.LoadInt32(&p.cap)) || p.WorkerCount() == 0 {\n\t\n\t   //  从 workerPool 中获取一个 worker，并启动\n\t\tp.incWorkerCount()\n\t\tw := workerPool.Get().(*worker)\n\t\tw.pool = p\n\t\tw.run()\n\t}\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br")])]),n("p",[t._v("taskPool 和 workerPool 是两个 sync.Pool 类型的全局对象，分别负责 task 和 worker 对象的复用。CtxGo 方法中首先会从 taskPool 的池子中取出一个 task 来复用，并调整 p 的 taskHead/taskTail/taskCount 等属性的值。在满足一些前提的情况下，还需要从 workerPool 中取出 worker，将 worker 的 pool 属性指向当前的 p，并调用 worker.run 方法。")]),t._v(" "),n("h3",{attrs:{id:"task"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[t._v("#")]),t._v(" task")]),t._v(" "),n("p",[t._v("task 是一个结构体，封装了用户传入的 func，同时还有一个指向下一个任务的属性")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("type task struct {\n\tctx context.Context\n\tf   func()\n\n\tnext *task\n}\n\nfunc (t *task) zero() {\n\tt.ctx = nil\n\tt.f = nil\n\tt.next = nil\n}\n\nfunc (t *task) Recycle() {\n\tt.zero()\n\ttaskPool.Put(t)\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])]),n("h3",{attrs:{id:"worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#worker"}},[t._v("#")]),t._v(" worker")]),t._v(" "),n("p",[t._v("worker 其实就是嵌入了一个 pool 的结构体：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("type worker struct {\n\tpool *pool\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("run 方法的实现如下：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func (w *worker) run() {\n   // 启动一个 goroutine\n\tgo func() {\n\t   // 在这个 goroutine 中，循环执行如下逻辑\n\t\tfor {\n\t\t   // 从 w.pool 的队头取出一个 task \n\t\t\tvar t *task\n\t\t\tw.pool.taskLock.Lock()\n\t\t\tif w.pool.taskHead != nil {\n\t\t\t\tt = w.pool.taskHead\n\t\t\t\tw.pool.taskHead = w.pool.taskHead.next\n\t\t\t\tatomic.AddInt32(&w.pool.taskCount, -1)\n\t\t\t}\n\t\t\tif t == nil {\n\t\t\t\t// 如果 w.pool 的队头取不到 task 了，说明当前没有需要执行的 task 了，清理当前 worker\n\t\t\t\tw.close()\n\t\t\t\tw.pool.taskLock.Unlock()\n\t\t\t\t// 将当前 worker 放回 workerPool 中，供之后复用\n\t\t\t\tw.Recycle()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tw.pool.taskLock.Unlock()\n\t\t\tfunc() {\n\t\t\t\tdefer func() {\n\t\t\t\t   // 如果在执行 t.f 的过程中发生了异常，进行异常恢复或记录现场\n\t\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\t\tif w.pool.panicHandler != nil {\n\t\t\t\t\t\t\tw.pool.panicHandler(t.ctx, r)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmsg := fmt.Sprintf("GOPOOL: panic in pool: %s: %v: %s", w.pool.name, r, debug.Stack())\n\t\t\t\t\t\t\tlogger.CtxErrorf(t.ctx, msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\t\n\t\t\t   // 执行 task 上的 func\n\t\t\t\tt.f()\n\t\t\t}()\n\t\t\t\n\t\t\t// 将 t 放回到 taskPool 中，供之后复用\n\t\t\tt.Recycle()\n\t\t}\n\t}()\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br")])]),n("h3",{attrs:{id:"sync-pool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sync-pool"}},[t._v("#")]),t._v(" sync.Pool")]),t._v(" "),n("p",[t._v("频繁地分配、回收内存会给 GC 带来一定的负担，严重的时候会引起 CPU 的毛刺，而 sync.Pool 可以将暂时不用的对象缓存起来到一个池子中，待下次需要的时候直接使用，不用再次经过内存分配，可以减轻 GC 的压力，提升系统的性能。")]),t._v(" "),n("p",[t._v("使用 sync.Pool的步骤非常简单：")]),t._v(" "),n("ol",[n("li",[t._v("声明需要缓存对象的 new 方法")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var taskPool sync.Pool\n\nfunc init() {\n\ttaskPool.New = newTask\n}\n\nfunc newTask() interface{} {\n\treturn &task{}\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("使用 Get 方法来从缓存池中获取一个对象")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("t := taskPool.Get().(*task)\nt.ctx = ctx\nt.f = f\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("对象不再使用时，放回到缓存池中")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func (t *task) zero() {\n\tt.ctx = nil\n\tt.f = nil\n\tt.next = nil\n}\n\nfunc (t *task) Recycle() {\n\tt.zero()\n\ttaskPool.Put(t)\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("以上逻辑就是 gopool 实现 goroutine 复用的核心逻辑。我们来总结下它的原理：")]),t._v(" "),n("ol",[n("li",[t._v("当使用 gopool.Go 来执行用户传入的逻辑 func 时，这个 func 会被包装成为一个 task，添加到 defaultPool 的 task 链表中")]),t._v(" "),n("li",[t._v("task 由 defaultPool 中的 worker 来实际负责执行。")]),t._v(" "),n("li",[t._v("当满足以下两种情况之一时，会新建一个 worker，并立即执行 worker 的调度逻辑：")])]),t._v(" "),n("ul",[n("li",[t._v("task 的数量比设置的阈值大，并且 p 的 worker 的数量小于 pool 的容量")]),t._v(" "),n("li",[t._v("p 的 worker 数量为 0")])]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("不满足上述条件时，现有 worker 会按照 FIFO 顺序依次执行 task 链表中的 task。")]),t._v(" "),n("li",[t._v("task 和 worker 实例都会通过 sync.Pool 来实现复用，减少内存分配，降低 GC 压力。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);