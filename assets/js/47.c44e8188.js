(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{403:function(_,e,E){"use strict";E.r(e);var a=E(42),t=Object(a.a)({},(function(){var _=this,e=_.$createElement,E=_._self._c||e;return E("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[E("h1",{attrs:{id:"easytuple-源代码分析"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#easytuple-源代码分析"}},[_._v("#")]),_._v(" EasyTuple 源代码分析")]),_._v(" "),E("p",[E("a",{attrs:{href:"https://github.com/meituan/EasyTuple",target:"_blank",rel:"noopener noreferrer"}},[E("code",[_._v("EasyTuple")]),E("OutboundLink")],1),_._v("是由美团开源的一个第三方库，它给Objective-C 添加了元组的能力，可以将几个对象包裹在一个对象中，这样我们就可以从一个函数中返回多个值。它的使用非常简单，比如我们想创建一个由两个元素组成的元组，那么可以这样写：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZTuple2<NSNumber *, NSString *> *tuple = EZTuple(@1, @"string");\n')])])]),E("p",[_._v("如果使用 Xcode 辅助编辑器查看预编译后的代码，那么上面的例子在预编译后，会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZTuple2<NSNumber *, NSString *> *tuple = [[EZTuple2 alloc] initWithFirst:@1 second:@"string"];\n')])])]),E("p",[_._v("可以看到原来的宏的写法会自动被转换成 Objective-C 中的类的创建语法了，那么这个转换过程是怎样发生的呢？下面让我们一步步地去分析这个转换的过程。")]),_._v(" "),E("h2",{attrs:{id:"eztuple"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#eztuple"}},[_._v("#")]),_._v(" EZTuple")]),_._v(" "),E("p",[_._v("右边这个看起来像函数的"),E("code",[_._v("EZTuple")]),_._v("，其实是一个宏：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZTuple(...) EZTupleAs(EZ_CONCAT(EZTuple, EZ_ARG_COUNT(__VA_ARGS__)), __VA_ARGS__)\n")])])]),E("h3",{attrs:{id:"ez-concat"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-concat"}},[_._v("#")]),_._v(" EZ_CONCAT")]),_._v(" "),E("p",[_._v("我们遇到的第一个宏就是 "),E("code",[_._v("EZ_CONCAT")]),_._v("，它的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_CONCAT(A, B) EZ_CONCAT_(A, B)\n#define EZ_CONCAT_(A, B) A ## B\n")])])]),E("p",[_._v("作用是把 A 和 B 两个字符串连接到一起，比如\n"),E("code",[_._v("EZ_CONCAT(hello, world)")]),_._v("的结果就是"),E("code",[_._v("helloworld")]),_._v("。")]),_._v(" "),E("h3",{attrs:{id:"ez-arg-count"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-arg-count"}},[_._v("#")]),_._v(" EZ_ARG_COUNT")]),_._v(" "),E("p",[E("code",[_._v("EZ_ARG_COUNT")]),_._v("是我们遇到的第二个宏，它的定义有些复杂：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_ARG_COUNT(...)   _EZ_ARG_COUNT(__VA_ARGS__)\n#define _EZ_ARG_COUNT(...)  EZ_ARG_AT(20, ##__VA_ARGS__, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n\n#define EZ_ARG_AT(N, ...)                                    EZ_ARG_AT_(N, __VA_ARGS__)\n#define EZ_ARG_AT_(N, ...)                                   EZ_CONCAT(EZ_ARG_AT, N)(__VA_ARGS__)\n#define EZ_ARG_AT0(...)                                      EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT1(_0, ...)                                  EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT2(_0, _1, ...)                              EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT3(_0, _1, _2, ...)                          EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT4(_0, _1, _2, _3, ...)                      EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT5(_0, _1, _2, _3, _4, ...)                  EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT6(_0, _1, _2, _3, _4, _5, ...)              EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT7(_0, _1, _2, _3, _4, _5, _6, ...)          EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT8(_0, _1, _2, _3, _4, _5, _6, _7, ...)      EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT9(_0, _1, _2, _3, _4, _5, _6, _7, _8, ...)  EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT10(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, ...)                                                                \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT11(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, ...)                                                           \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT12(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, ...)                                                      \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT13(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, ...)                                                 \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT14(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, ...)                                            \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT15(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, ...)                                       \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT16(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, ...)                                  \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT17(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, ...)                             \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT18(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, ...)                        \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT19(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, ...)                   \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n#define EZ_ARG_AT20(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, ...)              \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n")])])]),E("p",[E("code",[_._v("EZ_ARG_COUNT")]),_._v("是对"),E("code",[_._v("_EZ_ARG_COUNT")]),_._v("的一个包装。它会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_AT(20,##__VA_ARGS__, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n")])])]),E("p",[_._v("根据")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_ARG_AT(N, ...)   EZ_ARG_AT_(N, __VA_ARGS__)\n#define EZ_ARG_AT_(N, ...)  EZ_CONCAT(EZ_ARG_AT, N)(__VA_ARGS__)\n")])])]),E("p",[_._v("上面这个宏就是"),E("code",[_._v("EZ_CONCAT(EZ_ARG_AT, 20)(__VA_ARGS__)")]),_._v("，而"),E("code",[_._v("EZ_CONCAT(EZ_ARG_AT, 20)")]),_._v("也就是"),E("code",[_._v("EZ_ARG_AT20")]),_._v("，因此这个宏进而就等同于")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_AT20(##__VA_ARGS__, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n")])])]),E("p",[_._v("也就是说我们在使用"),E("code",[_._v("EZ_ARG_COUNT(...)")]),_._v("这个宏的时候，它会被最终展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_AT20(##__VA_ARGS__, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n")])])]),E("p",[_._v("现在假设有这么一行代码"),E("code",[_._v("EZ_ARG_COUNT(1,2,3)")]),_._v("，那么它就会展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_AT20(1, 2, 3, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n")])])]),E("p",[_._v("我们注意到")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_ARG_AT20(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, ...)              \\\n    EZ_ARG_HEAD(__VA_ARGS__)\n")])])]),E("p",[_._v("1占据了_0的位置，2占据了_1的位置，3占据了_3的位置，20，19，18，...，4依次占据了\n_4、_5、_6、... _19的位置，剩下的3，2，1，0被当做参数传入了 "),E("code",[_._v("EZ_ARG_HEAD")]),_._v("中，\n因此"),E("code",[_._v("EZ_ARG_COUNT(1,2,3)")]),_._v("会被展开为 "),E("code",[_._v("EZ_ARG_HEAD(3,2,1,0)")]),_._v("。")]),_._v(" "),E("h3",{attrs:{id:"ez-arg-head"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-arg-head"}},[_._v("#")]),_._v(" EZ_ARG_HEAD")]),_._v(" "),E("p",[E("code",[_._v("EZ_ARG_HEAD")]),_._v("的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_ARG_HEAD(FIRST, ...)             FIRST\n")])])]),E("p",[_._v("它的作用是取出宏的第一个参数，因此")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_HEAD(3,2,1,0) = 3\n")])])]),E("p",[_._v("也就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_ARG_COUNT(1,2,3) = 3\n")])])]),E("p",[_._v("因此"),E("code",[_._v("EZ_ARG_COUNT")]),_._v("的作用就是"),E("strong",[_._v("获得输入的参数的个数")]),_._v("。")]),_._v(" "),E("p",[_._v("由以上三个宏的定义，"),E("code",[_._v('EZTuple(@1, @"string")')]),_._v("会被展开为"),E("code",[_._v('EZTupleAs(EZTuple2, @1, @"string")')]),_._v("。")]),_._v(" "),E("p",[_._v("进而，根据"),E("code",[_._v("EZTupleAs")]),_._v("的定义")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZTupleAs(_Class_, ...) [[_Class_ alloc] EZ_CONCAT(initWith, EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,__VA_ARGS__))]\n")])])]),E("p",[E("code",[_._v('EZTupleAs(EZTuple2, @1, @"string")')]),_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('[[EZTuple2 alloc] EZ_CONCAT(initWith, EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,@1, @"string"))]\n')])])]),E("h3",{attrs:{id:"ez-for-each"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-for-each"}},[_._v("#")]),_._v(" EZ_FOR_EACH")]),_._v(" "),E("p",[E("code",[_._v("EZ_FOR_EACH")]),_._v("的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_EACH(...)    _EZ_FOR_EACH(__VA_ARGS__)\n#define _EZ_FOR_EACH(MACRO, SEP, ...)   EZ_FOR_EACH_CTX(EZ_FOR_EACH_ITER_, SEP, MACRO, ##__VA_ARGS__)\n\n#define EZ_FOR_EACH_CTX(MACRO, SEP, CTX, ...)                EZ_CONCAT(EZ_FOR_EACH_CTX, EZ_ARG_COUNT(__VA_ARGS__))(MACRO, SEP, CTX, ##__VA_ARGS__)\n#define EZ_FOR_EACH_CTX0(MACRO, SEP, CTX)\n#define EZ_FOR_EACH_CTX1(MACRO, SEP, CTX, _0) MACRO(0, _0, CTX)\n#define EZ_FOR_EACH_CTX2(MACRO, SEP, CTX, _0, _1) \\\n    EZ_FOR_EACH_CTX1(MACRO, SEP, CTX, _0) SEP MACRO(1, _1, CTX)\n#define EZ_FOR_EACH_CTX3(MACRO, SEP, CTX, _0, _1, _2) \\\n    EZ_FOR_EACH_CTX2(MACRO, SEP, CTX, _0, _1) SEP MACRO(2, _2, CTX)\n#define EZ_FOR_EACH_CTX4(MACRO, SEP, CTX, _0, _1, _2, _3) \\\n    EZ_FOR_EACH_CTX3(MACRO, SEP, CTX, _0, _1, _2) SEP MACRO(3, _3, CTX)\n#define EZ_FOR_EACH_CTX5(MACRO, SEP, CTX, _0, _1, _2, _3, _4) \\\n    EZ_FOR_EACH_CTX4(MACRO, SEP, CTX, _0, _1, _2, _3) SEP MACRO(4, _4, CTX)\n// 中间定义都是类似的，为了节省篇幅就不列出了\n    EZ_FOR_EACH_CTX18(MACRO, SEP, CTX, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17) SEP MACRO(18, _18, CTX)\n#define EZ_FOR_EACH_CTX20(MACRO, SEP, CTX, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19) \\\n    EZ_FOR_EACH_CTX19(MACRO, SEP, CTX, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18) SEP MACRO(19, _19, CTX)\n")])])]),E("p",[_._v("对于"),E("code",[_._v('EZTupleAs(EZTuple2, @1, @"string")')]),_._v("展开的结果中的"),E("code",[_._v('EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,@1, @"string")')]),_._v("而言，"),E("code",[_._v("MACRO")]),_._v("为"),E("code",[_._v("EZ_INIT_PARAM_CALL")]),_._v("，"),E("code",[_._v("SEP")]),_._v("为空，"),E("code",[_._v("...")]),_._v("为"),E("code",[_._v('@1, @"string"')]),_._v("，所以\n它会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_CTX(EZ_FOR_EACH_ITER_, , EZ_INIT_PARAM_CALL, @1, @"string")\n')])])]),E("p",[_._v("根据")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_EACH_CTX(MACRO, SEP, CTX, ...)   EZ_CONCAT(EZ_FOR_EACH_CTX, EZ_ARG_COUNT(__VA_ARGS__))(MACRO, SEP, CTX, ##__VA_ARGS__)\n")])])]),E("p",[_._v("那么对于"),E("code",[_._v('EZ_FOR_EACH_CTX(EZ_FOR_EACH_ITER_, , EZ_INIT_PARAM_CALL, @1, @"string")')]),_._v("，"),E("code",[_._v("MACRO")]),_._v("为"),E("code",[_._v("EZ_FOR_EACH_ITER_")]),_._v("，"),E("code",[_._v("SEP")]),_._v("为空，"),E("code",[_._v("CTX")]),_._v("为"),E("code",[_._v("EZ_INIT_PARAM_CALL")]),_._v("，所以它会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_CTX2(EZ_FOR_EACH_ITER_,,EZ_INIT_PARAM_CALL,@1, @"string")\n')])])]),E("p",[_._v("再根据")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_EACH_CTX1(MACRO, SEP, CTX, _0) MACRO(0, _0, CTX)\n#define EZ_FOR_EACH_CTX2(MACRO, SEP, CTX, _0, _1) \\\n    EZ_FOR_EACH_CTX1(MACRO, SEP, CTX, _0) SEP MACRO(1, _1, CTX)\n")])])]),E("p",[E("code",[_._v("MACRO")]),_._v("为"),E("code",[_._v("EZ_FOR_EACH_ITER_")]),_._v("，"),E("code",[_._v("SEP")]),_._v("为空，"),E("code",[_._v("CTX")]),_._v("为"),E("code",[_._v("EZ_INIT_PARAM_CALL")]),_._v('，_0为@1，_1为@"string"，所以上式首先会被展开为')]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_CTX1(EZ_FOR_EACH_ITER_, , EZ_INIT_PARAM_CALL, @1) EZ_FOR_EACH_ITER_(1, @"string", EZ_INIT_PARAM_CALL)\n')])])]),E("p",[_._v("然后")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR_EACH_CTX1(EZ_FOR_EACH_ITER_, ,EZ_INIT_PARAM_CALL, @1)\n")])])]),E("p",[_._v("中，"),E("code",[_._v("MACRO")]),_._v("为"),E("code",[_._v("EZ_FOR_EACH_ITER_")]),_._v("，"),E("code",[_._v("SEP")]),_._v("为空，"),E("code",[_._v("CTX")]),_._v("为"),E("code",[_._v("EZ_INIT_PARAM_CALL")]),_._v("，_0为@1，所以它会被展开成")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR_EACH_ITER_(0,@1,EZ_INIT_PARAM_CALL)\n")])])]),E("p",[_._v("所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_CTX2(EZ_FOR_EACH_ITER_,,EZ_INIT_PARAM_CALL,@1, @"string")\n')])])]),E("p",[_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_ITER_(0, @1, EZ_INIT_PARAM_CALL) EZ_FOR_EACH_ITER_(1, @"string", EZ_INIT_PARAM_CALL)\n')])])]),E("p",[_._v("也就是说，最一开始的")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,@1, @"string")\n')])])]),E("p",[_._v("被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_ITER_(0, @1, EZ_INIT_PARAM_CALL) EZ_FOR_EACH_ITER_(1, @"string", EZ_INIT_PARAM_CALL)\n')])])]),E("p",[_._v("我们先关注"),E("code",[_._v("EZ_FOR_EACH_ITER_(0, @1, EZ_INIT_PARAM_CALL)")]),_._v("的展开情况。"),E("code",[_._v('EZ_FOR_EACH_ITER_(1, @"string", EZ_INIT_PARAM_CALL)')]),_._v("和它是类似的。\n根据")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_EACH_ITER_(INDEX, PARAM, MACRO)               MACRO(INDEX, PARAM)\n#define _EZ_INIT_PARAM_CALL_FIRST(index, param)              EZ_ORDINAL_CAP_AT(index):param\n#define _EZ_INIT_PARAM_CALL(index, param)                    EZ_ORDINAL_AT(index):param\n#define EZ_INIT_PARAM_CALL(index, param)                     EZ_IF_EQ(0, index)(_EZ_INIT_PARAM_CALL_FIRST(index, param))(_EZ_INIT_PARAM_CALL(index, param))\n")])])]),E("p",[_._v("那么"),E("code",[_._v("EZ_FOR_EACH_ITER_(0, @1, EZ_INIT_PARAM_CALL)")]),_._v("会被展开为"),E("code",[_._v("EZ_INIT_PARAM_CALL(0, @1)")]),_._v("，进而被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ(0, 0)(_EZ_INIT_PARAM_CALL_FIRST(0, @1))(_EZ_INIT_PARAM_CALL(0, @1))\n")])])]),E("p",[E("code",[_._v("EZ_IF_EQ")]),_._v("这个宏的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_IF_EQ(A, B)                                       EZ_CONCAT(EZ_IF_EQ, A)(B)\n\n#define EZ_CONSUME_(...)\n#define EZ_EXPAND_(...)                                      __VA_ARGS__\n\n#define EZ_IF_EQ0(VALUE)                                     EZ_CONCAT(EZ_IF_EQ0_, VALUE)\n#define EZ_IF_EQ0_0(...)                                     __VA_ARGS__ EZ_CONSUME_\n#define EZ_IF_EQ0_1(...)                                     EZ_EXPAND_\n#define EZ_IF_EQ0_2(...)                                     EZ_EXPAND_\n#define EZ_IF_EQ0_3(...)                                     EZ_EXPAND_\n#define EZ_IF_EQ0_4(...)                                     EZ_EXPAND_\n#define EZ_IF_EQ0_5(...)                                     EZ_EXPAND_\n// 中间定义都是类似的，为了节省篇幅就不列出了\n#define EZ_IF_EQ0_18(...)                                    EZ_EXPAND_\n#define EZ_IF_EQ0_19(...)                                    EZ_EXPAND_\n#define EZ_IF_EQ0_20(...)                                    EZ_EXPAND_\n\n#define EZ_IF_EQ1(VALUE)                                        EZ_IF_EQ0(EZ_DEC(VALUE))\n#define EZ_IF_EQ2(VALUE)                                     EZ_IF_EQ1(EZ_DEC(VALUE))\n#define EZ_IF_EQ3(VALUE)                                     EZ_IF_EQ2(EZ_DEC(VALUE))\n#define EZ_IF_EQ4(VALUE)                                     EZ_IF_EQ3(EZ_DEC(VALUE))\n#define EZ_IF_EQ5(VALUE)                                     EZ_IF_EQ4(EZ_DEC(VALUE))\n// 中间定义都是类似的，为了节省篇幅就不列出了\n#define EZ_IF_EQ18(VALUE)                                    EZ_IF_EQ17(EZ_DEC(VALUE))\n#define EZ_IF_EQ19(VALUE)                                    EZ_IF_EQ18(EZ_DEC(VALUE))\n#define EZ_IF_EQ20(VALUE)                                    EZ_IF_EQ19(EZ_DEC(VALUE))\n")])])]),E("p",[_._v("那么"),E("code",[_._v("EZ_IF_EQ(0, 0)")]),_._v("会被展开为"),E("code",[_._v("EZ_IF_EQ0(0)")]),_._v("，"),E("code",[_._v("EZ_IF_EQ0(0)")]),_._v("会被展开为"),E("code",[_._v("EZ_IF_EQ0_0")]),_._v("，所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ(0, 0)(_EZ_INIT_PARAM_CALL_FIRST(0, @1))(_EZ_INIT_PARAM_CALL(0, @1))\n")])])]),E("p",[_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ0_0(_EZ_INIT_PARAM_CALL_FIRST(0, @1))(_EZ_INIT_PARAM_CALL(0, @1))\n")])])]),E("p",[E("code",[_._v("_EZ_INIT_PARAM_CALL_FIRST(0, @1)")]),_._v("会被展开为"),E("code",[_._v("EZ_ORDINAL_CAP_AT(0):@1")]),_._v("，"),E("code",[_._v("_EZ_INIT_PARAM_CALL(0, @1)")]),_._v("会被展开为"),E("code",[_._v("EZ_ORDINAL_AT(0):@1")]),_._v("。\n"),E("code",[_._v("EZ_ORDINAL_CAP_AT")]),_._v("和"),E("code",[_._v("EZ_ORDINAL_AT")]),_._v("的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_ORDINAL_AT(N)    EZ_ARG_AT(N, EZ_ORDINAL_NUMBERS)\n#define EZ_ORDINAL_CAP_AT(N) EZ_ARG_AT(N, EZ_ORDINAL_CAP_NUMBERS)\n#define EZ_ORDINAL_NUMBERS  first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth\n#define EZ_ORDINAL_CAP_NUMBERS  First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth, Tenth, Eleventh, Twelfth, Thirteenth, Fourteenth, Fifteenth, Sixteenth, Seventeenth, Eighteenth, Nineteenth, Twentieth\n")])])]),E("p",[_._v("而 "),E("code",[_._v("EZ_ARG_AT(N, EZ_ORDINAL_NUMBERS)")]),_._v("这个宏是取"),E("code",[_._v("EZ_ORDINAL_NUMBERS")]),_._v("中的第 N 个参数，因此"),E("code",[_._v("EZ_ORDINAL_CAP_AT(0):@1")]),_._v("也就是"),E("code",[_._v("First:@1")]),_._v("，"),E("code",[_._v("EZ_ORDINAL_AT(0):@1")]),_._v("也就是"),E("code",[_._v("first:@1")]),_._v("。\n所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ0_0(_EZ_INIT_PARAM_CALL_FIRST(0, @1))(_EZ_INIT_PARAM_CALL(0, @1))\n")])])]),E("p",[_._v("也就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ0_0(First:@1)(first:@1)\n")])])]),E("p",[_._v("由")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_IF_EQ0_0(...)    __VA_ARGS__ EZ_CONSUME_\n#define EZ_CONSUME_(...)\n")])])]),E("p",[_._v("可知，")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ0_0(First:@1)(first:@1)\n")])])]),E("p",[_._v("会被展开为"),E("code",[_._v("First:@1 EZ_CONSUME_(first:@1)")]),_._v("，进而展开为"),E("code",[_._v("First:@1")]),_._v("。\n同理")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH_ITER_(1, @"string", EZ_INIT_PARAM_CALL)\n')])])]),E("p",[_._v("展开后得到"),E("code",[_._v('Second:@"string"')]),_._v("。\n那么，")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,@1, @"string")\n')])])]),E("p",[_._v("最终被展开的结果就是"),E("code",[_._v('First:@1 Second:@"string"')]),_._v("，所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZ_CONCAT(initWith, EZ_FOR_EACH(EZ_INIT_PARAM_CALL, ,@1, @"string"))\n')])])]),E("p",[_._v("展开的结果就是"),E("code",[_._v('initWithFirst:@1 Second:@"string"')]),_._v("。")]),_._v(" "),E("p",[_._v("因此"),E("code",[_._v('EZTupleAs(EZTuple2, @1, @"string")')]),_._v("就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('[[EZTuple2 alloc] initWithFirst:@1 Second:@"string"]\n')])])]),E("p",[_._v("所以最开始的"),E("code",[_._v('EZTuple(@1,@"string")')]),_._v("就被转换为了 Objective-C 中的类的创建语法。")]),_._v(" "),E("h2",{attrs:{id:"ez-tuple-classes-def"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-tuple-classes-def"}},[_._v("#")]),_._v(" EZ_TUPLE_CLASSES_DEF")]),_._v(" "),E("p",[_._v("回到最开始的声明：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v('EZTuple2<NSNumber *, NSString *> *tuple = EZTuple(@1, @"string");\n')])])]),E("p",[_._v("左边的"),E("code",[_._v("EZTuple2")]),_._v("是一个类的名字，但是如果通过Xcode 中的"),E("code",[_._v("Go To Definition")]),_._v("来查看这个类的定义的话，会发现 Xcode 将这个类的定义定位到了一个文件中，这个文件里除了头文件外只有一行宏定义：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("// EZTupleSubClasses.h\n#import <Foundation/Foundation.h>\n#import <EasyTuple/EZMetaMacros.h>\nEZ_TUPLE_CLASSES_DEF\n")])])]),E("p",[E("code",[_._v("EZ_TUPLE_CLASSES_DEF")]),_._v("这个宏的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_TUPLE_CLASSES_DEF    EZ_FOR(20, EZ_TUPLE_DEF_FOREACH, ;)\n")])])]),E("p",[_._v("而 "),E("code",[_._v("EZ_FOR")]),_._v("的定义则是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR(COUNT, MARCO, SEP)                            EZ_CONCAT(EZ_FOR, COUNT)(MARCO, SEP)\n#define EZ_FOR0(MARCO, SEP)\n#define EZ_FOR1(MARCO, SEP)                                  MARCO(0)\n#define EZ_FOR2(MARCO, SEP)                                  EZ_FOR1(MARCO, SEP) SEP MARCO(1)\n#define EZ_FOR3(MARCO, SEP)                                  EZ_FOR2(MARCO, SEP) SEP MARCO(2)\n#define EZ_FOR4(MARCO, SEP)                                  EZ_FOR3(MARCO, SEP) SEP MARCO(3)\n#define EZ_FOR5(MARCO, SEP)                                  EZ_FOR4(MARCO, SEP) SEP MARCO(4)\n// 中间定义都是类似的，为了节省篇幅就不列出了\n#define EZ_FOR19(MARCO, SEP)                                 EZ_FOR18(MARCO, SEP) SEP MARCO(18)\n#define EZ_FOR20(MARCO, SEP)                                 EZ_FOR19(MARCO, SEP) SEP MARCO(19)\n")])])]),E("p",[_._v("对于"),E("code",[_._v("EZ_FOR(20, EZ_TUPLE_DEF_FOREACH, ;)")]),_._v("，"),E("code",[_._v("COUNT")]),_._v("为20，"),E("code",[_._v("MACRO")]),_._v("为"),E("code",[_._v("EZ_TUPLE_DEF_FOREACH")]),_._v("，"),E("code",[_._v("SEP")]),_._v("为"),E("code",[_._v(";")]),_._v("，因此它会被展开为"),E("code",[_._v("EZ_CONCAT(EZ_FOR, COUNT)(MARCO, SEP)")]),_._v("，即"),E("code",[_._v("EZ_FOR20(EZ_TUPLE_DEF_FOREACH,;)")]),_._v("。而"),E("code",[_._v("EZ_FOR20(EZ_TUPLE_DEF_FOREACH,;)")]),_._v("展开后得到")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR19(EZ_TUPLE_DEF_FOREACH,;) ; EZ_TUPLE_DEF_FOREACH(19)\n")])])]),E("p",[E("code",[_._v("EZ_FOR19(EZ_TUPLE_DEF_FOREACH,;)")]),_._v("展开后得到")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR18(EZ_TUPLE_DEF_FOREACH,;) ; EZ_TUPLE_DEF_FOREACH(18) ; EZ_TUPLE_DEF_FOREACH(18)\n")])])]),E("p",[_._v("这样一层层展开，最终的结果为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_TUPLE_DEF_FOREACH(0) ; EZ_TUPLE_DEF_FOREACH(1) ; EZ_TUPLE_DEF_FOREACH(2) ; ... EZ_TUPLE_DEF_FOREACH(18); EZ_TUPLE_DEF_FOREACH(19)\n")])])]),E("p",[E("code",[_._v("EZ_TUPLE_DEF_FOREACH(index)")]),_._v("的定义如下")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_TUPLE_DEF_FOREACH(index) EZ_TUPLE_DEF(EZ_INC(index))\n")])])]),E("p",[_._v("内层的"),E("code",[_._v("EZ_INC(index)")]),_._v("会对index进行加1操作，那么"),E("code",[_._v("EZ_TUPLE_CLASSES_DEF")]),_._v("就会展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_TUPLE_DEF(1) ; EZ_TUPLE_DEF(2) ; ... EZ_TUPLE_DEF(18) ; EZ_TUPLE_DEF(19) ; EZ_TUPLE_DEF(20)\n")])])]),E("p",[_._v("接下来我们再看一下 "),E("code",[_._v("EZ_TUPLE_DEF(i)")]),_._v("的定义：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_TUPLE_DEF(i)                                                                                                         \\\n@interface EZ_CONCAT(EZTuple, i)<EZ_FOR_COMMA(i, EZ_GENERIC_TYPE)> :EZTupleBase                                                     \\\n                                                                                                                               \\\nEZ_FOR_RECURSIVE(i, EZ_PROPERTY_DEF, ;);                                                                                         \\\n                                                                                                                               \\\n@property (nonatomic, strong) EZ_CHARS_AT(EZ_DEC(i)) last;                                                                       \\\n                                                                                                                               \\\n- (instancetype)EZ_CONCAT(initWith, EZ_FOR_SPACE(i, EZ_INIT_PARAM));                                                              \\\n                                                                                                                               \\\n@end\n")])])]),E("p",[_._v("可以看出"),E("code",[_._v("EZ_TUPLE_DEF(i)")]),_._v("展开后是一个类的定义，并且这个类的定义明显地可以分为三部分：第一部分是拼接出来的类名，该类继承自"),E("code",[_._v("EZTupleBase")]),_._v("，第二部分是通过"),E("code",[_._v("EZ_FOR_RECURSIVE")]),_._v("生成的属性，第三部分是拼接出来的初始化方法。")]),_._v(" "),E("h3",{attrs:{id:"ez-for-comma"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-for-comma"}},[_._v("#")]),_._v(" EZ_FOR_COMMA")]),_._v(" "),E("p",[_._v("这个宏出现在类名中，")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_COMMA(COUNT, MARCO)                           EZ_CONCAT(EZ_FOR_COMMA, COUNT)(MARCO)\n#define EZ_FOR_COMMA0(MARCO)\n#define EZ_FOR_COMMA1(MARCO)                                 MARCO(0)\n#define EZ_FOR_COMMA2(MARCO)                                 EZ_FOR_COMMA1(MARCO), MARCO(1)\n#define EZ_FOR_COMMA3(MARCO)                                 EZ_FOR_COMMA2(MARCO), MARCO(2)\n#define EZ_FOR_COMMA4(MARCO)                                 EZ_FOR_COMMA3(MARCO), MARCO(3)\n#define EZ_FOR_COMMA5(MARCO)                                 EZ_FOR_COMMA4(MARCO), MARCO(4)\n// 中间定义都是类似的，为了节省篇幅就不列出了\n#define EZ_FOR_COMMA18(MARCO)                                EZ_FOR_COMMA17(MARCO), MARCO(17)\n#define EZ_FOR_COMMA19(MARCO)                                EZ_FOR_COMMA18(MARCO), MARCO(18)\n#define EZ_FOR_COMMA20(MARCO)                                EZ_FOR_COMMA19(MARCO), MARCO(19)\n")])])]),E("p",[_._v("这个宏和上面提过的"),E("code",[_._v("EZ_FOR")]),_._v("非常类似，所以展开的结果也是类似的。那么对于"),E("code",[_._v("EZ_FOR_COMMA(2, EZ_GENERIC_TYPE)")]),_._v("，展开的结果为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_GENERIC_TYPE(0), EZ_GENERIC_TYPE(1)\n")])])]),E("h3",{attrs:{id:"ez-generic-type-index"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-generic-type-index"}},[_._v("#")]),_._v(" EZ_GENERIC_TYPE(index)")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_GENERIC_TYPE(index)                               __covariant EZ_CHARS_AT(index): id\n\n#define EZ_CHARS_AT(N)  EZ_ARG_AT(N, EZ_CHARS)\n\n#define EZ_CHARS    A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\n")])])]),E("p",[E("code",[_._v("EZ_CHARS_AT(N)")]),_._v("的作用是从"),E("code",[_._v("EZ_CHARS")]),_._v("取出第 N 位的字符，因此"),E("code",[_._v("EZ_GENERIC_TYPE(0)")]),_._v("会被展开为"),E("code",[_._v("__covariant A: id")]),_._v("，"),E("code",[_._v("EZ_GENERIC_TYPE(1)")]),_._v("会被展开为"),E("code",[_._v("__covariant B: id")]),_._v("，")]),_._v(" "),E("p",[_._v("所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR_COMMA(i, EZ_GENERIC_TYPE)\n")])])]),E("p",[_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("__covariant A: id, __covariant B: id\n")])])]),E("p",[E("code",[_._v("__covariant")]),_._v("这个关键字表示协变性，即子类型可以强转到父类型，是Objective-C 新出现的一个用来表达泛型能力的关键字，与它一同出现的另一个关键字是"),E("code",[_._v("____contravariant")]),_._v("，表示逆变性，即父类型可以强转到子类型。对这两个关键字的更详细介绍，可以看一下 sunnyxx 老师的博文"),E("a",{attrs:{href:"https://blog.sunnyxx.com/2015/06/12/objc-new-features-in-2015/",target:"_blank",rel:"noopener noreferrer"}},[_._v("《2015 Objective-C 新特性》"),E("OutboundLink")],1),_._v("。")]),_._v(" "),E("p",[_._v("回到类的接口定义，根据上面的分析，")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("@interface EZ_CONCAT(EZTuple, i)<EZ_FOR_COMMA(i, EZ_GENERIC_TYPE)> :EZTupleBase\n")])])]),E("p",[_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("@interface EZTuple2<__covariant A: id, __covariant B: id)> :EZTupleBase\n")])])]),E("h3",{attrs:{id:"ez-for-recursive"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-for-recursive"}},[_._v("#")]),_._v(" EZ_FOR_RECURSIVE")]),_._v(" "),E("p",[_._v("这个宏被用于类定义的第二部分，即类的属性的生成中。它的定义和"),E("code",[_._v("EZ_FOR")]),_._v("也是类似的：")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_FOR_RECURSIVE(COUNT, MARCO, SEP)                  EZ_CONCAT(EZ_FOR_RECURSIVE, COUNT)(MARCO, SEP)\n#define EZ_FOR_RECURSIVE0(MARCO, SEP)\n#define EZ_FOR_RECURSIVE1(MARCO, SEP)                        MARCO(0)\n#define EZ_FOR_RECURSIVE2(MARCO, SEP)                        EZ_FOR_RECURSIVE1(MARCO, SEP) SEP MARCO(1)\n#define EZ_FOR_RECURSIVE3(MARCO, SEP)                        EZ_FOR_RECURSIVE2(MARCO, SEP) SEP MARCO(2)\n#define EZ_FOR_RECURSIVE4(MARCO, SEP)                        EZ_FOR_RECURSIVE3(MARCO, SEP) SEP MARCO(3)\n#define EZ_FOR_RECURSIVE5(MARCO, SEP)                        EZ_FOR_RECURSIVE4(MARCO, SEP) SEP MARCO(4)\n// 中间定义都是类似的，为了节省篇幅就不列出了\n#define EZ_FOR_RECURSIVE19(MARCO, SEP)                       EZ_FOR_RECURSIVE18(MARCO, SEP) SEP MARCO(18)\n#define EZ_FOR_RECURSIVE20(MARCO, SEP)                       EZ_FOR_RECURSIVE19(MARCO, SEP) SEP MARCO(19)\n")])])]),E("p",[_._v("所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR_RECURSIVE(2, EZ_PROPERTY_DEF, ;)\n")])])]),E("p",[_._v("就会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_PROPERTY_DEF(0) ; EZ_PROPERTY_DEF(1)\n")])])]),E("h3",{attrs:{id:"ez-property-def-index"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-property-def-index"}},[_._v("#")]),_._v(" EZ_PROPERTY_DEF(index)")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_PROPERTY_DEF(index)  @property (nonatomic, strong) EZ_CHARS_AT(index) EZ_ORDINAL_AT(index)\n\n#define EZ_ORDINAL_NUMBERS  first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth\n\n#define EZ_ORDINAL_AT(N)    EZ_ARG_AT(N, EZ_ORDINAL_NUMBERS)\n")])])]),E("p",[_._v("所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_FOR_RECURSIVE(2, EZ_PROPERTY_DEF, ;)\n")])])]),E("p",[_._v("首先被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_PROPERTY_DEF(0) ; EZ_PROPERTY_DEF(1)\n")])])]),E("p",[_._v("进而被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("@property (nonatomic, strong) A first;\n@property (nonatomic, strong) B second;\n")])])]),E("h3",{attrs:{id:"ez-for-space"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#ez-for-space"}},[_._v("#")]),_._v(" EZ_FOR_SPACE")]),_._v(" "),E("p",[_._v("这个宏的名字和"),E("code",[_._v("EZ_FOR_COMMA")]),_._v("类似，定义也类似，因此它的作用也是类似的，这里就不浪费篇幅了。"),E("code",[_._v("EZ_FOR_SPACE(2, EZ_INIT_PARAM)")]),_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_INIT_PARAM(0) EZ_INIT_PARAM(1)\n")])])]),E("p",[_._v("这里我们也只看一下"),E("code",[_._v("EZ_INIT_PARAM(0)")]),_._v("是如何展开的，"),E("code",[_._v("EZ_INIT_PARAM(1)")]),_._v("的展开和它是类似的。")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define _EZ_INIT_PARAM_FIRST(index)                          EZ_ORDINAL_CAP_AT(index):(EZ_CHARS_AT(index))EZ_ORDINAL_AT(index)\n#define _EZ_INIT_PARAM(index)                                EZ_ORDINAL_AT(index):(EZ_CHARS_AT(index))EZ_ORDINAL_AT(index)\n#define EZ_INIT_PARAM(index)                                 EZ_IF_EQ(0, index)(_EZ_INIT_PARAM_FIRST(index))(_EZ_INIT_PARAM(index))\n")])])]),E("p",[E("code",[_._v("EZ_INIT_PARAM(0)")]),_._v("首先被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ(0,0)(_EZ_INIT_PARAM_FIRST(0))(_EZ_INIT_PARAM(0))\n")])])]),E("p",[E("code",[_._v("_EZ_INIT_PARAM_FIRST(0)")]),_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("First:(A)first\n")])])]),E("p",[_._v("而"),E("code",[_._v("_EZ_INIT_PARAM(0)")]),_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("first:(A)first\n")])])]),E("p",[_._v("所以")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ(0,0)(_EZ_INIT_PARAM_FIRST(0))(_EZ_INIT_PARAM(0))\n")])])]),E("p",[_._v("也就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_IF_EQ(0,0)(First:(A)first)(first:(A)first)\n")])])]),E("p",[E("code",[_._v("EZ_IF_EQ(0,0)")]),_._v("也就是"),E("code",[_._v("EZ_IF_EQ0(0)")]),_._v("，也就是"),E("code",[_._v("EZ_IF_EQ0_0")]),_._v("，\n根据")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_IF_EQ0_0(...)                                     __VA_ARGS__ EZ_CONSUME_\n")])])]),E("p",[E("code",[_._v("EZ_IF_EQ(0,0)(First:(A)first)(first:(A)first)")]),_._v("就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("First:(A)first EZ_CONSUME_(first:(A)first)\n")])])]),E("p",[_._v("最终就是"),E("code",[_._v("First:(A)first")]),_._v("。即"),E("code",[_._v("EZ_INIT_PARAM(0)")]),_._v("最终展开的结果就是"),E("code",[_._v("First:(A)first")]),_._v("。同理，"),E("code",[_._v("EZ_INIT_PARAM(1)")]),_._v("最终展开的结果就是"),E("code",[_._v("Second:(B)second")]),_._v("。\n因此，")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("- (instancetype)EZ_CONCAT(initWith, EZ_FOR_SPACE(i, EZ_INIT_PARAM));   \n")])])]),E("p",[_._v("展开后的结果就是")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("- (instancetype)initWithFirst:(A)first Second:(B)second;\n")])])]),E("p",[_._v("回到一开始的类定义")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("#define EZ_TUPLE_DEF(i)                                                                                                         \\\n@interface EZ_CONCAT(EZTuple, i)<EZ_FOR_COMMA(i, EZ_GENERIC_TYPE)> :EZTupleBase                                                     \\\n                                                                                                                               \\\nEZ_FOR_RECURSIVE(i, EZ_PROPERTY_DEF, ;);                                                                                         \\\n                                                                                                                               \\\n@property (nonatomic, strong) EZ_CHARS_AT(EZ_DEC(i)) last;                                                                       \\\n                                                                                                                               \\\n- (instancetype)EZ_CONCAT(initWith, EZ_FOR_SPACE(i, EZ_INIT_PARAM));                                                              \\\n                                                                                                                               \\\n@end\n")])])]),E("p",[_._v("当 i = 2的时候，上面这段宏就会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("@interface EZTuple2<__covariant A: id, __covariant B: id)> :EZTupleBase\n\n@property (nonatomic, strong) A first;\n@property (nonatomic, strong) B second;\n@property (nonatomic, strong) B last;\n\n- (instancetype)initWithFirst:(A)first Second:(B)second;\n\n@end\n")])])]),E("p",[_._v("我们在前面分析过，"),E("code",[_._v("EZ_TUPLE_CLASSES_DEF")]),_._v("会被展开为")]),_._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[_._v("EZ_TUPLE_DEF(1) ; EZ_TUPLE_DEF(2) ; ... EZ_TUPLE_DEF(18) ; EZ_TUPLE_DEF(19) ; EZ_TUPLE_DEF(20)\n")])])]),E("p",[_._v("所以在预编译时，这些宏就会被展开成"),E("code",[_._v("EZTuple1")]),_._v("、"),E("code",[_._v("EZTuple2")]),_._v("……"),E("code",[_._v("EZTuple20")]),_._v("等类的定义。也就是说，"),E("code",[_._v("EasyTuple")]),_._v("通过这个宏为我们一口气定义了20个元祖类。这样的好处是显而易见的：如果不使用宏的话，那么为了创建这么多个类，我们就要手动去书写很多重复的代码；而使用宏的话，则能够通过宏的巧妙组合在预编译的时候自动生成代码。")]),_._v(" "),E("h2",{attrs:{id:"小结"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[_._v("#")]),_._v(" 小结")]),_._v(" "),E("p",[_._v("宏是一门非常非常强大的技术，但是之前我一直不知道它有这么多高级的玩法和用法，看了"),E("code",[_._v("EasyTuple")]),_._v("的源代码，真是让人大开眼界。其实"),E("code",[_._v("EasyTuple")]),_._v("中还有一些上文中没有提到的宏的用法，限于篇幅这里就不一一展开分析了，不过万变不离其宗，只需要像剥洋葱一样一层一层地进行定义的替换，再加一点点耐心和细心，那么再复杂的宏也不在话下。")]),_._v(" "),E("h2",{attrs:{id:"参考资料"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料：")]),_._v(" "),E("ol",[E("li",[E("a",{attrs:{href:"https://halfrost.com/reactivecocoa_macro/",target:"_blank",rel:"noopener noreferrer"}},[_._v("ReactiveCocoa 中奇妙无比的“宏”魔法"),E("OutboundLink")],1)]),_._v(" "),E("li",[E("a",{attrs:{href:"https://blog.sunnyxx.com/2014/03/06/rac_1_macros/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Reactive Cocoa Tutorial [1] = 神奇的Macros"),E("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=t.exports}}]);