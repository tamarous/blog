(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{388:function(t,n,r){"use strict";r.r(n);var i=r(42),a=Object(i.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"在数组中找到出现次数大于-n-k-的数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在数组中找到出现次数大于-n-k-的数"}},[t._v("#")]),t._v(" 在数组中找到出现次数大于 N/K 的数")]),t._v(" "),r("h2",{attrs:{id:"找到出现次数大于-n-2-的数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#找到出现次数大于-n-2-的数"}},[t._v("#")]),t._v(" 找到出现次数大于 N/2 的数")]),t._v(" "),r("h3",{attrs:{id:"题意描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题意描述"}},[t._v("#")]),t._v(" 题意描述")]),t._v(" "),r("p",[t._v("给定一个整形数组 arr， 打印其中出现次数大于一半的数，如果没有这样的数字，则打印提示信息。要求：时间复杂度 O(N), 空间复杂度 O(1)。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('class Solution {\npublic:\n\tvoid printHalfNumber(vector<int> &arr) {\n    \tint cand = 0;\n    \tint times = 0;\n    \tfor(int i = 0; i < arr.size();i++) {\n        \tif (times == 0) {\n            \tcand = arr[i];\n            \ttimes = 1;\n        \t} else if (arr[i] == cand) {\n             \ttimes++;\n        \t} else {\n            \ttimes--;\n        \t}\n    \t}\n    \ttimes = 0;\n    \tfor(int i = 0; i < arr.size(); i++) {\n        \tif (arr[i] == cand) {\n            \ttimes++;\n        \t}\n    \t}\n    \tif (times > arr.size()/2) {\n        \tprintf("%d\\n", cand);\n    \t} else {\n        \tprintf("No such num\\n");\n    \t}\n\t}\n};\n')])])]),r("h2",{attrs:{id:"找到出现次数大于-n-k-的数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#找到出现次数大于-n-k-的数"}},[t._v("#")]),t._v(" 找到出现次数大于 N/K 的数")]),t._v(" "),r("h3",{attrs:{id:"过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程")]),t._v(" "),r("ol",[r("li",[t._v("声明一个哈希表，代表最后出现次数可能超过 N/K 的数字，以数字为键，以数字出现的次数为值。那么这个哈希表的大小最多为 K-1。")]),t._v(" "),r("li",[t._v("然后遍历数组，判断当前数 arr[i] 是否在这个哈希表中。如果在，就把那个数字的出现次数加1。否则进入第3步。")]),t._v(" "),r("li",[t._v("先看当前哈希表的大小是否已经为 K-1了。如果是的话，说明哈希表中存的已经是所有出现次数可能超过 N/K 的数字了，把这个哈希表中的所有键对应的值减1；如果不是，那么当前数可能是出现次数超过 N/K 的数，把它以及次数1 加入到哈希表中。")]),t._v(" "),r("li",[t._v("最后遍历这个哈希表，对每一个键出现的次数进行判断，如果大于 N/K，就把这个数字打印出来。")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('class Solution {\npublic:\n\tvoid printKTimesNum(vector<int> &arr, int k) {\n    \tif (k < 2) {\n         \tprintf("The k is invalid\\n");\n         \treturn;\n    \t}\n    \tunordered_map<int,int> map;\n    \tfor(int i = 0; i < arr.size(); i++) {\n        \tif (map.find(arr[i]) != map.end()) {\n            \tmap.insert({arr[i], map[arr[i]]+1});\n        \t} else {\n             \tif (map.size() == k-1) {\n                \tallMinusOne(map);\n             \t} else {\n                \tmap.insert({arr[i],1});\n             \t}\n        \t}\n    \t}\n    \t\n    \tunordered_map<int,int> reals = getReals(arr, map);\n    \tbool hasNumber = false;\n    \tfor(auto it = maps.begin(); it != maps.end();it++) {\n       \t\tif (it->second > arr.size() / k) {\n             \thasNumber = true;\n             \tprintf("%d\\n", it->first);\n       \t\t}\n    \t}\n    \tprintf(hasNumber?"":"No such num\\n");\n\t}\n\t\n\tvoid allMinusOne(unordered_map<int,int> &map) {\n    \tfor(auto it = map.begin(); it != map.end(); ) {\n        \tif (it->second == 1) {\n            \tit = map.erase(it);\n        \t} else {\n            \tit->second -= 1;\n            \tit++;\n        \t}\n    \t}\n\t}\n\t\n\tunordered_map<int,int> getReals(vector<int> &arr, unordered_map<int,int> map) {\n    \tunordered_map<int,int> result;\n    \tfor(int i = 0; i < arr.size(); i++) {\n        \tint curNum = arr[i];\n        \tif (map.find(curNum) != map.end()) {\n           \t\tresult.insert({curNum, map[curNum]+1});\n        \t} else {\n             \tresult.insert({curNum, 1});\n        \t}\n    \t}\n    \treturn result;\n\t}\n};\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);