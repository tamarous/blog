"use strict";(self.webpackChunktamarous_blog=self.webpackChunktamarous_blog||[]).push([[220],{1329:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(s,n){const a=(0,e.g2)("Mermaid");return(0,e.uX)(),(0,e.CE)("div",null,[n[0]||(n[0]=(0,e.Fv)('<h1 id="aspects-源码分析" tabindex="-1"><a class="header-anchor" href="#aspects-源码分析"><span>Aspects 源码分析</span></a></h1><p><a href="https://github.com/steipete/Aspects" target="_blank" rel="noopener noreferrer">Aspects</a>是一个非常知名的用于 AOP 的 Objective-C 库，可以对类方法或者实例方法进行 Hook，虽然它的作者不推荐在生产环境下使用这个组件，但是了解 Aspects 的原理，对于我们更好地掌握 Objective-C 这门语言还是很有好处的，因此本文就来简要地分析下 Aspects 的实现细节。</p><h2 id="nsobject-分类" tabindex="-1"><a class="header-anchor" href="#nsobject-分类"><span>NSObject 分类</span></a></h2><p>这个库里的代码不多，只有 <code>Aspects.h</code> 和 <code>Aspects.m</code> 两个文件。头文件里定义了一个 NSObject 的分类，给所有 NSObject 的子类添加了两个方法，分别用于对类方法和对类实例方法进行 Hook:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+ (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span></span>\n<span class="line"><span>                           withOptions:(AspectOptions)options</span></span>\n<span class="line"><span>                            usingBlock:(id)block</span></span>\n<span class="line"><span>                                 error:(NSError **)error;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span></span>\n<span class="line"><span>                           withOptions:(AspectOptions)options</span></span>\n<span class="line"><span>                            usingBlock:(id)block</span></span>\n<span class="line"><span>                                 error:(NSError **)error;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>options 指定了 AOP 切面执行的时机：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef NS_OPTIONS(NSUInteger, AspectOptions) {</span></span>\n<span class="line"><span>    AspectPositionAfter   = 0,            /// 在原始方法执行后生效（默认）        </span></span>\n<span class="line"><span>    AspectPositionInstead = 1,            /// 替换原始方法</span></span>\n<span class="line"><span>    AspectPositionBefore  = 2,            /// 在原始方法执行前生效</span></span>\n<span class="line"><span>    AspectOptionAutomaticRemoval = 1 &lt;&lt; 3 /// 只执行一次</span></span>\n<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span></span>\n<span class="line"><span>                      withOptions:(AspectOptions)options</span></span>\n<span class="line"><span>                       usingBlock:(id)block</span></span>\n<span class="line"><span>                            error:(NSError **)error {</span></span>\n<span class="line"><span>    return aspect_add(self, selector, options, block, error);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它调用了 <code>aspect_add</code> 这个静态函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static id aspect_add(id self, SEL selector, AspectOptions options, id block, NSError **error) {</span></span>\n<span class="line"><span>    NSCParameterAssert(self);</span></span>\n<span class="line"><span>    NSCParameterAssert(selector);</span></span>\n<span class="line"><span>    NSCParameterAssert(block);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    __block AspectIdentifier *identifier = nil;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 1.</span></span>\n<span class="line"><span>    aspect_performLocked(^{</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>        // 2. </span></span>\n<span class="line"><span>        if (aspect_isSelectorAllowedAndTrack(self, selector, options, error)) {</span></span>\n<span class="line"><span>            // 3</span></span>\n<span class="line"><span>            AspectsContainer *aspectContainer = aspect_getContainerForObject(self, selector);</span></span>\n<span class="line"><span>            // 4. </span></span>\n<span class="line"><span>            identifier = [AspectIdentifier identifierWithSelector:selector object:self options:options block:block error:error];</span></span>\n<span class="line"><span>            if (identifier) {</span></span>\n<span class="line"><span>                // 5. </span></span>\n<span class="line"><span>                [aspectContainer addAspect:identifier withOptions:options];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                // 6.  </span></span>\n<span class="line"><span>                // Modify the class to allow message interception.</span></span>\n<span class="line"><span>                aspect_prepareClassAndHookSelector(self, selector, error);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>    return identifier;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aspect-performlocked" tabindex="-1"><a class="header-anchor" href="#aspect-performlocked"><span>aspect_performLocked</span></a></h2><p><code>aspect_performLocked</code> 这个方法在执行作为参数的 block 前会进行加锁操作，而在 block 执行完后进行解锁：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static void aspect_performLocked(dispatch_block_t block) {</span></span>\n<span class="line"><span>    static OSSpinLock aspect_lock = OS_SPINLOCK_INIT;</span></span>\n<span class="line"><span>    OSSpinLockLock(&amp;aspect_lock);</span></span>\n<span class="line"><span>    block();</span></span>\n<span class="line"><span>    OSSpinLockUnlock(&amp;aspect_lock);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aspect-isselectorallowedandtrack" tabindex="-1"><a class="header-anchor" href="#aspect-isselectorallowedandtrack"><span>aspect_isSelectorAllowedAndTrack</span></a></h2><p>调用 <code>aspect_isSelectorAllowedAndTrack(self, selector, options, error)</code> 这个方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static BOOL aspect_isSelectorAllowedAndTrack(NSObject *self, SEL selector, AspectOptions options, NSError **error) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // `retain`，`release`，`autorelease`和`forwardInvocation`都是不允许被 hook ，它们会被加入黑名单中</span></span>\n<span class="line"><span>    static NSSet *disallowedSelectorList;</span></span>\n<span class="line"><span>    static dispatch_once_t pred;</span></span>\n<span class="line"><span>    dispatch_once(&amp;pred, ^{</span></span>\n<span class="line"><span>        disallowedSelectorList = [NSSet setWithObjects:@&quot;retain&quot;, @&quot;release&quot;, @&quot;autorelease&quot;, @&quot;forwardInvocation:&quot;, nil];</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 如果要 Hook 的方法是以上黑名单中的四个方法中的一个，会打印出错误信息并且返回 NO</span></span>\n<span class="line"><span>    NSString *selectorName = NSStringFromSelector(selector);</span></span>\n<span class="line"><span>    if ([disallowedSelectorList containsObject:selectorName]) {</span></span>\n<span class="line"><span>        NSString *errorDescription = [NSString stringWithFormat:@&quot;Selector %@ is blacklisted.&quot;, selectorName];</span></span>\n<span class="line"><span>        AspectError(AspectErrorSelectorBlacklisted, errorDescription);</span></span>\n<span class="line"><span>        return NO;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 如果 Hook 的是 dealloc 方法，并且 Hook 时机不是在 dealloc 方法执行之前，也会打印出错误信息，并且返回 NO</span></span>\n<span class="line"><span>    AspectOptions position = options&amp;AspectPositionFilter;</span></span>\n<span class="line"><span>    if ([selectorName isEqualToString:@&quot;dealloc&quot;] &amp;&amp; position != AspectPositionBefore) {</span></span>\n<span class="line"><span>        NSString *errorDesc = @&quot;AspectPositionBefore is the only valid position when hooking dealloc.&quot;;</span></span>\n<span class="line"><span>        AspectError(AspectErrorSelectorDeallocPosition, errorDesc);</span></span>\n<span class="line"><span>        return NO;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span> // 如果被 Hook 的类本身不能响应被 Hook 的方法，那么这里也会报错并且返回 NO</span></span>\n<span class="line"><span>    if (![self respondsToSelector:selector] &amp;&amp; ![self.class instancesRespondToSelector:selector]) {</span></span>\n<span class="line"><span>        NSString *errorDesc = [NSString stringWithFormat:@&quot;Unable to find selector -[%@ %@].&quot;, NSStringFromClass(self.class), selectorName];</span></span>\n<span class="line"><span>        AspectError(AspectErrorDoesNotRespondToSelector, errorDesc);</span></span>\n<span class="line"><span>        return NO;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // Search for the current class and the class hierarchy IF we are modifying a class object</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    if (class_isMetaClass(object_getClass(self))) {</span></span>\n<span class="line"><span>        // 如果 self 所属的类是一个元类</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>        Class klass = [self class];</span></span>\n<span class="line"><span>        </span></span>\n<span class="line"><span>        // aspect_getSwizzledClassesDict会返回一个全局唯一的`swizzledClassesDict`，以 Class 为键，以`AspectTracker`实例为值，下文中会介绍这个 dictionary 内的键值对是怎么添加的</span></span>\n<span class="line"><span>        NSMutableDictionary *swizzledClassesDict = aspect_getSwizzledClassesDict();</span></span>\n<span class="line"><span>        Class currentClass = [self class];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        AspectTracker *tracker = swizzledClassesDict[currentClass];</span></span>\n<span class="line"><span>        if ([tracker subclassHasHookedSelectorName:selectorName]) {</span></span>\n<span class="line"><span>            // 如果self 所属类的子类已经 Hook 了 selectorName 代表的 SEL，那么在这里就会打印出错误信息并且返回 NO</span></span>\n<span class="line"><span>            NSSet *subclassTracker = [tracker subclassTrackersHookingSelectorName:selectorName];</span></span>\n<span class="line"><span>            NSSet *subclassNames = [subclassTracker valueForKey:@&quot;trackedClassName&quot;];</span></span>\n<span class="line"><span>            NSString *errorDescription = [NSString stringWithFormat:@&quot;Error: %@ already hooked subclasses: %@. A method can only be hooked once per class hierarchy.&quot;, selectorName, subclassNames];</span></span>\n<span class="line"><span>            AspectError(AspectErrorSelectorAlreadyHookedInClassHierarchy, errorDescription);</span></span>\n<span class="line"><span>            return NO;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 从 self 所属类的继承链上进行查找</span></span>\n<span class="line"><span>        do {</span></span>\n<span class="line"><span>            tracker = swizzledClassesDict[currentClass];</span></span>\n<span class="line"><span>            // 如果继承链上的某个类的被交换的方法列表中有当前这个 SEL</span></span>\n<span class="line"><span>            if ([tracker.selectorNames containsObject:selectorName]) {</span></span>\n<span class="line"><span>            </span></span>\n<span class="line"><span>                // 继承链上的这个类就是被 Hook 的那个类，说明之前已经 Hook 过它了，因此这里直接返回 YES</span></span>\n<span class="line"><span>                if (klass == currentClass) {</span></span>\n<span class="line"><span>                    // Already modified and topmost!</span></span>\n<span class="line"><span>                    return YES;</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>                </span></span>\n<span class="line"><span>                // 继承链上的这个类不是被 Hook 的那个类，而是它的父类，那么这个方法已经被 Hook 过了，我们就不能再次进行 Hook 了，所以这里需要打印出一条错误信息，并且返回 NO</span></span>\n<span class="line"><span>                NSString *errorDescription = [NSString stringWithFormat:@&quot;Error: %@ already hooked in %@. A method can only be hooked once per class hierarchy.&quot;, selectorName, NSStringFromClass(currentClass)];</span></span>\n<span class="line"><span>                AspectError(AspectErrorSelectorAlreadyHookedInClassHierarchy, errorDescription);</span></span>\n<span class="line"><span>                return NO;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        } while ((currentClass = class_getSuperclass(currentClass)));</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // Add the selector as being modified.</span></span>\n<span class="line"><span>        currentClass = klass;</span></span>\n<span class="line"><span>        AspectTracker *subclassTracker = nil;</span></span>\n<span class="line"><span>        do {</span></span>\n<span class="line"><span>            tracker = swizzledClassesDict[currentClass];</span></span>\n<span class="line"><span>            if (!tracker) {</span></span>\n<span class="line"><span>                // 为 self 所属的这个类创建对应的 AspectTracker</span></span>\n<span class="line"><span>                tracker = [[AspectTracker alloc] initWithTrackedClass:currentClass];</span></span>\n<span class="line"><span>                </span></span>\n<span class="line"><span>                // 以 self 所属的类为键，以tracker 为值，添加到swizzledClassesDict中</span></span>\n<span class="line"><span>                swizzledClassesDict[(id&lt;NSCopying&gt;)currentClass] = tracker;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            if (subclassTracker) {</span></span>\n<span class="line"><span>                [tracker addSubclassTracker:subclassTracker hookingSelectorName:selectorName];</span></span>\n<span class="line"><span>            } else {</span></span>\n<span class="line"><span>                [tracker.selectorNames addObject:selectorName];</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // All superclasses get marked as having a subclass that is modified.</span></span>\n<span class="line"><span>            subclassTracker = tracker;</span></span>\n<span class="line"><span>        }while ((currentClass = class_getSuperclass(currentClass)));</span></span>\n<span class="line"><span>\t} else {</span></span>\n<span class="line"><span>\t</span></span>\n<span class="line"><span>\t   // 如果 self 所属的类不是元类，那么直接返回 YES</span></span>\n<span class="line"><span>\t\treturn YES;</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    return YES;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aspect-getcontainerforobject" tabindex="-1"><a class="header-anchor" href="#aspect-getcontainerforobject"><span>aspect_getContainerForObject</span></a></h2><p>以 self 和 selector 为参数，调用 <code>aspect_getContainerForObject</code> 函数，创建并返回一个 <code>AspectsContainer</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>AspectsContainer *aspectContainer = aspect_getContainerForObject(self, selector);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>static AspectsContainer *aspect_getContainerForObject(NSObject *self, SEL selector) {</span></span>\n<span class="line"><span>    NSCParameterAssert(self);</span></span>\n<span class="line"><span>    SEL aliasSelector = aspect_aliasForSelector(selector);</span></span>\n<span class="line"><span>    AspectsContainer *aspectContainer = objc_getAssociatedObject(self, aliasSelector);</span></span>\n<span class="line"><span>    if (!aspectContainer) {</span></span>\n<span class="line"><span>        aspectContainer = [AspectsContainer new];</span></span>\n<span class="line"><span>        objc_setAssociatedObject(self, aliasSelector, aspectContainer, OBJC_ASSOCIATION_RETAIN);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return aspectContainer;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AspectsContainer</code> 和 selector 是通过关联对象关联在一起的，因此这个方法里就是通过 selector 取出对应的 <code>AspectsContainer</code> 实例。</p><h2 id="identifierwithselector-object-options-block-error" tabindex="-1"><a class="header-anchor" href="#identifierwithselector-object-options-block-error"><span>identifierWithSelector:object:options:block:error:</span></a></h2><p>创建出一个 <code>AspectsIdentifier</code> 实例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+ (instancetype)identifierWithSelector:(SEL)selector object:(id)object options:(AspectOptions)options block:(id)block error:(NSError **)error {</span></span>\n<span class="line"><span>    NSCParameterAssert(block);</span></span>\n<span class="line"><span>    NSCParameterAssert(selector);</span></span>\n<span class="line"><span>    NSMethodSignature *blockSignature = aspect_blockMethodSignature(block, error); // TODO: check signature compatibility, etc.</span></span>\n<span class="line"><span>    if (!aspect_isCompatibleBlockSignature(blockSignature, object, selector, error)) {</span></span>\n<span class="line"><span>        return nil;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    AspectIdentifier *identifier = nil;</span></span>\n<span class="line"><span>    if (blockSignature) {</span></span>\n<span class="line"><span>        identifier = [AspectIdentifier new];</span></span>\n<span class="line"><span>        identifier.selector = selector;</span></span>\n<span class="line"><span>        identifier.block = block;</span></span>\n<span class="line"><span>        identifier.blockSignature = blockSignature;</span></span>\n<span class="line"><span>        identifier.options = options;</span></span>\n<span class="line"><span>        identifier.object = object; // weak</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return identifier;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="addaspect-withoptions" tabindex="-1"><a class="header-anchor" href="#addaspect-withoptions"><span>addAspect:withOptions:</span></a></h2><p>将上一步中创建的 <code>AspectIdentifier</code> 实例添加到第3步创建的 <code>AspectsContainer</code> 中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- (void)addAspect:(AspectIdentifier *)aspect withOptions:(AspectOptions)options {</span></span>\n<span class="line"><span>    NSParameterAssert(aspect);</span></span>\n<span class="line"><span>    NSUInteger position = options&amp;AspectPositionFilter;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 根据options的设置，AspectIdentifier实例会被添加到AspectsContainer对应的数组里</span></span>\n<span class="line"><span>    switch (position) {</span></span>\n<span class="line"><span>        case AspectPositionBefore:  self.beforeAspects  = [(self.beforeAspects ?:@[]) arrayByAddingObject:aspect]; break;</span></span>\n<span class="line"><span>        case AspectPositionInstead: self.insteadAspects = [(self.insteadAspects?:@[]) arrayByAddingObject:aspect]; break;</span></span>\n<span class="line"><span>        case AspectPositionAfter:   self.afterAspects   = [(self.afterAspects  ?:@[]) arrayByAddingObject:aspect]; break;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aspect-prepareclassandhookselector" tabindex="-1"><a class="header-anchor" href="#aspect-prepareclassandhookselector"><span>aspect_prepareClassAndHookSelector</span></a></h2><p>第6步是整个方法 Hook 的核心：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static void aspect_prepareClassAndHookSelector(NSObject *self, SEL selector, NSError **error) {</span></span>\n<span class="line"><span>    NSCParameterAssert(selector);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 6-1 </span></span>\n<span class="line"><span>    Class klass = aspect_hookClass(self, error);</span></span>\n<span class="line"><span>    Method targetMethod = class_getInstanceMethod(klass, selector);</span></span>\n<span class="line"><span>    IMP targetMethodIMP = method_getImplementation(targetMethod);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 6-2 </span></span>\n<span class="line"><span>    if (!aspect_isMsgForwardIMP(targetMethodIMP)) {</span></span>\n<span class="line"><span>        // Make a method alias for the existing method implementation, it not already copied.</span></span>\n<span class="line"><span>        const char *typeEncoding = method_getTypeEncoding(targetMethod);</span></span>\n<span class="line"><span>        </span></span>\n<span class="line"><span>        // 6-3 </span></span>\n<span class="line"><span>        SEL aliasSelector = aspect_aliasForSelector(selector);</span></span>\n<span class="line"><span>        if (![klass instancesRespondToSelector:aliasSelector]) {</span></span>\n<span class="line"><span>            // 如果第6-1步中创建出来的类不能响应第6-3步中新创建的 SEL，那么就通过class_addMethod 来给新创建出来的类添加一个方法，这个方法的 SEL 就是新创建的 SEL，IMP 和类型编码则是要被替换的方法的 IMP 和类型编码</span></span>\n<span class="line"><span>            __unused BOOL addedAlias = class_addMethod(klass, aliasSelector, method_getImplementation(targetMethod), typeEncoding);</span></span>\n<span class="line"><span>            NSCAssert(addedAlias, @&quot;Original implementation for %@ is already copied to %@ on %@&quot;, NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 6-4 </span></span>\n<span class="line"><span>        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);</span></span>\n<span class="line"><span>        AspectLog(@&quot;Aspects: Installed hook for -[%@ %@].&quot;, klass, NSStringFromSelector(selector));</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法也比较复杂，因此我们将它分成四个小步骤来分析。</p><p>第6-1步，调用 <code>aspect_hookClass</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static Class aspect_hookClass(NSObject *self, NSError **error) {</span></span>\n<span class="line"><span>    NSCParameterAssert(self);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>   // 这里是比较容易混淆的地方</span></span>\n<span class="line"><span>   // .class 方法，当 self 是一个 instance 的时候，返回 self 的类对象;</span></span>\n<span class="line"><span>   // 当 self 是一个类对象的时候，返回它自身</span></span>\n<span class="line"><span>   // object_getClass 方法则是获取 self 的 isa 指针指向的对象，如果self 是一个</span></span>\n<span class="line"><span>   // instance，那么返回一个类对象;如果 self 是一个类对象，则返回一个元类</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>\tClass statedClass = self.class;</span></span>\n<span class="line"><span>\tClass baseClass = object_getClass(self);</span></span>\n<span class="line"><span>\tNSString *className = NSStringFromClass(baseClass);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // Already subclassed</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>\tif ([className hasSuffix:AspectsSubclassSuffix]) {</span></span>\n<span class="line"><span>\t   // AspectsSubclassSuffix是个 static 字符串常量，也就是_Aspects_</span></span>\n<span class="line"><span>\t\treturn baseClass;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t}else if (class_isMetaClass(baseClass)) {</span></span>\n<span class="line"><span>        return aspect_swizzleClassInPlace((Class)self);</span></span>\n<span class="line"><span>    }else if (statedClass != baseClass) {</span></span>\n<span class="line"><span>        return aspect_swizzleClassInPlace(baseClass);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 在原来的类名后加上_Aspects_后缀</span></span>\n<span class="line"><span>\tconst char *subclassName = [className stringByAppendingString:AspectsSubclassSuffix].UTF8String;</span></span>\n<span class="line"><span>\tClass subclass = objc_getClass(subclassName);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tif (subclass == nil) {</span></span>\n<span class="line"><span>\t   // 创建出一个新的 Class 出来，基本步骤有下面几个：</span></span>\n<span class="line"><span>\t   // 1. 通过objc_allocateClassPair来创建一个新的子类</span></span>\n<span class="line"><span>\t   // 2. 通过class_addMethod, class_addIvar来向新的子类添加方法和实例变量</span></span>\n<span class="line"><span>\t   // 3. 通过objc_registerClassPair来向运行时系统注册这个新类</span></span>\n<span class="line"><span>\t   // 完成以上3步后就可以使用这个新建的类了</span></span>\n<span class="line"><span>\t   </span></span>\n<span class="line"><span>\t   // subclass是 baseClass 的子类，类名是subclassName</span></span>\n<span class="line"><span>\t\tsubclass = objc_allocateClassPair(baseClass, subclassName, 0);</span></span>\n<span class="line"><span>\t\tif (subclass == nil) {</span></span>\n<span class="line"><span>            NSString *errrorDesc = [NSString stringWithFormat:@&quot;objc_allocateClassPair failed to allocate class %s.&quot;, subclassName];</span></span>\n<span class="line"><span>            AspectError(AspectErrorFailedToAllocateClassPair, errrorDesc);</span></span>\n<span class="line"><span>            return nil;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>      // 将新创建出来的类的forwardInvocation:方法替换成__ASPECTS_ARE_BEING_CALLED__方法，详见下面的注释</span></span>\n<span class="line"><span>\t\taspect_swizzleForwardInvocation(subclass);</span></span>\n<span class="line"><span>\t\t// 替换subclass 的class 方法</span></span>\n<span class="line"><span>\t\taspect_hookedGetClass(subclass, statedClass);</span></span>\n<span class="line"><span>\t\t// 替换subclass 的元类的class 方法</span></span>\n<span class="line"><span>\t\taspect_hookedGetClass(object_getClass(subclass), statedClass);</span></span>\n<span class="line"><span>\t\t// 注册新创建出来的子类，现在可以使用了</span></span>\n<span class="line"><span>\t\tobjc_registerClassPair(subclass);</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 将 self 所属类的类型改为我们刚刚创建出来的带有_Aspects_后缀的类</span></span>\n<span class="line"><span>    // 这里可以通过在 Xcode 中打断点来进行验证</span></span>\n<span class="line"><span>\tobject_setClass(self, subclass);</span></span>\n<span class="line"><span>\t// 返回这个子类</span></span>\n<span class="line"><span>\treturn subclass;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>static void aspect_swizzleForwardInvocation(Class klass) {</span></span>\n<span class="line"><span>    NSCParameterAssert(klass);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // class_replaceMethod的第一个参数是要进行方法替换的 Class，第二个参数是被替换方法的 SEL，第三个参数是进行替换的方法的 IMP，第四个参数是类型编码，返回值是被替换的方法原来的 IMP。</span></span>\n<span class="line"><span>    // 如果 Class 中没有要被替换的SEL，那么这个方法和class_addMethod 就是一样的</span></span>\n<span class="line"><span>    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, &quot;v@:@&quot;);</span></span>\n<span class="line"><span>    if (originalImplementation) {</span></span>\n<span class="line"><span>        // 向 Class 中添加一个新的方法AspectsForwardInvocationSelectorName，也就是__aspects_forwardInvocation:，而它的IMP就是原来的forwardInvocation:的 IMP</span></span>\n<span class="line"><span>        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, &quot;v@:@&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    AspectLog(@&quot;Aspects: %@ is now aspect aware.&quot;, NSStringFromClass(klass));</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>static void aspect_hookedGetClass(Class class, Class statedClass) {</span></span>\n<span class="line"><span>    NSCParameterAssert(class);</span></span>\n<span class="line"><span>    NSCParameterAssert(statedClass);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>   // 获得class 原来的 class 方法</span></span>\n<span class="line"><span>\tMethod method = class_getInstanceMethod(class, @selector(class));</span></span>\n<span class="line"><span>\t// 创建一个新的 IMP</span></span>\n<span class="line"><span>\tIMP newIMP = imp_implementationWithBlock(^(id self) {</span></span>\n<span class="line"><span>\t\treturn statedClass;</span></span>\n<span class="line"><span>\t});</span></span>\n<span class="line"><span>\t// 将class 的实现用我们新创建的 IMP 来替换</span></span>\n<span class="line"><span>\tclass_replaceMethod(class, @selector(class), newIMP, method_getTypeEncoding(method));</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第6-2步，调用了 <code>aspect_isMsgForwardIMP</code> 来判断我们要替换的 SEL 的 IMP 是不是 <code>_objc_msgForward</code>，如果不是才会进行第6-3、6-4步的操作</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static BOOL aspect_isMsgForwardIMP(IMP impl) {</span></span>\n<span class="line"><span>    return impl == _objc_msgForward</span></span>\n<span class="line"><span>#if !defined(__arm64__)</span></span>\n<span class="line"><span>    || impl == (IMP)_objc_msgForward_stret</span></span>\n<span class="line"><span>#endif</span></span>\n<span class="line"><span>    ;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第6-3步，创建出一个新的 selector，这个新的 selector 是由被替换的 selector 的字符串加上一个特定前缀字符串生成的，然后将它添加到上面新创建的类中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static SEL aspect_aliasForSelector(SEL selector) {</span></span>\n<span class="line"><span>    NSCParameterAssert(selector);</span></span>\n<span class="line"><span>\treturn NSSelectorFromString([AspectsMessagePrefix stringByAppendingFormat:@&quot;_%@&quot;, NSStringFromSelector(selector)]);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第6-4步，将 selector 对应的实现 IMP 替换为 <code>_objc_msgForward</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>static IMP aspect_getMsgForwardIMP(NSObject *self, SEL selector) {</span></span>\n<span class="line"><span>    IMP msgForwardIMP = _objc_msgForward;</span></span>\n<span class="line"><span>#if !defined(__arm64__)</span></span>\n<span class="line"><span>    // As an ugly internal runtime implementation detail in the 32bit runtime, we need to determine of the method we hook returns a struct or anything larger than id.</span></span>\n<span class="line"><span>    // https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/LowLevelABI/000-Introduction/introduction.html</span></span>\n<span class="line"><span>    // https://github.com/ReactiveCocoa/ReactiveCocoa/issues/783</span></span>\n<span class="line"><span>    // http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042e/IHI0042E_aapcs.pdf (Section 5.4)</span></span>\n<span class="line"><span>    Method method = class_getInstanceMethod(self.class, selector);</span></span>\n<span class="line"><span>    const char *encoding = method_getTypeEncoding(method);</span></span>\n<span class="line"><span>    BOOL methodReturnsStructValue = encoding[0] == _C_STRUCT_B;</span></span>\n<span class="line"><span>    if (methodReturnsStructValue) {</span></span>\n<span class="line"><span>        @try {</span></span>\n<span class="line"><span>            NSUInteger valueSize = 0;</span></span>\n<span class="line"><span>            NSGetSizeAndAlignment(encoding, &amp;valueSize, NULL);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            if (valueSize == 1 || valueSize == 2 || valueSize == 4 || valueSize == 8) {</span></span>\n<span class="line"><span>                methodReturnsStructValue = NO;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        } @catch (__unused NSException *e) {}</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    if (methodReturnsStructValue) {</span></span>\n<span class="line"><span>        msgForwardIMP = (IMP)_objc_msgForward_stret;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>#endif</span></span>\n<span class="line"><span>    return msgForwardIMP;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们可以总结下第6步这个方法做了什么事情：</p><ol><li><p>创建了一个新的类，然后将这个新类的 <code>forwardInvocation:</code> 实现替换为了 <code>__ASPECTS_ARE_BEING_CALLED__</code>，并且将这个新类的类对象和元类的 class 修改为原来的类，最后将 self 所属的类修改为新类。</p></li><li><p>将 selector 对应的 IMP 实现替换为 <code>_objc_msgForward</code> 或 <code>_objc_msgForward_stret</code>。</p></li></ol><p>以上介绍的1~6步，完成了 Hook 的动作。</p><h2 id="aspects-are-being-called" tabindex="-1"><a class="header-anchor" href="#aspects-are-being-called"><span><strong>ASPECTS_ARE_BEING_CALLED</strong></span></a></h2><p>在被 Hook 的对象执行被替换的方法时，就会转而执行 <code>__ASPECTS_ARE_BEING_CALLED__</code> 这个方法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>static void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {</span></span>\n<span class="line"><span>    NSCParameterAssert(self);</span></span>\n<span class="line"><span>    NSCParameterAssert(invocation);</span></span>\n<span class="line"><span>    SEL originalSelector = invocation.selector;</span></span>\n<span class="line"><span>    // 给invocation.selector 的 name 添加了aspects_前缀</span></span>\n<span class="line"><span>\tSEL aliasSelector = aspect_aliasForSelector(invocation.selector);</span></span>\n<span class="line"><span>\t</span></span>\n<span class="line"><span>    invocation.selector = aliasSelector;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // AspectsContainer 和 SEL 是在第3步中通过关联对象技术关联到一起的</span></span>\n<span class="line"><span>    AspectsContainer *objectContainer = objc_getAssociatedObject(self, aliasSelector);</span></span>\n<span class="line"><span>    AspectsContainer *classContainer = aspect_getContainerForClass(object_getClass(self), aliasSelector);</span></span>\n<span class="line"><span>    AspectInfo *info = [[AspectInfo alloc] initWithInstance:self invocation:invocation];</span></span>\n<span class="line"><span>    NSArray *aspectsToRemove = nil;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 在第5步中，根据 options 的设置，AspectIdentifier 会被加入到container 的 beforeAspects、insteadAspects或afterAspects中</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 先执行 Hook 时机为调用原方法之前的方法</span></span>\n<span class="line"><span>    aspect_invoke(classContainer.beforeAspects, info);</span></span>\n<span class="line"><span>    aspect_invoke(objectContainer.beforeAspects, info);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    BOOL respondsToAlias = YES;</span></span>\n<span class="line"><span>    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>        //如果 option 为替代原方法，那么这里执行替代方法，原方法不执行</span></span>\n<span class="line"><span>        aspect_invoke(classContainer.insteadAspects, info);</span></span>\n<span class="line"><span>        aspect_invoke(objectContainer.insteadAspects, info);</span></span>\n<span class="line"><span>    }else {</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>        // 如果 option 不是替代原方法，那么在这里去执行原来的方法</span></span>\n<span class="line"><span>        Class klass = object_getClass(invocation.target);</span></span>\n<span class="line"><span>        do {</span></span>\n<span class="line"><span>            // 我们在第6-3步中向新创建出的类通过class_addMethod添加了aliasSelector</span></span>\n<span class="line"><span>            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {</span></span>\n<span class="line"><span>                [invocation invoke];</span></span>\n<span class="line"><span>                break;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }while (!respondsToAlias &amp;&amp; (klass = class_getSuperclass(klass)));</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 原方法已经执行完了，在这里执行 Hook 时机为调用原方法之后的方法</span></span>\n<span class="line"><span>    aspect_invoke(classContainer.afterAspects, info);</span></span>\n<span class="line"><span>    aspect_invoke(objectContainer.afterAspects, info);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 如果没有安装任何钩子函数（也就是没有进行方法 Hook），那么就调用原来的方法</span></span>\n<span class="line"><span>    if (!respondsToAlias) {</span></span>\n<span class="line"><span>        invocation.selector = originalSelector;</span></span>\n<span class="line"><span>        SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);</span></span>\n<span class="line"><span>        if ([self respondsToSelector:originalForwardInvocationSEL]) {</span></span>\n<span class="line"><span>            ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);</span></span>\n<span class="line"><span>        }else {</span></span>\n<span class="line"><span>            [self doesNotRecognizeSelector:invocation.selector];</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    [aspectsToRemove makeObjectsPerformSelector:@selector(remove)];</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>下面是一个泳道图，展示了 Aspects 的完整工作流程和工作原理：</p><ol><li>首先检查类是否已被 Hook（是否已有 <em>Aspects</em> 后缀的子类）</li><li>如果未被 Hook，通过 Runtime 创建新的子类</li><li>替换子类的 forwardInvocation 方法实现为 <strong>ASPECTS_ARE_BEING_CALLED</strong></li><li>保存原始的 forwardInvocation 实现到 __aspects_forwardInvocation:</li><li>修改子类的 class 方法，使其返回原始类</li><li>注册新创建的子类</li><li>修改实例的 isa 指针，指向新创建的子类</li><li>将原方法的实现替换为 _objc_msgForward</li><li>当方法被调用时，触发消息转发，执行 <strong>ASPECTS_ARE_BEING_CALLED</strong></li><li>根据 Hook 时机（Before/Instead/After）执行对应的切面逻辑和原始方法</li></ol>',48)),(0,e.bF)(a,{id:"mermaid-172",code:"eJydVN1y0kAYve9T7KVe9AW4YIZSVGZq7RTvd7ZhS6MhwSTU8Q7/WjqlSBW1Iz8dcYSOWop2plqw5WXYBa58BTe75S8JJcpFyGTPd77znT27Bn6UxKqEF2UU01F8DrBfAummLMkJpJogqMhYNR2fA0YCS2Y4ytbkdRnrDsBqkq3EceSJYeI4QMbgAxBfHPhIci2oIMOwoPRdg6QLpNXsfnhBjnPd7y0H/J4ux2QVKcMakj0ktV0LyrFC9rzfbxfqA73G827+iNVYC3BD0x5GsMJeNTEEf9irGNHEQD5AP6Xo4WfWjx6ckFyV/PzRq3wFdxgbJ5hAz7vraOdJoXzF03pDy8VR/2XNxEDbxLpDiQ+Q6jOGtToXvwx6/vmdEY4x6yZNmz2JtvZAgkhRNAmZmPu5gmThhfcp3HdsmoLBZjMbC226VwHrmv4Y6dGwummpkDUVdH41AYSByEooeD8CA6shuBAKL9+GwcDSUmgRQptNI0bJ+oM6TihIwnexuaFFPWrptEvk+EAEyUURqZe72caMvigaFT1vQCgSZkAHle+mZ0V1mj8X1OxUnNPTtzNUiO0YHoZeKtMvlT3siD3dp0dkKzNlVz2kgmdKxzGZQfTJTHlUIEZn03Yud1l7IBsI0Mx2/3XaRYPfP3Ef8P7W4TawKS4IVkly+9Y8/24FTyhz1OH/DA2ksTVeInh4rLk7cSN2SwRjpGZ4a41tKL+tBuccMCsEKccPYJMVtSp5tU/P0vTpSe/iG3ufjqU7td7HzOyDxh9IMYUI+v6MFpvWKAuYhRvzVVsPMcqgA9nZ617USXq7X6r0U63epdB0fQ0P8di0WDGwXUBYZeYjYeEUtk7r5RWhvb0bYWCdJfY/xF2PzmXdxsdqdO4vWXwrQg=="})])}]]),p=JSON.parse('{"path":"/iOS/aspects_source_probe.html","title":"Aspects 源码分析","lang":"en-US","frontmatter":{"category":"iOS","tags":["源码分析"]},"git":{"createdTime":1741423912000,"updatedTime":1741423912000,"contributors":[{"name":"Tamarous","username":"Tamarous","email":"hiwangzewei@qq.com","commits":1,"url":"https://github.com/Tamarous"}]},"readingTime":{"minutes":11.64,"words":3492},"filePathRelative":"iOS/aspects_source_probe.md","localizedDate":"March 8, 2025","excerpt":"\\n<p><a href=\\"https://github.com/steipete/Aspects\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Aspects</a>是一个非常知名的用于 AOP 的 Objective-C 库，可以对类方法或者实例方法进行 Hook，虽然它的作者不推荐在生产环境下使用这个组件，但是了解 Aspects 的原理，对于我们更好地掌握 Objective-C 这门语言还是很有好处的，因此本文就来简要地分析下 Aspects 的实现细节。</p>\\n<h2>NSObject 分类</h2>\\n<p>这个库里的代码不多，只有 <code>Aspects.h</code> 和 <code>Aspects.m</code> 两个文件。头文件里定义了一个 NSObject 的分类，给所有 NSObject 的子类添加了两个方法，分别用于对类方法和对类实例方法进行 Hook:</p>"}')},6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);