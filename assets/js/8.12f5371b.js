(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(e,t,r){"use strict";r.r(t);var s=r(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"leetcode-100-same-tree及572-subtree-of-another-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-100-same-tree及572-subtree-of-another-tree"}},[e._v("#")]),e._v(" LeetCode-100-Same Tree及572-Subtree of Another Tree")]),e._v(" "),r("p",[e._v("之所以把这两道题放到一起，是因为第一道题的算法是第二道题的一块小零件，如果理解第一题的解法的话，那么看到第二题应该就很快有思路了。")]),e._v(" "),r("h2",{attrs:{id:"same-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#same-tree"}},[e._v("#")]),e._v(" Same Tree")]),e._v(" "),r("p",[e._v("本题的要求是判断两棵树是否相同。根据题目描述，两棵树相同的条件是这两棵树的结构相同，并且对应位置上的节点的值也相同。\n我们将这两棵树分别称为 s和 t。首先先处理一些特殊的情况：")]),e._v(" "),r("ul",[r("li",[e._v("当 s 和 t 中有一个不为空，也就意味着这两棵树的结构不同，因此应该返回 false。")]),e._v(" "),r("li",[e._v("当 s 和t 全为空时，应该返回 "),r("strong",[e._v("true")]),e._v("。")]),e._v(" "),r("li",[e._v("当 s 和 t 全不为空时，此时先比较 s 和 t 的值是否相同，如果不同，则返回false, 如果相同，则递归地比较s 和 t 的左右孩子是否相同。")])]),e._v(" "),r("p",[e._v("顺着以上思路，不难写出如下代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("class Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (!p && !q) {\n            return true;\n        }\n        if (p == NULL || q == NULL) {\n            return false;\n        }\n        if (p->val != q->val) {\n            return false;\n        }\n        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);\n    }\n};  \n")])])]),r("h3",{attrs:{id:"subtree-of-another-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#subtree-of-another-tree"}},[e._v("#")]),e._v(" Subtree of Another Tree")]),e._v(" "),r("p",[e._v("本题的要求是判断 t 是否是 s 的子树，也就是说如果 t 和 s 的某一部分的结构和对应节点的值相同的话，那么 t 就是 s 的一棵子树。经过思考我们发现，其实这道题的核心思路就是判断 t 和 s 的某一部分是否是相同的，因此可以借用上面的算法。因此这个题的思路就很明了了：首先判断 s和 t 是否相同，相同则返回 true；否则判断 t 是否是 s 的左孩子或右孩子的子树。代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("class Solution {\npublic:\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        if ( s == NULL) {\n            return false;\n        }\n        if (isSameTree(s,t)) {\n            return true;\n        }\n        return isSubtree(s->left,t) || isSubtree(s->right,t);\n    }\n    \nprivate:\n    bool isSameTree(TreeNode *s, TreeNode *t) {\n        if (!s && !t) {\n            return true;\n        }\n        if (s == NULL || t == NULL) {\n            return false;\n        }\n        if (s->val != t->val) {\n            return false;\n        } else {\n            return isSameTree(s->left,t->left) && isSameTree(s->right,t->right);\n        }\n    }\n};\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);