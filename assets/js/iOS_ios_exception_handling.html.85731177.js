"use strict";(self.webpackChunktamarous_blog=self.webpackChunktamarous_blog||[]).push([[5143],{290:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>h,data:()=>t});var n=a(641);const l={},h=(0,a(6262).A)(l,[["render",function(s,i){const a=(0,n.g2)("Mermaid"),l=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[i[3]||(i[3]=(0,n.Fv)('<h1 id="ios-异常捕获原理" tabindex="-1"><a class="header-anchor" href="#ios-异常捕获原理"><span>iOS 异常捕获原理</span></a></h1><h2 id="_1-ios-异常基础" tabindex="-1"><a class="header-anchor" href="#_1-ios-异常基础"><span>1. iOS 异常基础</span></a></h2><p>在 iOS 中，异常（Exception）是指程序运行过程中出现的非正常情况，这种情况下应用无法再正常继续执行下去了，也就是我们常说的应用崩了。</p><p>异常有好几种，按照从底层到上层的顺序来说的话，依次是：</p><p>Mach 异常是由操作系统内核引发的，常见的比如访问了无效内存地址、除零错误等，它是一种底层的异常机制。</p><p>BSD Signal 异常是 Mach 异常在 BSD 层的一种表现形式，通常是由 Mach 异常转换而来的，常见的比如SIGSEGV（段错误）、SIGBUS（总线错误）、SIGABRT（异常终止）等。</p><p>Objective-C 异常（NSException）是一种高层的异常机制，用于处理运行时的异常情况。而 Swift Error 则是一种错误处理机制，主要用于处理可恢复的错误，它不是真正意义上的异常机制。</p><h2 id="_2-ios-异常捕获机制" tabindex="-1"><a class="header-anchor" href="#_2-ios-异常捕获机制"><span>2. iOS 异常捕获机制</span></a></h2><h3 id="mach-异常" tabindex="-1"><a class="header-anchor" href="#mach-异常"><span>Mach 异常</span></a></h3><p>Mach 异常首先通过异常端口（exception_port）转换为对应的 BSD Signal。</p><table><thead><tr><th>Mach 异常类型</th><th>BSD Signal</th><th>说明</th></tr></thead><tbody><tr><td>EXC_BAD_ACCESS</td><td>SIGSEGV/SIGBUS</td><td>内存访问错误，具体信号取决于访问错误类型</td></tr><tr><td>EXC_BAD_INSTRUCTION</td><td>SIGILL</td><td>非法指令错误</td></tr><tr><td>EXC_ARITHMETIC</td><td>SIGFPE</td><td>算术运算错误</td></tr><tr><td>EXC_BREAKPOINT</td><td>SIGTRAP</td><td>断点异常</td></tr><tr><td>EXC_SOFTWARE</td><td>SIGABRT</td><td>软件触发的异常</td></tr><tr><td>EXC_GUARD</td><td>SIGSYS</td><td>系统调用错误</td></tr></tbody></table><p>有一些 Mach 异常无法直接转换为 BSD Signal，只能在 Mach 层面被处理，比如：</p><table><thead><tr><th>Mach 异常类型</th><th>说明</th></tr></thead><tbody><tr><td>EXC_RESOURCE</td><td>资源限制相关的异常，Mach 层特有</td></tr><tr><td>EXC_GUARD</td><td>文件系统保护相关的异常，Mach 层特有</td></tr><tr><td>EXC_CORPSE_NOTIFY</td><td>进程死亡通知相关的异常，Mach 层特有</td></tr></tbody></table><p>这种情况下，系统提供了一个底层的异常处理机制，即 Mach Exception Handler。</p><ol><li>通过 task_get_exception_ports 获取当前任务的异常端口</li><li>使用 task_set_exception_ports 设置异常处理端口：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kern_return_t task_set_exception_ports(</span></span>\n<span class="line"><span>    task_t task,</span></span>\n<span class="line"><span>    exception_mask_t exception_mask,</span></span>\n<span class="line"><span>    mach_port_t exception_port,</span></span>\n<span class="line"><span>    exception_behavior_t behavior,</span></span>\n<span class="line"><span>    thread_state_flavor_t flavor</span></span>\n<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在异常处理端口中实现异常处理逻辑：</li></ol><ul><li>获取异常信息（异常类型、出错地址等）</li><li>获取线程状态信息</li><li>记录崩溃现场信息</li><li>进行必要的资源清理</li></ul><p>Mach 异常处理是最底层的异常处理机制，它具有最高的处理优先级。当发生异常时，系统会优先调用 Mach 异常处理器，如果异常没有被处理，才会转换为 BSD Signal。由于实现较为复杂，在实际开发中通常使用更上层的异常处理机制，如 BSD Signal 或 NSException。不过在一些需要深度防护的场景下，Mach 异常处理器仍然是不可或缺的工具。</p><h3 id="bsd-signal" tabindex="-1"><a class="header-anchor" href="#bsd-signal"><span>BSD Signal</span></a></h3><p>BSD Signal 可以通过 signal_handler() 来注册对应的信号处理器。当发生对应的信号时，系统会调用该信号处理器进行处理。</p><div class="language-objc line-numbers-mode" data-highlighter="shiki" data-ext="objc" data-title="objc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;signal.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 信号处理函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SignalHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 根据不同信号类型进行处理</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (signal) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIGSEGV:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIGBUS:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIGABRT:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIGILL:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIGFPE:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取当前线程的调用栈</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *callStack </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NSThread</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> callStackSymbols</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;调用栈信息:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, callStack);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 结束程序</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(signal);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注册信号处理器</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RegisterSignalHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 注册需要捕获的信号</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SIGSEGV, SignalHandler);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SIGBUS, SignalHandler);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SIGABRT, SignalHandler);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SIGILL, SignalHandler);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SIGFPE, SignalHandler);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，BSD Signal 和 NSException 是两个独立的异常处理机制，Signal 不会自动转换为 NSException。当发生底层异常时，会先触发 Mach 异常处理器，如果没有处理则会转换为对应的 Signal 处理。</p><h3 id="高层处理" tabindex="-1"><a class="header-anchor" href="#高层处理"><span>高层处理</span></a></h3><h4 id="objective-c-异常处理" tabindex="-1"><a class="header-anchor" href="#objective-c-异常处理"><span>Objective-C 异常处理</span></a></h4><p>Objective-C 提供了 @try-@catch-@finally 语法来处理异常：</p><div class="language-objc line-numbers-mode" data-highlighter="shiki" data-ext="objc" data-title="objc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 可能抛出异常的代码</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @[];</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 会抛出越界异常</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NSException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *exception) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异常处理代码</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;捕获到异常：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, exception);</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;异常名称：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;异常原因：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;异常调用栈：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">callStackSymbols</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 无论是否发生异常都会执行的代码</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;清理工作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，我们可以使用 NSSetUncaughtExceptionHandler 注册一个全局的异常处理器，用于捕获未被 @try-@catch 捕获的异常：</p><div class="language-objc line-numbers-mode" data-highlighter="shiki" data-ext="objc" data-title="objc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UncaughtExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NSException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取异常信息</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [exception </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *reason </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [exception </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *symbols </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [exception </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">callStackSymbols</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异常处理逻辑</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    NSString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *exceptionInfo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NSString</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stringWithFormat:</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        @&quot;异常名称：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">异常原因：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">异常堆栈：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        name, reason, symbols];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 可以在这里将异常信息写入文件或上报服务器</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    NSLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, exceptionInfo);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在程序启动时注册异常处理器</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">NSSetUncaughtExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;UncaughtExceptionHandler);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="swift-错误处理" tabindex="-1"><a class="header-anchor" href="#swift-错误处理"><span>Swift 错误处理</span></a></h4><p>Swift 使用 Error 协议来表示错误，并提供了 do-catch 语法来处理错误：</p><div class="language-swift line-numbers-mode" data-highlighter="shiki" data-ext="swift" data-title="swift" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义错误类型</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NetworkError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> badURL</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> noData</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> parseError</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可能抛出错误的函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetchData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;"> urlString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">throws</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; Data {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    guard</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> url = </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: urlString) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NetworkError.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">badURL</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 模拟网络请求</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    guard</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">? </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contentsOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: url) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NetworkError.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noData</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 do-catch 处理错误</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetchData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://api.example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NetworkError.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">badURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;无效的 URL&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NetworkError.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">noData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;没有数据&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;其他错误：</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\\(</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">error</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图展示了 iOS 中异常处理的完整流程。</p>',33)),(0,n.bF)(a,{id:"mermaid-236",code:"eJyNVF1r01AYvt+vyM0uK6TptZAvtoDpSpOKcCglprENjLTEFBVysQ2tA90mQlFBq3OKhSmziNtoHfszO0n8F56cc5ovR9m5SfI+z/u+z3nOe9JxjX6X0YUVBq3VVQb+2YHn53B3GE7nOPZwcJ9wCILCcPwCI/Fq265lenbPWZSIFw/sDY3ym0ypdJsRgGqYixLNlIhBEQiaxGh2xzE2i5gE/h6/hdOdYmbyksiLGyBiAsRLIM1ZIN8TWwIvtXhRlDUtLZMhlROSUtX0ekPUlY3qtUwOM/m6oq+rsq6IKcly2ksUol0WBYrEABZoypomr93N96NoOUaFRkE2BbkY5IW6flMVxM9cKYlYzYKqJj82rX58nvlmlIGUPLIfeIzsuj33/4aLZ36Woovvwd7n4Pd2OCFzU5gogi+fKOy8by3Etfo91/MZMcGxGf7AMY1Bp+u1UmLXcNqbluuj3S2RGOyNov2z4P0M7p5eJxF+eRq+GmZtS1XeqSdBlSVjnpjIrJP2zVgdnI1QBb/GAnqTjk/gwVHqoorcxXcglxX+mofzj36tDK4uD+HBGZXy/CIY/czkckB3n5REwzO7OC06+RFNtsLZN7/G0X4k82p+FH7ahh/eZJIr6OA1y2tQ+xL5WR3B4TAYn+KCFQCfTeB0K+fNuwkpWDQ4uhwH+1+z/w74+iXJyfhNLy9TuoXGTCVHRa4LDZVxiMwuDXE4JLH0s7LyD9N1pQA="}),i[4]||(i[4]=(0,n.Lk)("h2",{id:"_3-异常信息的处理和分析",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_3-异常信息的处理和分析"},[(0,n.Lk)("span",null,"3. 异常信息的处理和分析")])],-1)),i[5]||(i[5]=(0,n.Lk)("p",null,"异常信息的收集和处理是崩溃分析的基础。当应用发生异常时，系统会立即启动一系列信息收集机制，以捕获和记录异常发生时的完整现场信息。这个过程包括异常的捕获、信息的收集以及后续的数据处理。",-1)),(0,n.bF)(a,{id:"mermaid-243",code:"eJx1kstOwkAUhvc8RV+ABbA34Q6uXOjqhIVGoytDNO69IlpBTFowwdCixLJA0EigoWpfpmemvIWl05tUZjfz/fOff+ac/aPt8gG3mYpw1jo+2WF7/DpHVcX7BypINlmsJLBjU3m1SImLRte4lHNGaqJZn5Y8bcqmaTD0LjkbEWEyb1cY3TvcjfwtFtR4BmnbIAMozWj3lEl8e0azQOsjfL74n+bAUG8NlSfNa1fgKTLMPeakpx8adnjfwMFxB2NdwrYcwgn37a3JvDUOuGdZuhiYwx/sedWXcBzop0Y1id5UydMghBOQLJc5F3o0x94WAzrTaZ9HuULkqn/ZwVbyyhW+PRrfOhX6IZyA9MYWF4SruoK9S9rwu5KHxV8oPBHfSW3IRqAAbGcqL6TT8GsVbFoEFpEOrKGZ4l3TFxRtwbpznYhjq9JSGtbJfOQXW1oKTQ=="}),i[6]||(i[6]=(0,n.Fv)('<h3 id="_3-1-关键信息的提取" tabindex="-1"><a class="header-anchor" href="#_3-1-关键信息的提取"><span>3.1 关键信息的提取</span></a></h3><p>在异常捕获的第一时间，系统会自动收集一系列关键信息。首先是异常的基础特征，包括异常的具体类型（可能是 Mach 异常、Signal 信号或 NSException），导致异常的具体原因（如错误码和描述信息），以及异常发生的确切时间点和涉及的线程信息。这些信息能够帮助我们快速定位异常的性质和严重程度。</p><p>与此同时，系统还会记录异常发生时的环境上下文。这包括设备的具体型号、当前运行的 iOS 系统版本，以及应用程序的版本号和构建信息。设备的基本状态，比如是否越狱，也是重要的环境信息之一。这些信息有助于我们了解异常是否与特定的硬件环境或系统版本相关。</p><p>更深层次的信息收集则关注于程序运行时的状态。系统会记录发生异常时的完整线程调用栈，这是定位问题最直接的线索。同时，内存使用情况和 CPU 占用率等性能指标，以及相关的系统日志，都是构成完整异常分析的重要组成部分。这些运行时信息能够帮助开发者理解异常发生时的程序运行状态，从而更准确地定位和解决问题。</p><h3 id="_3-2-堆栈符号化" tabindex="-1"><a class="header-anchor" href="#_3-2-堆栈符号化"><span>3.2 堆栈符号化</span></a></h3><h4 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h4><p>堆栈符号化是将程序崩溃时的内存地址转换为具有可读性的函数名、文件名和行号的过程。这个过程对于理解崩溃原因至关重要。</p><p>在 iOS 应用发生崩溃时，系统会记录崩溃时的内存地址，形如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0x000000010023A4C8 -[MyClass myMethod] + 88</span></span>\n<span class="line"><span>0x000000010023B6E4 -[MyClass otherMethod] + 156</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些地址信息对开发者来说难以理解，需要通过符号化转换为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-[MyClass myMethod] (MyClass.m:42)</span></span>\n<span class="line"><span>-[MyClass otherMethod] (MyClass.m:78)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h4><h5 id="dsym-文件结构" tabindex="-1"><a class="header-anchor" href="#dsym-文件结构"><span>dSYM 文件结构</span></a></h5><p>dSYM（Debug Symbol File）文件是符号化过程的核心，它包含了将内存地址映射到源代码位置所需的所有信息：</p><ol><li><p><strong>符号表（Symbol Table）</strong></p><ul><li>记录了所有符号（函数名、变量名等）的地址映射</li><li>包含符号的名称、地址范围、类型等信息</li></ul></li><li><p><strong>调试信息（Debug Info）</strong></p><ul><li>DWARF 格式的调试信息</li><li>包含源代码文件名、行号等位置信息</li><li>记录了编译时的类型信息和变量作用域</li></ul></li></ol><h5 id="符号化流程" tabindex="-1"><a class="header-anchor" href="#符号化流程"><span>符号化流程</span></a></h5><p>符号化过程主要包含以下步骤：</p><ol><li><p><strong>地址解析</strong></p><ul><li>从崩溃日志中提取内存地址</li><li>确定地址所属的二进制文件</li></ul></li><li><p><strong>符号查找</strong></p><ul><li>在 dSYM 文件中查找对应的符号表</li><li>根据地址范围定位具体符号</li></ul></li><li><p><strong>调试信息解析</strong></p><ul><li>解析 DWARF 格式的调试信息</li><li>获取源代码文件名和行号</li></ul></li><li><p><strong>信息整合</strong></p><ul><li>组合符号名称、文件名和行号</li><li>生成可读的堆栈信息</li></ul></li></ol>',18)),(0,n.bF)(a,{id:"mermaid-399",code:"eJxLL0osyFDwCeJSAALH6Kd9858u7346Z8PTuQ2xCrq6djWhoZ4uT3t2vmztrVFwik4JjvR9Nq39ye5tsWAdTmA1z9cse9q//cXCFc/mL33Wua9GwTkaIvR0Qu/z5RuQlbqEOwa5vVi++Nm8CTUKLtHPdk14vqDxyd7e53vXQZQ5g5QpuEY/7V//Yv3upwvani3ogMi4QGS4wJzi0iSI06EW9Ux7un3p09btYEkQcItOLMkvhugEAffo4srcpPyczOTEktTkosTiDIScR/SL9lVP1816srMTYgpEKjUvBWIZ2OkKbkhsdyS2BxcAjqGAlw=="}),i[7]||(i[7]=(0,n.Lk)("h3",{id:"_3-3-上下文信息的获取",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_3-3-上下文信息的获取"},[(0,n.Lk)("span",null,"3.3 上下文信息的获取")])],-1)),i[8]||(i[8]=(0,n.Lk)("p",null,"崩溃发生时，系统会收集多个维度的运行环境信息，帮助我们更好地定位问题。",-1)),i[9]||(i[9]=(0,n.Lk)("p",null,"内存方面，主要包括应用内存使用量、系统可用内存、内存警告记录等。这些信息可以快速判断崩溃是否由内存问题引起，比如内存泄漏或内存压力过大。",-1)),i[10]||(i[10]=(0,n.Lk)("p",null,"线程方面，系统会记录所有线程的运行状态、优先级和依赖关系。这对于发现死锁、线程竞争等并发问题很有帮助，也能让我们理解崩溃时的执行流程。",-1)),i[11]||(i[11]=(0,n.Lk)("p",null,"系统层面，会记录当前的系统负载、关键日志以及其他进程的运行状态。这些信息有助于判断是否是系统资源紧张或后台进程异常导致的崩溃。",-1)),i[12]||(i[12]=(0,n.Lk)("p",null,"用户行为的追踪也是问题定位的重要线索。系统会记录崩溃发生前的用户操作路径、关键的行为日志，以及相关的网络请求记录。这些信息能够帮助开发者重现问题场景，理解用户的实际使用情况。",-1)),(0,n.bF)(a,{id:"mermaid-418",code:"eJx10M1KAlEUB/B9TzEv4CsEjd/ast3BRVHUKqJo7xQzSDGOkjZBorUIg+iDRlQch3kZzznzGOq9OnMVvKv/5Xc+4JxfH19daEf6nrZ4N7cn8j8L38n4jeojdJ6FLN8B4PQOx2N0mtzqVbRUal/TAW2P3KFsqCS1QtOAdQud/7XGrAvOAFomfr9g+MVmP2mWmgWehPz5yA9DqhrbmgP2fPZ75H5g6Cqj04LzQE/2LOiseVMLwEGT/R1aBKr2o/uA2n9k/0g9uzyVK7ZOhKYXGa14QAlkE7UH2KjJE5VhcR+cOFizqNtIlpWFHgK+vlG3o2q8LCNKSiJnlZxTcl7JBSUXV3kO2smy6w=="}),i[13]||(i[13]=(0,n.Lk)("p",null,"通过系统化地收集和关联这些信息，开发团队能够准确定位崩溃发生的具体环境和触发条件，有效地复现问题场景，深入分析崩溃的根本原因，最终制定出精准的修复方案。这种全面的信息收集和分析机制，是保证应用稳定性的重要基础。",-1)),i[14]||(i[14]=(0,n.Lk)("h2",{id:"总结",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#总结"},[(0,n.Lk)("span",null,"总结")])],-1)),(0,n.Lk)("p",null,[i[1]||(i[1]=(0,n.eW)("本篇文章介绍了 iOS 异常的分类以及捕获的原理。接下来的")),(0,n.bF)(l,{to:"/iOS/kscrash_monitor.html"},{default:(0,n.k6)((()=>i[0]||(i[0]=[(0,n.eW)("几篇文章")]))),_:1}),i[2]||(i[2]=(0,n.eW)("里我们将逐步介绍 iOS上一个知名的异常监控 KSCrash 是如何实现的。"))])])}]]),t=JSON.parse('{"path":"/iOS/ios_exception_handling.html","title":"iOS 异常捕获原理","lang":"en-US","frontmatter":{"category":"iOS","star":true,"tags":["技术原理"]},"git":{"createdTime":1741418264000,"updatedTime":1741418264000,"contributors":[{"name":"Tamarous","username":"Tamarous","email":"hiwangzewei@qq.com","commits":1,"url":"https://github.com/Tamarous"}]},"readingTime":{"minutes":10.36,"words":3108},"filePathRelative":"iOS/ios_exception_handling.md","localizedDate":"March 8, 2025","excerpt":"\\n<h2>1. iOS 异常基础</h2>\\n<p>在 iOS 中，异常（Exception）是指程序运行过程中出现的非正常情况，这种情况下应用无法再正常继续执行下去了，也就是我们常说的应用崩了。</p>\\n<p>异常有好几种，按照从底层到上层的顺序来说的话，依次是：</p>\\n<p>Mach 异常是由操作系统内核引发的，常见的比如访问了无效内存地址、除零错误等，它是一种底层的异常机制。</p>\\n<p>BSD Signal 异常是 Mach 异常在 BSD 层的一种表现形式，通常是由 Mach 异常转换而来的，常见的比如SIGSEGV（段错误）、SIGBUS（总线错误）、SIGABRT（异常终止）等。</p>"}')},6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);