(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{371:function(n,e,t){"use strict";t.r(e);var s=t(42),r=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"leetcode-2-add-two-numbers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-2-add-two-numbers"}},[n._v("#")]),n._v(" LeetCode-2-Add Two Numbers")]),n._v(" "),t("p",[n._v("一个非常典型的错误代码如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Solution {\npublic:\n    ListNode * addTwoNumbers(ListNode *l1, ListNode *l2) {\n        long a = listToNumber(l1);\n        long b = listToNumber(l2);\n        long c = a + b;\n        ListNode *result = numberToList(c);\n        return result;\n    }\n    \n    long listToNumber(ListNode *list) {\n        if (list == NULL) {\n            return 0;\n        }\n        long sum = 0;\n        ListNode *ptr = list;\n        int i = 0;\n        while(ptr != NULL) {\n            sum += ptr->val * (long)pow(10,i++);\n            ptr = ptr->next;\n        }\n        return sum;\n    }\n\n    ListNode * numberToList(long number) {\n        if (number == 0) {\n            ListNode *head = new ListNode(number);\n            head->next = NULL;\n            return head;\n        }\n        ListNode *head = NULL;\n        ListNode *last = NULL;\n        bool firstTime = true;\n        while(number) {\n            long digit = number % 10;\n            ListNode *ptr = new ListNode(digit);\n            if (firstTime) {\n                head = ptr;\n                last = ptr;\n                firstTime = false;\n            } else {\n                last->next = ptr;\n            }\n            last = ptr;\n            number /= 10;\n        }\n        last->next = NULL;\n        return head;\n    }\n};\n")])])]),t("p",[n._v("上面这段代码的思路是：将这两个链表先转换成数字，然后对数字进行相加，最后再把这个数字用链表表示出来。看起来呢这种算法比较直观简单，如果用一些比较短的链表来测试的话结果也是对的，但是它的问题在于：如果链表很长很长，比如说有100个元素，那么就不能用基本类型来表示，否则就会产生溢出，造成不正确的计算结果。所以呢这个题其实是一个非常经典的大数问题。面对大数问题，我们只能一位一位地进行处理。")]),n._v(" "),t("p",[n._v("解决大数问题的最核心的过程就是对于进位的处理了。为了叙述的方便，假设两个输入的链表分别是A和B，输出的链表是C，那么C的第n位的数字应该是A的第n位数字加上B的第n位数字再加上前一位产生的进位。因此我们需要用一个变量标记当前位相加是否产生了进位，并且在每次相加后更新这个变量的值。剩下的内容就是一些边界情况的处理，这部分很繁琐，因此必须要非常小心，不过尝试几次后应该就可以通过了。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Solution {\npublic:\n    ListNode * addTwoNumbers(ListNode *l1, ListNode *l2) {\n        if (! l1 || !l2) {\n            return NULL;\n        }\n        ListNode *head = NULL;\n        bool firstTime = true;\n        ListNode *ptr1 = l1;\n        ListNode *ptr2 = l2;\n        bool needAddOne = false;\n        ListNode *last = NULL;\n        while(ptr1 && ptr2) {\n            int sum = 0;\n            if (needAddOne) {\n                sum = ptr1->val + ptr2->val + 1;\n            } else {\n                sum = ptr1->val + ptr2->val;\n            }\n            if (sum >= 10) {\n                needAddOne = true;\n                sum = sum - 10;\n            } else {\n                needAddOne = false;\n            }\n            ListNode *ptr = new ListNode(sum);\n            if (firstTime) {\n                head = ptr;\n                last = ptr;\n                firstTime = false;\n            }\n            last->next = ptr;\n            last = ptr;\n            ptr1 = ptr1->next;\n            ptr2 = ptr2->next;\n        }\n        if (!ptr1 && !ptr2) {\n            if (needAddOne) {\n                ListNode *ptr = new ListNode(1);\n                last->next = ptr;\n                last = ptr;\n                ptr->next = NULL;\n            } else {\n                last->next = NULL;\n            }\n        } else {\n            if (ptr1) {\n                while (ptr1) {\n                    int sum = 0;\n                    if (needAddOne) {\n                        sum = ptr1->val + 1;\n                    } else {\n                        sum = ptr1->val;\n                    }\n                    if (sum >= 10) {\n                        sum -= 10;\n                        needAddOne = true;\n                    } else {\n                        needAddOne = false;\n                    }\n                    ListNode *ptr = new ListNode(sum);\n                    last->next = ptr;\n                    last = ptr;\n                    ptr1 = ptr1->next;\n                }\n                if (needAddOne) {\n                    ListNode *ptr = new ListNode(1);\n                    last->next = ptr;\n                    last = ptr;\n                    ptr->next = NULL;\n                } else {\n                    last->next = NULL;\n                }\n            } else if (ptr2) {\n                while(ptr2) {\n                    int sum = 0;\n                    if (needAddOne) {\n                        sum = ptr2->val+1;\n                    } else {\n                        sum = ptr2->val;\n                    }\n                    if (sum >= 10) {\n                        sum -= 10;\n                        needAddOne = true;\n                    } else {\n                        needAddOne = false;\n                    }\n                    ListNode *ptr = new ListNode(sum);\n                    last->next = ptr;\n                    last = ptr;\n                    ptr2 = ptr2->next;\n                }\n                if (needAddOne) {\n                    ListNode *ptr = new ListNode(1);\n                    last->next = ptr;\n                    last = ptr;\n                    ptr->next = NULL;\n                } else {\n                    last->next = NULL;\n                }\n            }\n        }\n        return head;\n    }\n};\n")])])]),t("p",[t("strong",[n._v("UPDATE")]),n._v(" 好吧又被别人的算法虐了：别人的方法只要19行，而我的却要103行。。。\n好吧，差距还是很大的，虽然我的方法也能通过，但是在面试时如果有时间要求的话那么我的那种方法就很难写正确了。仔细看了一下，实现的差异在于对两条链表是否为空这种情况的判断：我是按照：两者均不为空、l1为空、l2为空、两者均为空这四种情况来处理的，而别人将这几个条件浓缩在了(p != NULL || q != NULL)这一个条件判断中，因此简化了很多。另外可以看到别人设置进位标记的那行代码："),t("code",[n._v("carry = sum / 10")]),n._v("，比我采用的判断方法要简洁很多。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);