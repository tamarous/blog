"use strict";(self.webpackChunktamarous_blog=self.webpackChunktamarous_blog||[]).push([[9369],{461:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>p});var i=a(641);const e={},l=(0,a(6262).A)(e,[["render",function(s,n){const a=(0,i.g2)("RouteLink"),e=(0,i.g2)("Mermaid");return(0,i.uX)(),(0,i.CE)("div",null,[n[12]||(n[12]=(0,i.Lk)("h1",{id:"stinger-源码分析",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#stinger-源码分析"},[(0,i.Lk)("span",null,"Stinger 源码分析")])],-1)),n[13]||(n[13]=(0,i.Lk)("h2",{id:"前言",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#前言"},[(0,i.Lk)("span",null,"前言")])],-1)),(0,i.Lk)("p",null,[(0,i.bF)(a,{to:"/iOS/aspects_source_probe.html"},{default:(0,i.k6)((()=>n[0]||(n[0]=[(0,i.eW)("前文")]))),_:1}),n[1]||(n[1]=(0,i.eW)("分析过 ")),n[2]||(n[2]=(0,i.Lk)("code",null,"Aspects",-1)),n[3]||(n[3]=(0,i.eW)(" 实现 AOP 的原理，而由饿了么开源的组件 ")),n[4]||(n[4]=(0,i.Lk)("a",{href:"https://github.com/eleme/Stinger",target:"_blank",rel:"noopener noreferrer"},"Stinger",-1)),n[5]||(n[5]=(0,i.eW)("同样是一个用于 AOP 的组件，并且饿了么宣称 ")),n[6]||(n[6]=(0,i.Lk)("code",null,"Stinger",-1)),n[7]||(n[7]=(0,i.eW)(" 在性能上能够吊打 ")),n[8]||(n[8]=(0,i.Lk)("code",null,"Aspects",-1)),n[9]||(n[9]=(0,i.eW)("，并且给出了测试的数据。那么 ")),n[10]||(n[10]=(0,i.Lk)("code",null,"Stinger",-1)),n[11]||(n[11]=(0,i.eW)(" 究竟是如何实现性能的飞跃的呢？让我们一起来探究一下。"))]),n[14]||(n[14]=(0,i.Fv)('<blockquote><p>本文分析时的 <code>Stinger</code> 版本为 <a href="https://github.com/eleme/Stinger/tree/1.0.0" target="_blank" rel="noopener noreferrer">1.0.0</a>。</p></blockquote><h2 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计"><span>接口设计</span></a></h2><p><code>Stinger</code> 提供了同 <code>Aspects</code> 类似的接口，分别用于 Hook 一个类以及 Hook 一个实例对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@interface NSObject (Stinger)</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>#pragma mark - For specific class</span></span>\n<span class="line"><span>+ (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;</span></span>\n<span class="line"><span>+ (STHookResult)st_hookClassMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#pragma mark - For specific instance</span></span>\n<span class="line"><span>- (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>@end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stoption" tabindex="-1"><a class="header-anchor" href="#stoption"><span>STOption</span></a></h3><p><code>STOption</code> 用于设置 AOP 切面逻辑的执行时机及签名校验：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef NS_OPTIONS(NSInteger, STOption) {</span></span>\n<span class="line"><span>  STOptionAfter = 0,     // 在原方法调用后执行</span></span>\n<span class="line"><span>  STOptionInstead = 1,   // 替换原方法</span></span>\n<span class="line"><span>  STOptionBefore = 2,    // 在原方法调用前执行</span></span>\n<span class="line"><span>  STOptionAutomaticRemoval = 1 &lt;&lt; 3, // Hook 逻辑只执行一次，第二次及以后都等同于调用原方法</span></span>\n<span class="line"><span>  STOptionWeakCheckSignature = 1 &lt;&lt; 16, // 弱校验模式</span></span>\n<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在默认情况下，原方法和 hook block 的方法签名应该是完全相同的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  //argument count</span></span>\n<span class="line"><span>  if (strictCheck &amp;&amp; methodSignature.numberOfArguments != blockSignature.numberOfArguments) {</span></span>\n<span class="line"><span>    NSCAssert(NO, @&quot;count of arguments isn&#39;t equal. Class: (%@), SEL: (%@), Identifier: (%@)&quot;, cls, NSStringFromSelector(sel), identifier);</span></span>\n<span class="line"><span>    return NO;</span></span>\n<span class="line"><span>  };</span></span>\n<span class="line"><span>  if (strictCheck) {</span></span>\n<span class="line"><span>    // from loc 2.</span></span>\n<span class="line"><span>    for (NSInteger i = 2; i &lt; methodSignature.numberOfArguments; i++) {</span></span>\n<span class="line"><span>      const char *methodType = [methodSignature getArgumentTypeAtIndex:i];</span></span>\n<span class="line"><span>      const char *blockType = [blockSignature getArgumentTypeAtIndex:i];</span></span>\n<span class="line"><span>      if (!methodType || !blockType || methodType[0] != blockType[0]) {</span></span>\n<span class="line"><span>        NSCAssert(NO, @&quot;argument (%zd) type isn&#39;t equal. Class: (%@), SEL: (%@), Identifier: (%@)&quot;, i, cls, NSStringFromSelector(sel), identifier);</span></span>\n<span class="line"><span>        return NO;</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>STOptionWeakCheckSignature</code> 选项开启时，<code>Stinger</code> 内部只会检查第一个参数和返回值的类型。</p><h3 id="sthookresult" tabindex="-1"><a class="header-anchor" href="#sthookresult"><span>STHookResult</span></a></h3><p><code>STHookResult</code>表示 Hook 的结果，有以下几种取值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef NS_ENUM(NSInteger, STHookResult) {</span></span>\n<span class="line"><span>  STHookResultSuccuss = 1, // fix typo</span></span>\n<span class="line"><span>  STHookResultSuccess = 1,</span></span>\n<span class="line"><span>  STHookResultErrorMethodNotFound = -1,</span></span>\n<span class="line"><span>  STHookResultErrorBlockNotMatched = -2,</span></span>\n<span class="line"><span>  STHookResultErrorIDExisted = -3,</span></span>\n<span class="line"><span>  STHookResultOther = -4,</span></span>\n<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hook-一个类" tabindex="-1"><a class="header-anchor" href="#hook-一个类"><span>Hook 一个类</span></a></h3><blockquote><p>当 Hook 的对象是一个类的时候，Hook 逻辑对于这个类的所有实例都生效。</p></blockquote><p>Hook 一个类时，实质是调用 <code>hookMethod</code> 这个静态方法，当 Hook 的为实例方法时，传入类对象本身，当 Hook 的为类方法时，传入类的元类。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+ (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {</span></span>\n<span class="line"><span>  return hookMethod(self, sel, option, identifier, block);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>+ (STHookResult)st_hookClassMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {</span></span>\n<span class="line"><span>  return hookMethod(object_getClass(self), sel, option, identifier, block);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hook-一个类的实例" tabindex="-1"><a class="header-anchor" href="#hook-一个类的实例"><span>Hook 一个类的实例</span></a></h3><blockquote><p>当 Hook 的对象是一个类的实例的时候，Hook 逻辑仅对这个特定的实例对象生效。</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {</span></span>\n<span class="line"><span>  @synchronized(self) {</span></span>\n<span class="line"><span>    Class stSubClass = getSTSubClass(self);</span></span>\n<span class="line"><span>    if (!stSubClass) return STHookResultOther;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    STHookResult hookMethodResult = hookMethod(stSubClass, sel, option, identifier, block);</span></span>\n<span class="line"><span>    if (hookMethodResult != STHookResultSuccess) return hookMethodResult;</span></span>\n<span class="line"><span>    if (!objc_getAssociatedObject(self, STSubClassKey)) {</span></span>\n<span class="line"><span>      object_setClass(self, stSubClass);</span></span>\n<span class="line"><span>      objc_setAssociatedObject(self, STSubClassKey, stSubClass, OBJC_ASSOCIATION_ASSIGN);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    id&lt;STHookInfoPool&gt; instanceHookInfoPool = st_getHookInfoPool(self, sel);</span></span>\n<span class="line"><span>    if (!instanceHookInfoPool) {</span></span>\n<span class="line"><span>      instanceHookInfoPool = [STHookInfoPool poolWithTypeEncoding:nil originalIMP:NULL selector:sel];</span></span>\n<span class="line"><span>      st_setHookInfoPool(self, sel, instanceHookInfoPool);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    STHookInfo *instanceHookInfo = [STHookInfo infoWithOption:option withIdentifier:identifier withBlock:block];</span></span>\n<span class="line"><span>    return [instanceHookInfoPool addInfo:instanceHookInfo] ? STHookResultSuccess : STHookResultErrorIDExisted;</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hook 类实例的时候，由于目的是只让 Hook 逻辑对于这个特定的实例生效，那么其实只要将这个实例的类对象通过 runtime 修改为一个唯一的类，就可以将逻辑转换为 Hook 类对象的方法，因此其核心仍然是 <code>hookMethod</code> 方法。</p><h2 id="hookmethod" tabindex="-1"><a class="header-anchor" href="#hookmethod"><span>hookMethod</span></a></h2><p>如前文所述，<code>hookMethod</code> 是 <code>Stinger</code> 的核心，它的实现如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>NS_INLINE STHookResult hookMethod(Class hookedCls, SEL sel, STOption option, STIdentifier identifier, id block) {</span></span>\n<span class="line"><span>  NSCParameterAssert(hookedCls);</span></span>\n<span class="line"><span>  NSCParameterAssert(sel);</span></span>\n<span class="line"><span>  NSCParameterAssert(identifier);</span></span>\n<span class="line"><span>  NSCParameterAssert(block);</span></span>\n<span class="line"><span>  Method m = class_getInstanceMethod(hookedCls, sel);</span></span>\n<span class="line"><span>  NSCAssert(m, @&quot;SEL (%@) doesn&#39;t has a imp in Class (%@) originally&quot;, NSStringFromSelector(sel), hookedCls);</span></span>\n<span class="line"><span>  if (!m) return STHookResultErrorMethodNotFound;</span></span>\n<span class="line"><span>  const char * typeEncoding = method_getTypeEncoding(m);</span></span>\n<span class="line"><span>  NSMethodSignature *methodSignature = [NSMethodSignature signatureWithObjCTypes:typeEncoding];</span></span>\n<span class="line"><span>  NSMethodSignature *blockSignature = st_getSignatureForBlock(block);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  if (!isMatched(methodSignature, blockSignature, option, hookedCls, sel, identifier)) {</span></span>\n<span class="line"><span>    return STHookResultErrorBlockNotMatched;</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  IMP originalImp = method_getImplementation(m);</span></span>\n<span class="line"><span>  @synchronized(hookedCls) {</span></span>\n<span class="line"><span>    id&lt;STHookInfoPool&gt; hookInfoPool = st_getHookInfoPool(hookedCls, sel);</span></span>\n<span class="line"><span>    if (!hookInfoPool) {</span></span>\n<span class="line"><span>      hookInfoPool = [STHookInfoPool poolWithTypeEncoding:[NSString stringWithUTF8String:typeEncoding] originalIMP:NULL selector:sel];</span></span>\n<span class="line"><span>      hookInfoPool.hookedCls = hookedCls;</span></span>\n<span class="line"><span>      hookInfoPool.statedCls = [hookedCls class];</span></span>\n<span class="line"><span>      </span></span>\n<span class="line"><span>      IMP stingerIMP = [hookInfoPool stingerIMP];</span></span>\n<span class="line"><span>      hookInfoPool.originalIMP = originalImp;</span></span>\n<span class="line"><span>      if (!class_addMethod(hookedCls, sel, stingerIMP, typeEncoding)) {</span></span>\n<span class="line"><span>        class_replaceMethod(hookedCls, sel, stingerIMP, typeEncoding);</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>      </span></span>\n<span class="line"><span>      st_setHookInfoPool(hookedCls, sel, hookInfoPool);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    if (st_isIntanceHookCls(hookedCls)) {</span></span>\n<span class="line"><span>      return STHookResultSuccess;</span></span>\n<span class="line"><span>    } else {</span></span>\n<span class="line"><span>      STHookInfo *hookInfo = [STHookInfo infoWithOption:option withIdentifier:identifier withBlock:block];</span></span>\n<span class="line"><span>      return [hookInfoPool addInfo:hookInfo] ? STHookResultSuccess :  STHookResultErrorIDExisted;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>粗略看来，这个方法内部的逻辑和 <code>Method Swizzling</code> 的步骤基本上类似，首先拿到被 hook 的 selector 的原始实现 originalImp，然后通过一个类 <code>STHookInfoPool</code> 的实例 hookInfoPool 拿到 stingerIMP，之后通过 <code>class_addMethod</code> 和 <code>class_replaceMethod</code> 来交换 selector 对应的实现。 hookInfoPool 实例，先尝试通过 hookedClass 和 selector 来获取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id&lt;STHookInfoPool&gt; st_getHookInfoPool(id obj, SEL key) {</span></span>\n<span class="line"><span>  NSCParameterAssert(obj);</span></span>\n<span class="line"><span>  NSCParameterAssert(key);</span></span>\n<span class="line"><span>  return objc_getAssociatedObject(obj, NSSelectorFromString([NSString stringWithFormat:@&quot;%@%@&quot;, STSelectorPrefix, NSStringFromSelector(key)]));</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果获得不到，则传入 selector 和 selector 对应的原方法的 IMP 的 type encoding 和 selector 来创建一个新的实例，并保存类对象和类的元类对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// STHookInfoPool.m</span></span>\n<span class="line"><span>+ (instancetype)poolWithTypeEncoding:(NSString *)typeEncoding originalIMP:(IMP)imp selector:(SEL)sel {</span></span>\n<span class="line"><span>  STHookInfoPool *pool = [[STHookInfoPool alloc] init];</span></span>\n<span class="line"><span>  pool.typeEncoding = typeEncoding;</span></span>\n<span class="line"><span>  pool.originalIMP = imp;</span></span>\n<span class="line"><span>  pool.sel = sel;</span></span>\n<span class="line"><span>  return pool;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (instancetype)init {</span></span>\n<span class="line"><span>  if (self = [super init]) {</span></span>\n<span class="line"><span>    _beforeInfos = [[NSMutableArray alloc] init];</span></span>\n<span class="line"><span>    _insteadInfo = nil;</span></span>\n<span class="line"><span>    _afterInfos = [[NSMutableArray alloc] init];</span></span>\n<span class="line"><span>    _semaphore = dispatch_semaphore_create(1);</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  return self;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void)setTypeEncoding:(NSString *)typeEncoding {</span></span>\n<span class="line"><span>  _typeEncoding = typeEncoding;</span></span>\n<span class="line"><span>  _signature = typeEncoding ? [NSMethodSignature signatureWithObjCTypes:[typeEncoding UTF8String]]: nil;</span></span>\n<span class="line"><span>  _argsCount = _signature.numberOfArguments;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void)setHookedCls:(Class)hookedCls {</span></span>\n<span class="line"><span>  _hookedCls = hookedCls;</span></span>\n<span class="line"><span>  _isInstanceHook = st_isIntanceHookCls(hookedCls);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void)setSel:(SEL)sel {</span></span>\n<span class="line"><span>  _sel = sel;</span></span>\n<span class="line"><span>  _uniqueKey = NSSelectorFromString([NSString stringWithFormat:@&quot;%@%@&quot;, STSelectorPrefix, NSStringFromSelector(sel)]);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在方法交换后，将 hookInfoPool 对象关联到 hookedClass 上。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void st_setHookInfoPool(id obj, SEL key, id&lt;STHookInfoPool&gt; infoPool) {</span></span>\n<span class="line"><span>  NSCParameterAssert(obj);</span></span>\n<span class="line"><span>  NSCParameterAssert(key);</span></span>\n<span class="line"><span>  objc_setAssociatedObject(obj, NSSelectorFromString([STSelectorPrefix stringByAppendingString:NSStringFromSelector(key)]), infoPool, OBJC_ASSOCIATION_RETAIN);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，通过 <code>st_isInstanceHook</code> 来判断是不是对 hookedCls 类实例的 hook，是的话直接返回，不是的话，生成一个 hookInfo 实例，加入到 hookInfoPool 中。</p><h2 id="libffi" tabindex="-1"><a class="header-anchor" href="#libffi"><span>libffi</span></a></h2><p>在继续分析之前，我们先停下来，简单了解下 <code>libffi</code> 的使用。</p><p>FFI（Foreign Function Interface，外部函数接口）允许在一门语言中动态地去调用另一门语言的代码，而<a href="https://github.com/libffi/libffi" target="_blank" rel="noopener noreferrer">libffi</a> 就是一种提供最底层支持、面向架构的 FFI。让我们通过两个例子来看下如何使用 <code>libffi</code>。</p><h3 id="直接调用-c-方法" tabindex="-1"><a class="header-anchor" href="#直接调用-c-方法"><span>直接调用 C 方法</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int hello(int a , int b) {</span></span>\n<span class="line"><span>    int x = a + b;</span></span>\n<span class="line"><span>    return x;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>int main() {</span></span>\n<span class="line"><span>    ffi_cif cif;</span></span>\n<span class="line"><span>    ffi_type *argTypes[] = {&amp;ffi_type_sint, &amp;ffi_type_sint};</span></span>\n<span class="line"><span>    ffi_prep_cif(&amp;cif, FFI_DEFAULT_ABI, 2, &amp;ffi_type_sint, argTypes);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    int a = 123;</span></span>\n<span class="line"><span>    int b = 456;</span></span>\n<span class="line"><span>    void *args[] = {&amp;a, &amp;b};</span></span>\n<span class="line"><span>    int retValue;</span></span>\n<span class="line"><span>    ffi_call(&amp;cif, (void *)hello, &amp;retValue, args);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总共分为以下几步：</p><ol><li>首先先生成一个 <code>ffi_cif</code> 对象 ，这个对象相当于 Objective-C 中的 Method Signature。</li><li>argsTypes 数组用于告诉 cif 每个参数的类型。</li><li>调用 <code>ffi_prep_cif</code> 来告诉 cif，参数的数量、返回值的类型。</li><li>最后调用 <code>ffi_call</code>，传入参数、保存返回值的地址和被调用方法的地址。</li></ol><h3 id="通用闭包函数" tabindex="-1"><a class="header-anchor" href="#通用闭包函数"><span>通用闭包函数</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/* Acts like puts with the file given at time of enclosure. */</span></span>\n<span class="line"><span>void puts_binding(ffi_cif *cif, unsigned int *ret, void* args[],</span></span>\n<span class="line"><span>    FILE *stream)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>  *ret = fputs(*(char **)args[0], stream);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>int main()</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>  ffi_cif cif;</span></span>\n<span class="line"><span>  ffi_type *args[1];</span></span>\n<span class="line"><span>  ffi_closure *closure;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  int (*bound_puts)(char *);</span></span>\n<span class="line"><span>  int rc;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  /* Allocate closure and bound_puts */</span></span>\n<span class="line"><span>  closure = ffi_closure_alloc(sizeof(ffi_closure), &amp;bound_puts);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  if (closure)</span></span>\n<span class="line"><span>  {</span></span>\n<span class="line"><span>    /* Initialize the argument info vectors */</span></span>\n<span class="line"><span>    args[0] = &amp;ffi_type_pointer;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    /* Initialize the cif */</span></span>\n<span class="line"><span>    if (ffi_prep_cif(&amp;cif, FFI_DEFAULT_ABI, 1,</span></span>\n<span class="line"><span>          &amp;ffi_type_uint, args) == FFI_OK)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>      /* Initialize the closure, setting stream to stdout */</span></span>\n<span class="line"><span>      if (ffi_prep_closure_loc(closure, &amp;cif, puts_binding,</span></span>\n<span class="line"><span>            stdout, bound_puts) == FFI_OK)</span></span>\n<span class="line"><span>      {</span></span>\n<span class="line"><span>        printf(&quot;Before bound_put()\\n&quot;);</span></span>\n<span class="line"><span>        rc = bound_puts(&quot;Hello World!&quot;);</span></span>\n<span class="line"><span>        /* rc now holds the result of the call to fputs */</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  /* Deallocate both closure, and bound_puts */</span></span>\n<span class="line"><span>  ffi_closure_free(closure);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述的例子中，通过<code>ffi_prep_closure_loc</code>创建了一个新的指向 puts_binding 方法的函数指针 bounds_puts，并且将 stdout 作为 user_data 传入到了 puts_binding 中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fi_prep_closure_loc (ffi_closure *closure, ffi_cif *cif, void (*fun) (ffi_cif *cif, void *ret, void **args, void *user_data), void *user_data, void *codeloc)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实际上，可以将任意数据通过 user_data 塞到 fun 中。比如我们可以自定义一个类型，存储想要 hook 的方法的原始实现地址、方法参数、返回值等信息，那么我们就可以在 fun 中通过 user_data 拿到被 hook 方法的原始实现地址、方法参数及返回值，然后通过前面介绍的 <code>ffi_call</code> 来进行调用，这样便实现了一个能 hook 各种函数调用的通用闭包方法。</p><h2 id="stingerimp" tabindex="-1"><a class="header-anchor" href="#stingerimp"><span>stingerIMP</span></a></h2><p>stingerIMP 这个方法的实现就是对上文中 <code>libffi</code> 的利用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// STHookInfoPool.m</span></span>\n<span class="line"><span>- (StingerIMP)stingerIMP {</span></span>\n<span class="line"><span>  if (_stingerIMP == NULL) {</span></span>\n<span class="line"><span>    ffi_type *returnType = st_ffiTypeWithType(self.signature.methodReturnType);</span></span>\n<span class="line"><span>    NSCAssert(returnType, @&quot;can&#39;t find a ffi_type of %s&quot;, self.signature.methodReturnType);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    NSUInteger argumentCount = self-&gt;_argsCount;</span></span>\n<span class="line"><span>    _args = malloc(sizeof(ffi_type *) * argumentCount) ;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    for (int i = 0; i &lt; argumentCount; i++) {</span></span>\n<span class="line"><span>      ffi_type* current_ffi_type = st_ffiTypeWithType([self.signature getArgumentTypeAtIndex:i]);</span></span>\n<span class="line"><span>      NSCAssert(current_ffi_type, @&quot;can&#39;t find a ffi_type of %s&quot;, [self.signature getArgumentTypeAtIndex:i]);</span></span>\n<span class="line"><span>      _args[i] = current_ffi_type;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    _closure = ffi_closure_alloc(sizeof(ffi_closure), (void **)&amp;_stingerIMP);</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    if(ffi_prep_cif(&amp;_cif, FFI_DEFAULT_ABI, (unsigned int)argumentCount, returnType, _args) == FFI_OK) {</span></span>\n<span class="line"><span>      if (ffi_prep_closure_loc(_closure, &amp;_cif, _st_ffi_function, (__bridge void *)(self), _stingerIMP) != FFI_OK) {</span></span>\n<span class="line"><span>        NSCAssert(NO, @&quot;genarate IMP failed&quot;);</span></span>\n<span class="line"><span>      }</span></span>\n<span class="line"><span>    } else {</span></span>\n<span class="line"><span>      NSCAssert(NO, @&quot;OMG&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    [self _genarateBlockCif];</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  return _stingerIMP;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面我们分析过，被 hook 的 selector 的实现已经被替换为 stingerIMP，那么在调用selector 时，会调用 stingerIMP，进而调用 <code>_st_ffi_function</code>。</p><h2 id="st-ffi-function" tabindex="-1"><a class="header-anchor" href="#st-ffi-function"><span>_st_ffi_function</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>NS_INLINE void _st_ffi_function(ffi_cif *cif, void *ret, void **args, void *userdata) {</span></span>\n<span class="line"><span>  STHookInfoPool *hookedClassInfoPool = (__bridge STHookInfoPool *)userdata;</span></span>\n<span class="line"><span>  STHookInfoPool *statedClassInfoPool = nil;</span></span>\n<span class="line"><span>  STHookInfoPool *instanceInfoPool = nil;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  void **innerArgs = alloca(hookedClassInfoPool-&gt;_argsCount * sizeof(*innerArgs));</span></span>\n<span class="line"><span>  void **slf = args[0];</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  if (hookedClassInfoPool-&gt;_isInstanceHook) {</span></span>\n<span class="line"><span>    statedClassInfoPool = _st_fast_get_HookInfoPool(hookedClassInfoPool-&gt;_statedCls, hookedClassInfoPool-&gt;_uniqueKey);</span></span>\n<span class="line"><span>    instanceInfoPool = _st_fast_get_HookInfoPool((__bridge id)(*slf), hookedClassInfoPool-&gt;_uniqueKey);</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  StingerParams *params = [[StingerParams alloc] initWithType:hookedClassInfoPool-&gt;_typeEncoding originalIMP:hookedClassInfoPool-&gt;_originalIMP sel:hookedClassInfoPool-&gt;_sel args:args argumentTypes:hookedClassInfoPool-&gt;_signature.argumentTypes];</span></span>\n<span class="line"><span>  innerArgs[1] = &amp;params;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  memcpy(innerArgs + 2, args + 2, (hookedClassInfoPool-&gt;_argsCount - 2) * sizeof(*args));</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  // before hooks</span></span>\n<span class="line"><span>  if (REAL_STATED_CALSS_INFO_POOL) ffi_call_infos(REAL_STATED_CALSS_INFO_POOL-&gt;_beforeInfos);</span></span>\n<span class="line"><span>  if (instanceInfoPool) ffi_call_infos(instanceInfoPool-&gt;_beforeInfos);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  // instead hooks</span></span>\n<span class="line"><span>  if (instanceInfoPool &amp;&amp; instanceInfoPool-&gt;_insteadInfo) {</span></span>\n<span class="line"><span>    innerArgs[0] = &amp;(((STHookInfo *)(instanceInfoPool-&gt;_insteadInfo))-&gt;_block);</span></span>\n<span class="line"><span>    ffi_call(&amp;(hookedClassInfoPool-&gt;_blockCif), _st_impForBlock(((STHookInfo *)(instanceInfoPool-&gt;_insteadInfo))-&gt;_block), ret, innerArgs);</span></span>\n<span class="line"><span>    if (((STHookInfo *)(instanceInfoPool-&gt;_insteadInfo))-&gt;automaticRemoval) {</span></span>\n<span class="line"><span>      instanceInfoPool-&gt;_insteadInfo = nil;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  } else if (REAL_STATED_CALSS_INFO_POOL &amp;&amp; REAL_STATED_CALSS_INFO_POOL-&gt;_insteadInfo) {</span></span>\n<span class="line"><span>    innerArgs[0] = &amp;(((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL-&gt;_insteadInfo))-&gt;_block);</span></span>\n<span class="line"><span>    ffi_call(&amp;(hookedClassInfoPool-&gt;_blockCif), _st_impForBlock(((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL-&gt;_insteadInfo))-&gt;_block), ret, innerArgs);</span></span>\n<span class="line"><span>    if (((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL-&gt;_insteadInfo))-&gt;automaticRemoval) {</span></span>\n<span class="line"><span>      REAL_STATED_CALSS_INFO_POOL-&gt;_insteadInfo = nil;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  } else {</span></span>\n<span class="line"><span>    /// original IMP</span></span>\n<span class="line"><span>    /// if original selector is hooked by aspects or jspatch.., which use message-forwarding, invoke invacation.</span></span>\n<span class="line"><span>    BOOL isForward = hookedClassInfoPool-&gt;_originalIMP == _objc_msgForward</span></span>\n<span class="line"><span>#if !defined(__arm64__)</span></span>\n<span class="line"><span>    || hookedClassInfoPool-&gt;_originalIMP == (IMP)_objc_msgForward_stret</span></span>\n<span class="line"><span>#endif</span></span>\n<span class="line"><span>    ;</span></span>\n<span class="line"><span>    if (isForward) {</span></span>\n<span class="line"><span>      [params invokeAndGetOriginalRetValue:ret];</span></span>\n<span class="line"><span>    } else {</span></span>\n<span class="line"><span>      ffi_call(cif, (void (*)(void))hookedClassInfoPool-&gt;_originalIMP, ret, args);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>  // after hooks</span></span>\n<span class="line"><span>  if (REAL_STATED_CALSS_INFO_POOL) ffi_call_infos(REAL_STATED_CALSS_INFO_POOL-&gt;_afterInfos);</span></span>\n<span class="line"><span>  if (instanceInfoPool) ffi_call_infos(instanceInfoPool-&gt;_afterInfos);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>粗略来说，该方法就是从 hookInfoPool 中依次取出 beforeInfos、insteadInfos、afterInfos，然后遍历 infos 数组，从 info 中取出 block，然后通过 <code>ffi_call</code> 来调用各个 block。</p><p><code>ffi_call_infos</code> 是 <code>Stinger</code> 内部定义的宏：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#define REAL_STATED_CALSS_INFO_POOL (statedClassInfoPool ?: hookedClassInfoPool)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#define ffi_call_infos(infos) \\</span></span>\n<span class="line"><span>for (NSUInteger i = 0; i &lt; infos.count; i++) { \\</span></span>\n<span class="line"><span>  STHookInfo *info = infos[i];\\</span></span>\n<span class="line"><span>  innerArgs[0] = &amp;(info-&gt;_block); \\</span></span>\n<span class="line"><span>  ffi_call(&amp;(hookedClassInfoPool-&gt;_blockCif), _st_impForBlock(info-&gt;_block), NULL, innerArgs); \\</span></span>\n<span class="line"><span>  if (info-&gt;automaticRemoval) { \\</span></span>\n<span class="line"><span>    [(NSMutableArray *)infos removeObject:info]; \\</span></span>\n<span class="line"><span>    i--; \\</span></span>\n<span class="line"><span>  } \\</span></span>\n<span class="line"><span>}  \\</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用原始实现的时候，可以看到 <code>Stinger</code> 已经兼容了 <code>Aspects</code> 及 <code>JSPatch</code> 这种将被 selector 的原始实现交换为 <code>objc_msgForward</code> 的情况：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/// original IMP</span></span>\n<span class="line"><span>    /// if original selector is hooked by aspects or jspatch.., which use message-forwarding, invoke invacation.</span></span>\n<span class="line"><span>    BOOL isForward = hookedClassInfoPool-&gt;_originalIMP == _objc_msgForward</span></span>\n<span class="line"><span>#if !defined(__arm64__)</span></span>\n<span class="line"><span>    || hookedClassInfoPool-&gt;_originalIMP == (IMP)_objc_msgForward_stret</span></span>\n<span class="line"><span>#endif</span></span>\n<span class="line"><span>    ;</span></span>\n<span class="line"><span>    if (isForward) {</span></span>\n<span class="line"><span>      [params invokeAndGetOriginalRetValue:ret];</span></span>\n<span class="line"><span>    } else {</span></span>\n<span class="line"><span>      ffi_call(cif, (void (*)(void))hookedClassInfoPool-&gt;_originalIMP, ret, args);</span></span>\n<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>总结下 <code>Stinger</code> 实现 AOP 的基本原理：</p><ol><li>将被 hook 的 selector 的实现交换为 stingerIMP。</li><li>使用 <code>libffi</code>的创建函数闭包的能力，将 stingerIMP 和 <code>_st_ffi_function</code> 绑定在一起。</li><li>执行被 hook 的 selector 的时候，转为执行 stingerIMP 方法，进而执行 <code>_st_ffi_function</code>。</li><li>在 <code>_st_ffi_function</code> 中，通过 <code>ffi_call</code>来执行被 hook 的 selector 对应的原始实现，并根据设置在合适时机执行切面的逻辑。</li></ol><p>整体执行流程如下图所示：</p>',58)),(0,i.bF)(e,{id:"mermaid-193",code:"eJztVU1T00AYvvMr9gfIeOfABXXkgDKD98w23ZRIyNYk4HirQmn5KjhCB6FUqTAwMFZGBxAq8GPsbtJ/4WY32aYfKZXxaC/dbN6P5332ebI2ejWDTBU90mHKgtMDgP3S0HJ0VU9D0wEjho7YH7QBqVZo/sI9+dYRM+HoZgpZflCw7Agx9ISm6X6EWHUEPLf0lG5Cg3cqfCKHy7R4SX9sDvBIgWJweDioPwS80zl34wjYjjKJ8dSoaTuQTTGGnEmcfBjsjhjQtsUWrwJVR5+FDmpBGayjtUl+h9SuwMSLp7y0hscxNnjwM8yy8SybVQY3sqvudRU4b9LosaniJNv+nXmLg3FGx8bZk41i00l+l81KVooggTRsIb+dzVJ0NhGCSf+RPUHNQRZ/1YZZsCnpYGslbaG0oupagIzkrunmKS0ckLUvrSxETkIsB1sIvt0gO2VekRXjUUnULbcPMAa2ZyykGFi9BwJbPDMm+wIh0+tX+3S1wrQkhESqZbdwWv951V6w25lmtr3bHFB9/ShsAgOG0gJ055ZVjZZs6c8ACK1K+L6GgFv7QMuldvyhDNtgiAIPQkcMAdFNsNrYOqfVs96u8ConQdvt+cBFfyN/unjo7a0AhbnIP0JtxmSJ2IwjyytckLUi8A2Hktxyd1mG7M+76wuMvfrNsgTqLl7S6hKdy5KFszhkQauIU4R2ME4HqMki13w+19it8Hd3KlSFhhGOnGAKnZJp3XTWOlFYrv7rM8kehH3GIfuQsq/Y2jtmPJkVK3DRO6KQeJX35NPLHZOlI/ew1vi438jUvJv3PAeZSaEWaDiAfN0ipSOh4XuSJJL7pOpfDI0MG4WnG5q52dgfSlr84juTPsme12tFurdAy+dcXTK4J31g2k49wdZraDGTN1XYSU/TlwFBCk68VJVmuszjyCU6WjoOjdlnZXEPRr4y4Xl20B5myjfhxj2ob6kl1RPvxra7KWrG9cJ/M3Y3Y+x9QUsZt5bvfV/8AUEw7v0="})])}]]),p=JSON.parse('{"path":"/iOS/stinger_source_probe.html","title":"Stinger 源码分析","lang":"en-US","frontmatter":{"category":"iOS","tags":["源码分析"]},"git":{"createdTime":1741622215000,"updatedTime":1741622215000,"contributors":[{"name":"Tamarous","username":"Tamarous","email":"hiwangzewei@qq.com","commits":1,"url":"https://github.com/Tamarous"}]},"readingTime":{"minutes":9.52,"words":2856},"filePathRelative":"iOS/stinger_source_probe.md","localizedDate":"March 10, 2025","excerpt":"\\n<h2>前言</h2>\\n<p><a href=\\"/blog/iOS/aspects_source_probe.html\\" target=\\"_blank\\">前文</a>分析过 <code>Aspects</code> 实现 AOP 的原理，而由饿了么开源的组件 <a href=\\"https://github.com/eleme/Stinger\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Stinger</a>同样是一个用于 AOP 的组件，并且饿了么宣称 <code>Stinger</code> 在性能上能够吊打 <code>Aspects</code>，并且给出了测试的数据。那么 <code>Stinger</code> 究竟是如何实现性能的飞跃的呢？让我们一起来探究一下。</p>"}')},6262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,i]of n)a[s]=i;return a}}}]);