(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{491:function(n,s,e){"use strict";e.r(s);var a=e(1),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"leetcode-28-implement-strstr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-28-implement-strstr"}},[n._v("#")]),n._v(" LeetCode-28-Implement strStr()")]),n._v(" "),e("p",[n._v("实现类似C语言中strStr()函数的效果, 即给出两个字符串A和B:(1)如果B为NULL,则返回0;(2)如果B比A长,则返回-1;(3)如果B在A中,则返回B在A中第一次出现的起始位置;(4)如果B不在A中,则返回-1.")]),n._v(" "),e("p",[n._v("这道题其实思路蛮清晰的,遍历A的每个字符,然后比较B的第一个字符和当前是否相同,如果相同则继续比较,如果把B遍历完了,那么就返回A的这个字符的索引.")]),n._v(" "),e("p",[n._v("顺着这样的思路,我写出了这样的算法:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("int strStr(char* haystack, char* needle) {\n    if(!needle) {\n        return 0;\n    }\n    size_t lens = strlen(haystack);\n    size_t lent = strlen(needle);\n    if(lens < lent) {\n        return -1;\n    }\n    for(int i = 0; i < lens;i++) {\n        int j = 0;\n        for(j = 0; j < lent;j++) {\n            if(needle[j] != haystack[i+j]) {\n                break;\n            }\n        }\n        if (j == lent) {\n            return i;\n        }\n    }\n    return -1;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])]),e("p",[n._v("但是提交后却一直报错,让我思考了好一会,后来看了题解才意识到, i的索引范围应该是从0到lens-lent+1, 否则按照我原来那种写法,在haystack[i+j]中就会越界,导致错误的结果. 因此只要把这里改了就可以AC了. 正确的代码如下:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("int strStr(char* haystack, char* needle) {\n    if(!needle) {\n        return 0;\n    }\n    size_t lens = strlen(haystack);\n    size_t lent = strlen(needle);\n    if(lens < lent) {\n        return -1;\n    }\n    for(int i = 0; i < lens-lent+1;i++) {\n        int j = 0;\n        for(j = 0; j < lent;j++) {\n            if(needle[j] != haystack[i+j]) {\n                break;\n            }\n        }\n        if (j == lent) {\n            return i;\n        }\n    }\n    return -1;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);