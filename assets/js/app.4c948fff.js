(self.webpackChunktamarous_blog=self.webpackChunktamarous_blog||[]).push([[3524],{39:(e,i,s)=>{"use strict";s.d(i,{v:()=>a});const a={"/":["",{text:"iOS 知识总结",prefix:"iOS/",collapsible:!0,children:["","aspects_source_probe","easytuple_source_probe","ios_exception_handling","kscrash_monitor","masonry_source_probe","sdwebimage_cache","stinger_source_probe","dyld_shared_cache"]},{text:"后端精进之路",prefix:"Backend/",collapsible:!0,children:["","golang_newbee_getting_better","gopool"]}]}},209:(e,i,s)=>{"use strict";s.d(i,{l:()=>a});const a=JSON.parse('{"category":{"/":{"path":"/category/","map":{"Backend":{"path":"/category/backend/","indexes":[0,1]},"iOS":{"path":"/category/ios/","indexes":[2,3,4,5,6,7,8,9]}}}},"tag":{"/":{"path":"/tag/","map":{"基础知识":{"path":"/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","indexes":[0]},"源码分析":{"path":"/tag/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","indexes":[1,2,4,6,7,8,9]},"稳定性":{"path":"/tag/%E7%A8%B3%E5%AE%9A%E6%80%A7/","indexes":[3]},"技术原理":{"path":"/tag/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/","indexes":[5]}}}}}')},693:()=>{},1901:(e,i,s)=>{"use strict";s.d(i,{U:()=>a});const a=JSON.parse('{"base":"/blog/","lang":"en-US","title":"Tamarous\' blog","description":"","head":[],"locales":{}}')},2054:()=>{},2850:(e,i,s)=>{"use strict";s.d(i,{P:()=>a});const a={Github:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Twitter:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon twitter-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512"/><path fill="#FFF" d="m560 473 186-216h-44L540 445 411 257H262l195 284-195 226h44l171-198 136 198h149zM322 290h68l312 445h-68z"/></svg>',Weibo:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon weibo-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#D52C2B"/><path fill="#D52C2B" d="M256 601c0 68 91 124 203 124 113 0 203-56 203-124s-90-123-203-123c-112 0-203 55-203 123"/><path fill="#FFF" d="M464 715c-99 9-185-35-191-98-7-64 68-123 168-133 99-10 185 34 191 98 7 64-69 123-168 133m199-212c-9-2-15-4-10-15 9-23 10-44 0-58-19-27-73-26-134-1 0 0-19 8-14-7 9-29 8-54-7-68-33-33-121 1-196 75-57 55-90 114-90 165 0 97 127 156 252 156 163 0 271-93 271-167 0-44-38-69-72-80m108-177c-39-43-98-59-151-48-13 3-20 14-18 27 3 12 15 19 27 17 39-8 80 3 108 34 27 29 36 70 24 108a22 22 0 0 0 14 28c12 4 25-3 29-14 18-53 5-112-33-152"/><path fill="#FFF" d="M711 379a78 78 0 0 0-74-23c-11 2-17 12-15 22v1c2 10 12 17 23 15a38 38 0 0 1 36 11c10 10 12 24 8 36a19 19 0 0 0 13 25c10 3 21-3 25-13a74 74 0 0 0-16-74M470 599c-4 6-12 9-18 6-6-2-7-8-4-14s11-9 17-6c6 2 8 8 5 14m-32 40a38 38 0 0 1-46 15c-15-7-20-25-10-39 10-15 29-21 45-15 15 7 20 24 11 39m36-106c-47-12-101 11-121 52-21 41-1 87 47 102 49 16 108-8 128-53 20-44-5-89-54-101"/></svg>'}},3192:(e,i,s)=>{"use strict";s.d(i,{J:()=>t,c:()=>a});const a=JSON.parse("{}"),t=Object.fromEntries([["/",{loader:()=>s.e(4470).then(s.bind(s,3965)),meta:{title:""}}],["/Backend/",{loader:()=>s.e(4913).then(s.bind(s,5018)),meta:{title:"后端精进之路"}}],["/Backend/golang_newbee_getting_better.html",{loader:()=>s.e(9256).then(s.bind(s,5071)),meta:{date:1741423912e3,category:["Backend"],tag:["基础知识"],excerpt:"\n<h2>前言</h2>\n<p>《Go 语言精进之路》这本书真的非常好，深入讲解了 Go 语言的方方面面，是入门的不二之选。本文是在学习《Go 语言精进之路》时所做的一些摘要和记录。</p>\n<h2>理解 GO 语言的设计哲学</h2>\n<ul>\n<li>追求简单，少即是多</li>\n<li>偏好组合，正交耦合</li>\n<li>原生并发，轻量高效</li>\n<li>面向工程，自带电池</li>\n</ul>\n<p>Go 特点：</p>\n<ul>\n<li>语法简洁，只有 25 个关键字</li>\n<li>内置垃圾收集，降低内存管理心智负担</li>\n<li>没有头文件</li>\n<li>显式依赖</li>\n<li>没有循环依赖</li>\n<li>常量只是数字</li>\n<li>首字母大小写决定可见性</li>\n<li>任何类型都可以拥有方法</li>\n<li>没有子类型继承</li>\n<li>没有算数转换</li>\n<li>接口是隐式的</li>\n<li>方法就是函数</li>\n<li>接口只是方法集合</li>\n<li>方法仅按照名称匹配</li>\n<li>没有构造或析构函数</li>\n<li>赋值不是表达式</li>\n<li>没有指针算数</li>\n<li>内存总是初始化为零值</li>\n<li>没有类型注解语法</li>\n<li>没有模板或泛型</li>\n<li>没有异常</li>\n<li>内置字符串、切片、map 类型</li>\n<li>内置数据边界检查</li>\n<li>内置并发支持</li>\n<li>……</li>\n</ul>",readingTime:{minutes:31.88,words:9564},title:"Go 语言精进之路学习笔记",type:"article"}}],["/Backend/gopool.html",{loader:()=>s.e(249).then(s.bind(s,7648)),meta:{date:1741423912e3,category:["Backend"],tag:["源码分析"],excerpt:'\n<p>Gopool 是字节跳动开源项目 <a href="https://github.com/bytedance/gopkg" target="_blank" rel="noopener noreferrer">gopkg</a> 中的一个小工具，作用是以池化的思想来实现 goroutine 的复用，限制应用中 goutine 数量的无限增长。</p>\n<h2>使用介绍</h2>\n<p>Gopool 使用起来非常简单，只需要将项目中的 go 关键字替换为 gopool.Go：</p>\n<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">go</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">\t// do your job</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}()</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:4.84,words:1453},title:"Gopool 实现分析",type:"article"}}],["/iOS/",{loader:()=>s.e(8216).then(s.bind(s,9713)),meta:{title:"iOS 知识总结"}}],["/iOS/aspects_source_probe.html",{loader:()=>s.e(220).then(s.bind(s,1329)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<p><a href="https://github.com/steipete/Aspects" target="_blank" rel="noopener noreferrer">Aspects</a>是一个非常知名的用于 AOP 的 Objective-C 库，可以对类方法或者实例方法进行 Hook，虽然它的作者不推荐在生产环境下使用这个组件，但是了解 Aspects 的原理，对于我们更好地掌握 Objective-C 这门语言还是很有好处的，因此本文就来简要地分析下 Aspects 的实现细节。</p>\n<h2>NSObject 分类</h2>\n<p>这个库里的代码不多，只有 <code>Aspects.h</code> 和 <code>Aspects.m</code> 两个文件。头文件里定义了一个 NSObject 的分类，给所有 NSObject 的子类添加了两个方法，分别用于对类方法和对类实例方法进行 Hook:</p>',readingTime:{minutes:11.64,words:3492},title:"Aspects 源码分析",type:"article"}}],["/iOS/dyld_shared_cache.html",{loader:()=>s.e(4812).then(s.bind(s,3041)),meta:{date:1741423912e3,category:["iOS"],tag:["稳定性"],excerpt:'\n<h2>背景</h2>\n<p>在 iOS 应用的 crash 治理过程中，有相当一大部分问题最终的堆栈是在系统库之中的，因此为了解决这些问题，就需要通过逆向手段来分析系统库的内在逻辑，找到 crash 发生的原因。本文介绍如何利用 <code>dyld_shared_cache</code> 和 <a href="https://www.hopperapp.com/" target="_blank" rel="noopener noreferrer">Hopper</a> 进行分析。</p>\n<h2>获取系统库二进制文件</h2>\n<h3>从真机上获取系统库</h3>\n<p>进行逆向分析的第一步，是获取系统库的二进制文件。如果你有一台 iPhone 设备，并且你要分析的 crash 就发生在这个设备或者这个设备对应的系统版本上，那么获取系统库二进制文件就非常简单，只需将设备连接到 Mac 上，然后在 Xcode 中将它选中作为 Build Target，Xcode 就会从 iPhone 中拷贝出所需的文件。</p>',readingTime:{minutes:6.55,words:1964},title:"如何分析 iOS 系统库的实现",type:"article"}}],["/iOS/easytuple_source_probe.html",{loader:()=>s.e(7099).then(s.bind(s,9525)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<p><a href="https://github.com/meituan/EasyTuple" target="_blank" rel="noopener noreferrer"><code>EasyTuple</code></a>是由美团开源的一个第三方库，它给Objective-C 添加了元组的能力，可以将几个对象包裹在一个对象中，这样我们就可以从一个函数中返回多个值。它的使用非常简单，比如我们想创建一个由两个元素组成的元组，那么可以这样写：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>EZTuple2&lt;NSNumber *, NSString *&gt; *tuple = EZTuple(@1, @"string");</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',readingTime:{minutes:12.98,words:3894},title:"EasyTuple 源代码分析",type:"article"}}],["/iOS/ios_exception_handling.html",{loader:()=>s.e(5143).then(s.bind(s,290)),meta:{date:1741423912e3,category:["iOS"],tag:["技术原理"],excerpt:"\n<h2>1. iOS 异常基础</h2>\n<p>在 iOS 中，异常（Exception）是指程序运行过程中出现的非正常情况，这种情况下应用无法再正常继续执行下去了，也就是我们常说的应用崩了。</p>\n<p>异常有好几种，按照从底层到上层的顺序来说的话，依次是：</p>\n<p>Mach 异常是由操作系统内核引发的，常见的比如访问了无效内存地址、除零错误等，它是一种底层的异常机制。</p>\n<p>BSD Signal 异常是 Mach 异常在 BSD 层的一种表现形式，通常是由 Mach 异常转换而来的，常见的比如SIGSEGV（段错误）、SIGBUS（总线错误）、SIGABRT（异常终止）等。</p>",readingTime:{minutes:10.36,words:3108},title:"iOS 异常捕获原理",type:"article"}}],["/iOS/kscrash_monitor.html",{loader:()=>s.e(8556).then(s.bind(s,4010)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<p>在了解了 iOS 异常的分类和捕获原理后，我们继续深入探讨 <a href="https://github.com/kstenerud/KSCrash" target="_blank" rel="noopener noreferrer">KSCrash</a> 这个优秀的异常监控框架的实现原理。KSCrash 作为一个功能丰富的异常监控方案，其实现涉及多个复杂的技术模块。本文将重点为你解析 KSCrash 的整体架构，并深入剖析其核心监控系统的实现细节。至于其他功能模块的实现，我们会在后续文章中逐一展开。</p>\n<h2>框架设计</h2>\n<p>KSCrash 的整体架构清晰而模块化，主要包含五个核心部分：</p>',readingTime:{minutes:16.25,words:4876},title:"KSCrash 实现原理 - 监控系统实现",type:"article"}}],["/iOS/masonry_source_probe.html",{loader:()=>s.e(3710).then(s.bind(s,3062)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<p>在 iOS 开发中，布局是一个永恒的话题。<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener noreferrer">Masonry</a> 作为一个广受欢迎的自动布局框架，以其简洁的链式语法优雅地解决了这个问题。今天，让我们揭开它的神秘面纱，一起探索其内部实现原理。</p>\n<h2>从使用体验说起</h2>\n<p>在深入源码之前，我们先看看 Masonry 是如何简化我们的日常开发工作的。下面是一个典型的使用示例：</p>\n<div class="language-objc line-numbers-mode" data-highlighter="shiki" data-ext="objc" data-title="objc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[view </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mas_makeConstraints:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">^(MASConstraintMaker *make) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">equalTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">superview</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mas_top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">padding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">equalTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">superview</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mas_left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">padding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">bottom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">equalTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">superview</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mas_bottom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">padding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bottom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">equalTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">superview</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">mas_right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">offset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">padding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}];</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:3.65,words:1094},title:"Masonry 源码解析：优雅的自动布局方案",type:"article"}}],["/iOS/sdwebimage_cache.html",{loader:()=>s.e(4707).then(s.bind(s,3925)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<p>今天我们将对另外一个在iOS 开发中广泛使用的库的源代码进行分析，这个库就是鼎鼎大名的<code>SDWebImage</code>。</p>\n<h2>使用方法</h2>\n<p><code>SDWebImage</code> 的使用非常简洁，往往可以用一行代码来完成图片设置工作。下面列出一些常用设置方法。</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- (void) sd_setImageWithURL:(nullable NSURL *) url;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void) sd_setImageWithURL:(nullable NSURL *) url placeholderImage:(nullable UIImage *) placeholder;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void) sd_setImageWithURL:(nullable NSURL *) url placeholderImage:(nullable UIImage *) placeholder options:(SDWebImageOptions) options;</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>- (void）sd_setImageWithURL:(nullable NSURL *) url completed:(nullable SDExternalCompletionBlock) completedBlock;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- (void) sd_setImageWithURL:(nullable NSURL *) url placeholderImage:(nullable UIImage *) placeholder options:(SDWebImageOptions) options completed:(nullable SDExternalCompletionBlock) completedBlock;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:10.51,words:3153},title:"SDWebImage 源代码剖析-缓存策略",type:"article"}}],["/iOS/stinger_source_probe.html",{loader:()=>s.e(9369).then(s.bind(s,3039)),meta:{date:1741423912e3,category:["iOS"],tag:["源码分析"],excerpt:'\n<h2>前言</h2>\n<p><a href="/blog/iOS/aspects_source_probe.html" target="_blank">前文</a>分析过 <code>Aspects</code> 实现 AOP 的原理，而由饿了么开源的组件 <a href="https://github.com/eleme/Stinger" target="_blank" rel="noopener noreferrer">Stinger</a>同样是一个用于 AOP 的组件，并且饿了么宣称 <code>Stinger</code> 在性能上能够吊打 <code>Aspects</code>，并且给出了测试的数据。那么 <code>Stinger</code> 究竟是如何实现性能的飞跃的呢？让我们一起来探究一下。</p>',readingTime:{minutes:9.52,words:2856},title:"Stinger 源码分析",type:"article"}}],["/404.html",{loader:()=>s.e(7490).then(s.bind(s,3256)),meta:{title:""}}],["/category/",{loader:()=>s.e(3583).then(s.bind(s,8116)),meta:{title:"Category",index:!1}}],["/category/backend/",{loader:()=>s.e(7632).then(s.bind(s,9722)),meta:{title:"Backend Category",index:!1}}],["/category/ios/",{loader:()=>s.e(9413).then(s.bind(s,8192)),meta:{title:"iOS Category",index:!1}}],["/tag/",{loader:()=>s.e(1797).then(s.bind(s,7240)),meta:{title:"Tag",index:!1}}],["/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",{loader:()=>s.e(4803).then(s.bind(s,6752)),meta:{title:"Tag: 基础知识",index:!1}}],["/tag/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",{loader:()=>s.e(8887).then(s.bind(s,485)),meta:{title:"Tag: 源码分析",index:!1}}],["/tag/%E7%A8%B3%E5%AE%9A%E6%80%A7/",{loader:()=>s.e(224).then(s.bind(s,4524)),meta:{title:"Tag: 稳定性",index:!1}}],["/tag/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/",{loader:()=>s.e(1002).then(s.bind(s,9277)),meta:{title:"Tag: 技术原理",index:!1}}],["/article/",{loader:()=>s.e(7511).then(s.bind(s,2784)),meta:{title:"Articles",index:!1}}],["/star/",{loader:()=>s.e(7199).then(s.bind(s,8414)),meta:{title:"Star",index:!1}}],["/timeline/",{loader:()=>s.e(5464).then(s.bind(s,2912)),meta:{title:"Timeline",index:!1}}]])},3596:(e,i,s)=>{"use strict";s.d(i,{M:()=>a});const a=JSON.parse('["/Backend/golang_newbee_getting_better.html","/Backend/gopool.html","/iOS/aspects_source_probe.html","/iOS/dyld_shared_cache.html","/iOS/easytuple_source_probe.html","/iOS/ios_exception_handling.html","/iOS/kscrash_monitor.html","/iOS/masonry_source_probe.html","/iOS/sdwebimage_cache.html","/iOS/stinger_source_probe.html"]')},4249:(e,i,s)=>{"use strict";s.d(i,{U:()=>a});const a=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,1,2,3,4,5,6,7,8,9]}},"star":{"/":{"path":"/star/","indexes":[5,6]}},"timeline":{"/":{"path":"/timeline/","indexes":[0,1,2,3,4,5,6,7,8,9]}}}')},5559:()=>{},7543:(e,i,s)=>{},7961:(e,i,s)=>{"use strict";s.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{},"repo":"tamarous/blog","repoLabel":"GitHub","repoDisplay":false,"docsDir":"docs","docsBranch":"master","blog":{"name":"Tamarous","medias":{"Github":"https://github.com/tamarous","Twitter":"https://twitter.com/tamarous","Weibo":"https://weibo.com/u/2200104011"}},"locales":{"/":{"lang":"en-US","navbarLocales":{"langName":"English","selectLangAriaLabel":"Select language"},"metaLocales":{"author":"Author","date":"Writing Date","origin":"Original","views":"Page views","category":"Category","tag":"Tag","readingTime":"Reading Time","words":"Words","toc":"On This Page","prev":"Prev","next":"Next","lastUpdated":"Last update","contributors":"Contributors","editLink":"Edit this page","print":"Print"},"blogLocales":{"article":"Articles","articleList":"Article List","category":"Category","tag":"Tag","timeline":"Timeline","timelineTitle":"Yesterday Once More!","all":"All","intro":"Personal Intro","star":"Star","empty":"No $text"},"paginationLocales":{"prev":"Prev","next":"Next","navigate":"Jump to","action":"Go","errorText":"Please enter a number between 1 and $page !"},"outlookLocales":{"themeColor":"Theme Color","darkmode":"Theme Mode","fullscreen":"Full Screen"},"routeLocales":{"skipToContent":"Skip to main content","notFoundTitle":"Page not found","notFoundMsg":["There’s nothing here.","How did we get here?","That’s a Four-Oh-Four.","Looks like we\'ve got some broken links."],"back":"Go back","home":"Take me home"},"navbar":[{"text":"Home","link":"/"},{"text":"iOS","link":"/iOS/"},{"text":"Backend","link":"/Backend/"}]}}}')},9051:(e,i,s)=>{"use strict";s.d(i,{B:()=>M});var a={};s.r(a);var t={};s.r(t);var n={};s.r(n),s.d(n,{default:()=>c});var l={};s.r(l),s.d(l,{default:()=>v});var r={};s.r(r),s.d(r,{default:()=>_});var h={};s.r(h),s.d(h,{default:()=>L});var p=s(2054),o=s(3349),d=s(8543);const c={enhance:({app:e})=>{e.component("Mermaid",d.A)}};var k=s(693),g=s(5559),m=s(5496),B=s(355),b=s(457),u=s(9305),A=s(7786),y=s(641),E=s(307);const v={enhance:({app:e})=>{(0,u.L4)("VPIcon")||e.component("VPIcon",(e=>(0,y.h)(E.G,{type:"iconify",prefix:"",...e})))},setup:()=>{(0,A.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var F=s(4344),S=s(596);const _={enhance:({app:e})=>{(0,u.L4)("Badge")||e.component("Badge",S.A)},setup:()=>{},rootComponents:[]};var x=s(6358),O=s(3827),f=s(1599),w=s(1770),C=s(7466),T=s(8465),I=s(5512);(0,T.M_)((e=>{const i=e.title,s=!1!==e.index,a=e.icon;return s?{title:i,content:a?()=>[(0,y.h)((0,y.g2)("VPIcon"),{icon:a}),i]:null,order:e.order,index:e.index}:null}));const L={enhance:({app:e,router:i})=>{const{scrollBehavior:s}=i.options;i.options.scrollBehavior=async(...e)=>(await C.lE.wait(),s(...e)),(0,C.X4)(e),e.component("BloggerInfo",I.tI),e.component("SocialMedias",I.rS)},setup:()=>{(0,C.fv)(),(0,C.i$)(),(0,I.su)()},layouts:{Layout:C.PE,NotFound:C.Mk,BlogCategory:I.Pn,BlogHome:I.qX,BlogType:I.z7,Timeline:I.Kf}},M=[a,t,p,o,n,k,g,m,B,b,l,F,r,x,O,f,w,h].map((e=>e.default)).filter(Boolean)}},e=>{e.O(0,[6236,9826],(()=>e(e.s=8731))),e.O()}]);