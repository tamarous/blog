"use strict";(self.webpackChunktamarous_blog=self.webpackChunktamarous_blog||[]).push([[812],{2569:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>r,data:()=>d});var s=n(5399);const i={},r=(0,n(2756).A)(i,[["render",function(e,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h1 id="如何分析-ios-系统库的实现" tabindex="-1"><a class="header-anchor" href="#如何分析-ios-系统库的实现"><span>如何分析 iOS 系统库的实现</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>在 iOS 应用的 crash 治理过程中，有相当一大部分问题最终的堆栈是在系统库之中的，因此为了解决这些问题，就需要通过逆向手段来分析系统库的内在逻辑，找到 crash 发生的原因。本文介绍如何利用 <code>dyld_shared_cache</code> 和 <a href="https://www.hopperapp.com/" target="_blank" rel="noopener noreferrer">Hopper</a> 进行分析。</p><h2 id="获取系统库二进制文件" tabindex="-1"><a class="header-anchor" href="#获取系统库二进制文件"><span>获取系统库二进制文件</span></a></h2><h3 id="从真机上获取系统库" tabindex="-1"><a class="header-anchor" href="#从真机上获取系统库"><span>从真机上获取系统库</span></a></h3><p>进行逆向分析的第一步，是获取系统库的二进制文件。如果你有一台 iPhone 设备，并且你要分析的 crash 就发生在这个设备或者这个设备对应的系统版本上，那么获取系统库二进制文件就非常简单，只需将设备连接到 Mac 上，然后在 Xcode 中将它选中作为 Build Target，Xcode 就会从 iPhone 中拷贝出所需的文件。</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/15/16395763851488.jpg" alt="16395763851488"></p><p>这些文件会被拷贝到在 <code>~/Library/Developer/Xcode/iOS DeviceSupport/</code> 目录下，按照设备系统版本分门别类存储，如图所示：</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/15/16395771725307.jpg" alt="16395771725307"></p><h3 id="获取-dyld-shared-cache" tabindex="-1"><a class="header-anchor" href="#获取-dyld-shared-cache"><span>获取 dyld_shared_cache</span></a></h3><p>但是如果你手边没有问题发生系统的设备，比如线上突发了一个老系统的 crash ，那么这时我们就需要通过 <code>dyld_shared_cache</code> 来进行提取了。</p><p>在 iOS 3.1 后，为了加快应用的启动速度，dyld 将所有系统框架的二进制都打包到了一个大的缓存文件中，在系统启动之后就会进行加载，这个文件就称为 <code>dyld_shared_cache</code>。</p><h4 id="从-ipsw-中获取" tabindex="-1"><a class="header-anchor" href="#从-ipsw-中获取"><span>从 ipsw 中获取</span></a></h4><p><code>dyld_shared_cache</code> 能够从 ipsw 文件中获得。在 <a href="https://ipsw.me/" target="_blank" rel="noopener noreferrer">ipsw.me</a> 上可以下载各种 iOS 设备及各种 iOS 系统 的 ipsw 文件。下载之后，将该文件的后缀名改为 .zip，然后进行解压。在解压后的文件夹里，双击其中文件体积最大的 dmg 文件，然后进入 <code>/System/Library/Caches/com.apple.dyld/</code>，就可以将 <code>dyld_shared_cache</code> 复制导出了。</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/04/16386267613890.jpg" alt="16386267613890"></p><h3 id="还原-dyld-shared-cache" tabindex="-1"><a class="header-anchor" href="#还原-dyld-shared-cache"><span>还原 dyld_shared_cache</span></a></h3><p>在导出后，还需要一些工具来将系统库从二进制文件中还原出来。苹果官方就提供了一个可用的工具：<a href="https://opensource.apple.com/source/dyld/dyld-433.5/launch-cache/" target="_blank" rel="noopener noreferrer">dsc_extractor</a>，不过这个工具是位于 dyld 源码中的，需要一些额外设置才能编译出来。</p><p>首先我们先从苹果开源网站上下载 dyld 的<a href="https://opensource.apple.com/tarballs/dyld/" target="_blank" rel="noopener noreferrer">代码</a>，我这里选择的是较旧的 <code>dyld-519.2.2</code>，之所以不选最新的版本，是由于较新的版本在编译时，会有<code>CodeSigningTypes.h</code> 和 <code>Diagnostics.h</code> 两个头文件找不到的错误。下载解压后，进入 <code>launch-cache</code> 目录，修改 <code>dsc_extractor.cpp</code> main 函数之前的 <code>if 0</code> 为 <code>if 1</code>，然后再用 clang 进行编译：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>clang++ -o dsc_extractor ./dsc_extractor.cpp dsc_iterator.cpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译出可执行文件后，我们就可以使用此可执行文件来从 <code>dyld_shared_cache</code> 中导出系统库：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./dsc_extractor dyld_shared_cache_arm64e ./frameworks</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/04/16386332421419.jpg" alt="16386332421419"></p><p>如果上述过程显得过于繁琐，<a href="https://github.com/dreampiggy/dsc_extractor/blob/master/bin/dsc_extractor" target="_blank" rel="noopener noreferrer">GitHub</a> 上也有人提供了编译好的 dsc_extractor 可供直接下载使用。</p><p>除了上述苹果官方提供的工具外，<a href="https://github.com/arandomdev/DyldExtractor" target="_blank" rel="noopener noreferrer">DyldExtractor</a> 也是一个不错的工具：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python3 -m pip install dyldextractor</span></span>\n<span class="line"><span>dyldex_all dyld_shared_cache_arm64e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在获取到系统库的二进制之后，就可以使用如 Hopper 及 IDA 这样的工具来进行逆向分析了。</p><h2 id="使用-hopper-进行分析" tabindex="-1"><a class="header-anchor" href="#使用-hopper-进行分析"><span>使用 Hopper 进行分析</span></a></h2><p>Hopper 是一个知名的反汇编软件，功能非常强大，尤其是对于 Objective-C 的反汇编专门进行了优化，能够从二进制中生成较为易读的伪代码，因此对于分析 iOS 系统库执行过程来说，是一件神兵利器。Hopper 是一个收费软件，不付费的话每次可以免费使用 30 分钟，对于一般的分析问题来说也够用了。推荐大家尽量支持正版。</p><p>下面用一个真实的线上案例来介绍下 Hopper 的使用。系统堆栈如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Thread 0 name:  com.apple.main-thread</span></span>\n<span class="line"><span>Thread 0: Crashed:</span></span>\n<span class="line"><span>0   libobjc.A.dylib                 0x000000018ac37530 _objc_msgSend (in libobjc.A.dylib) + 16</span></span>\n<span class="line"><span>1   UIKitCore                       0x00000001b80b6058 -[UIKeyboardImpl _keyboardBehaviorState] (in UIKitCore) + 436</span></span>\n<span class="line"><span>2   UIKitCore                       0x00000001b80b63c4 -[UIKeyboardImpl updatedKeyBehaviors] (in UIKitCore) + 32</span></span>\n<span class="line"><span>3   UIKitCore                       0x00000001b80b64f8 -[UIKeyboardImpl _updateKeyboardConfigurations] (in UIKitCore) + 172</span></span>\n<span class="line"><span>4   UIKitCore                       0x00000001b809240c -[UIKeyboardImpl dealloc] (in UIKitCore) + 356</span></span>\n<span class="line"><span>5   UIKitCore                       0x00000001b80c2ae8 -[UIKeyboardInputManagerMux setResponseDelegate:] (in UIKitCore) + 64</span></span>\n<span class="line"><span>6   UIKitCore                       0x00000001b80a881c -[UIKeyboardImpl setInputManagerFromCurrentInputMode] (in UIKitCore) + 96</span></span>\n<span class="line"><span>7   UIKitCore                       0x00000001b8097d4c -[UIKeyboardImpl setInputModeFromPreferences] (in UIKitCore) + 360</span></span>\n<span class="line"><span>8   UIKitCore                       0x00000001b8091d3c -[UIKeyboardImpl initWithFrame:] (in UIKitCore) + 840</span></span>\n<span class="line"><span>9   UIKitCore                       0x00000001b808f950 +[UIKeyboardImpl sharedInstance] (in UIKitCore) + 72</span></span>\n<span class="line"><span>10  UIKitCore                       0x00000001b8083c50 -[UIKeyboard activate] (in UIKitCore) + 248</span></span>\n<span class="line"><span>11  UIKitCore                       0x00000001b80fa98c -[UIKeyboardAutomatic activate] (in UIKitCore) + 124</span></span>\n<span class="line"><span>12  UIKitCore                       0x00000001b80fa514 -[UIKeyboardAutomatic willResume:] (in UIKitCore) + 260</span></span>\n<span class="line"><span>13  CoreFoundation                  0x000000018b9b8218 ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ (in CoreFoundation) + 16</span></span>\n<span class="line"><span>14  CoreFoundation                  0x000000018b9b81e4 ____CFXRegistrationPost_block_invoke (in CoreFoundation) + 60</span></span>\n<span class="line"><span>15  CoreFoundation                  0x000000018b9b76d8 __CFXRegistrationPost (in CoreFoundation) + 388</span></span>\n<span class="line"><span>16  CoreFoundation                  0x000000018b9b7384 ____CFXNotificationPost_block_invoke (in CoreFoundation) + 92</span></span>\n<span class="line"><span>17  CoreFoundation                  0x000000018b930c50 -[_CFXNotificationRegistrar find:object:observer:enumerator:] (in CoreFoundation) + 1492</span></span>\n<span class="line"><span>18  CoreFoundation                  0x000000018b9b6e34 __CFXNotificationPost (in CoreFoundation) + 692</span></span>\n<span class="line"><span>19  Foundation                      0x000000018c3a01a0 -[NSNotificationCenter postNotificationName:object:userInfo:] (in Foundation) + 64</span></span>\n<span class="line"><span>20  UIKitCore                       0x00000001b827cf7c -[UIApplication _sendWillEnterForegroundCallbacks] (in UIKitCore) + 228</span></span>\n<span class="line"><span>21  UIKitCore                       0x00000001b7b27be0 -[__UICanvasLifecycleMonitor_Compatability activateEventsOnly:withContext:completion:] (in UIKitCore) + 2032</span></span>\n<span class="line"><span>22  UIKitCore                       0x00000001b7b25b60 ___82-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:]_block_invoke (in UIKitCore) + 740</span></span>\n<span class="line"><span>23  UIKitCore                       0x00000001b7b25828 -[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:] (in UIKitCore) + 424</span></span>\n<span class="line"><span>24  UIKitCore                       0x00000001b7b2a368 ___125-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke (in UIKitCore) + 216</span></span>\n<span class="line"><span>25  UIKitCore                       0x00000001b7b2b14c __performActionsWithDelayForTransitionContext (in UIKitCore) + 108</span></span>\n<span class="line"><span>26  UIKitCore                       0x00000001b7b2a220 -[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] (in UIKitCore) + 240</span></span>\n<span class="line"><span>27  UIKitCore                       0x00000001b7b2ef20 -[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] (in UIKitCore) + 356</span></span>\n<span class="line"><span>28  UIKitCore                       0x00000001b7e5f2ac -[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] (in UIKitCore) + 460</span></span>\n<span class="line"><span>29  FrontBoardServices              0x000000018e3c55d4 ___80-[FBSSceneImpl updater:didUpdateSettings:withDiff:transitionContext:completion:]_block_invoke_3 (in FrontBoardServices) + 220</span></span>\n<span class="line"><span>30  libdispatch.dylib               0x000000018b4857d0 __dispatch_client_callout (in libdispatch.dylib) + 12</span></span>\n<span class="line"><span>31  libdispatch.dylib               0x000000018b42a5d8 __dispatch_block_invoke_direct$VARIANT$mp (in libdispatch.dylib) + 220</span></span>\n<span class="line"><span>32  FrontBoardServices              0x000000018e3ff03c ___FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ (in FrontBoardServices) + 36</span></span>\n<span class="line"><span>33  FrontBoardServices              0x000000018e3fecd8 -[FBSSerialQueue _performNext] (in FrontBoardServices) + 404</span></span>\n<span class="line"><span>34  FrontBoardServices              0x000000018e3ff290 -[FBSSerialQueue _performNextFromRunLoopSource] (in FrontBoardServices) + 48</span></span>\n<span class="line"><span>35  CoreFoundation                  0x000000018b9d8f18 ___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ (in CoreFoundation) + 20</span></span>\n<span class="line"><span>36  CoreFoundation                  0x000000018b9d8e98 ___CFRunLoopDoSource0 (in CoreFoundation) + 84</span></span>\n<span class="line"><span>37  CoreFoundation                  0x000000018b9d8780 ___CFRunLoopDoSources0 (in CoreFoundation) + 172</span></span>\n<span class="line"><span>38  CoreFoundation                  0x000000018b9d36bc ___CFRunLoopRun (in CoreFoundation) + 1000</span></span>\n<span class="line"><span>39  CoreFoundation                  0x000000018b9d2fb0 _CFRunLoopRunSpecific (in CoreFoundation) + 432</span></span>\n<span class="line"><span>40  GraphicsServices                0x000000018dbd5798 _GSEventRunModal (in GraphicsServices) + 100</span></span>\n<span class="line"><span>41  UIKitCore                       0x00000001b8265c34 _UIApplicationMain (in UIKitCore) + 208</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从堆栈上来看，crash 发生在给 <code>UIKeyboardImpl</code> 的实例发送 <code>_keyboardBehaviorState</code> 消息时，用户设备是 iPhone 6，对应系统版本为 12.5.5。</p><p>按照前文方法，通过 ipsw 提取出 12.5.5 系统的 <code>UIKitCore.dylib</code>，然后将其拖入 Hopper。在拖入时，会询问需要以什么文件格式打开，一般来说以默认设置打开就好。然后在左侧面板搜索栏中，输入<code>-[UIKeyboardImpl _keyboardBehaviorState]</code>，会跳转到这个方法对应的汇编代码：</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/15/16395806199187.jpg" alt="16395806199187"> 可以看到，这个方法的汇编实现是非常复杂的，在自动生成的注释中，有很多个 <code>objc_msgSend</code>，说明这个方法内部也有很多其他的方法调用。那么内部是对给哪个对象发送消息时 crash 的呢？</p><p>此处，我们就需要结合用户的 crash 日志来进行分析。从我们的 APM 系统上可以下载到这个用户的原始日志，以及符号解析后的日志，这两份日志都可以用来进行更为细致的分析。</p><p>原始日志如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Thread 0 name:  com.apple.main-thread</span></span>\n<span class="line"><span>Thread 0 Crashed:</span></span>\n<span class="line"><span>0   libobjc.A.dylib                 0x000000018ac37530 0x18ac1a000 + 120112 ((null)) + 0)</span></span>\n<span class="line"><span>1   UIKitCore                       0x00000001b80b605c 0x1b79a9000 + 7393372 ((null)) + 0)</span></span>\n<span class="line"><span>2   UIKitCore                       0x00000001b80b63c8 0x1b79a9000 + 7394248 ((null)) + 0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从原始日志中，我们可以直接得到调用 objc_msgSend 的位置在<code> -[UIKeyboardImpl _keyboardBehaviorState]</code> 中的偏移量为 <code>7393372</code>。</p><p>或者从符号解析后的日志中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Thread 0 name:  com.apple.main-thread</span></span>\n<span class="line"><span>Thread 0: Crashed:</span></span>\n<span class="line"><span>0   libobjc.A.dylib                 0x000000018ac37530 _objc_msgSend (in libobjc.A.dylib) + 16</span></span>\n<span class="line"><span>1   UIKitCore                       0x00000001b80b6058 -[UIKeyboardImpl _keyboardBehaviorState] (in UIKitCore) + 436</span></span>\n<span class="line"><span>2   UIKitCore                       0x00000001b80b63c4 -[UIKeyboardImpl updatedKeyBehaviors] (in UIKitCore) + 32</span></span>\n<span class="line"><span>3   UIKitCore                       0x00000001b80b64f8 -[UIKeyboardImpl _updateKeyboardConfigurations] (in UIKitCore) + 172</span></span>\n<span class="line"><span>4   UIKitCore                       0x00000001b809240c -[UIKeyboardImpl dealloc] (in UIKitCore) + 356</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Binary Images:</span></span>\n<span class="line"><span>       0x1b79a9000 -        0x1b8a8dfff  UIKitCore arm64 &lt;005cfa346e6a3f36ba96e3db92f09362&gt; /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以计算出偏移地址为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0x00000001b80b6058 - 0x1b79a9000 = 0x70D058 = 7393368</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到了偏移量之后，在 Hopper 中点击 <code>Navigate -&gt; Go To File Offset</code>，在弹出的输入框中输入上述偏移量，就可以跳转到 crash 发生时的具体行数，如图中蓝色行所示：</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/16/16395840700261.jpg" alt="16395840700261"></p><p>点击 Hopper 右上角按钮，</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/16/16395841682241.jpg" alt="16395841682241"></p><p>即可将这段汇编代码转换为伪代码：</p><p><img src="https://tamarous-blog-1256169911.cos.ap-chengdu.myqcloud.com/2021/12/16/16395843037293.jpg" alt="16395843037293"></p><p>从图中我们可以看到，是在向 <code>UIKeyboardImpl</code> 的 <code>m_candidateResultSet</code> 实例变量发送 <code>hasCandidates</code> 消息时崩溃了。因此我们需要继续去分析这个实例变量的赋值及使用场景，看看是不是存在野指针的可能性，其分析过程也是类似的。</p><p>以上即为使用 Hopper 来分析系统库内部实现的思路。</p>',49)]))}]]),d=JSON.parse('{"path":"/iOS/dyld_shared_cache.html","title":"如何分析 iOS 系统库的实现","lang":"en-US","frontmatter":{"category":"iOS","tags":["稳定性"]},"git":{"createdTime":1740900069000,"updatedTime":1740900069000,"contributors":[{"name":"Tamarous","username":"Tamarous","email":"hiwangzewei@qq.com","commits":1,"url":"https://github.com/Tamarous"}]},"readingTime":{"minutes":6.55,"words":1964},"filePathRelative":"iOS/dyld_shared_cache.md","localizedDate":"March 2, 2025","excerpt":"\\n<h2>背景</h2>\\n<p>在 iOS 应用的 crash 治理过程中，有相当一大部分问题最终的堆栈是在系统库之中的，因此为了解决这些问题，就需要通过逆向手段来分析系统库的内在逻辑，找到 crash 发生的原因。本文介绍如何利用 <code>dyld_shared_cache</code> 和 <a href=\\"https://www.hopperapp.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Hopper</a> 进行分析。</p>\\n<h2>获取系统库二进制文件</h2>\\n<h3>从真机上获取系统库</h3>\\n<p>进行逆向分析的第一步，是获取系统库的二进制文件。如果你有一台 iPhone 设备，并且你要分析的 crash 就发生在这个设备或者这个设备对应的系统版本上，那么获取系统库二进制文件就非常简单，只需将设备连接到 Mac 上，然后在 Xcode 中将它选中作为 Build Target，Xcode 就会从 iPhone 中拷贝出所需的文件。</p>"}')},2756:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}}}]);