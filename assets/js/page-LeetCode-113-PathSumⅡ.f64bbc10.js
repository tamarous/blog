(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{497:function(s,t,n){"use strict";n.r(t);var e=n(1),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-113-path-sum-ii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-113-path-sum-ii"}},[s._v("#")]),s._v(" LeetCode-113-Path Sum Ⅱ")]),s._v(" "),n("p",[s._v("这道题与上一篇博客的那道题非常类似，比那个题更近一步，要求找出节点之和等于给定数值的所有路径。")]),s._v(" "),n("p",[s._v("思路：与上一题类似，定义一个递归用的辅助函数helper，第一个参数是当前节点，第二个参数是与sum有关的值，第三个参数是一个vector的vector，用来存储所有路径，而第四个参数是一个用来存储当前路径的vector。为了能对路径进行修改，后两个参数都是引用类型。")]),s._v(" "),n("p",[s._v("函数定义如下：\n"),n("code",[s._v("void helper(TreeNode *node, int sum, vector<vector<int> > & paths, vector<int> &path);")]),s._v("\n代码实现也与上一题的非常类似，这里就不再仔细说明思路了。")]),s._v(" "),n("p",[s._v("要注意最后两行代码，表示的含义是这条路径已经走到了叶子节点处理完了，因此要回到叶子节点的父节点，并且在回到那个节点之前我们要把减掉的叶子节点的数值再加回来。")]),s._v(" "),n("p",[s._v("代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" class Solution {\n public:\n     vector<vector<int> > pathSum(TreeNode *root, int sum) {\n         vector< vector<int> > results;\n         vector<int> result;\n         helper(root, sum, results,result);\n         return results;\n     }\n\n private:\n     void helper(TreeNode *root, int sum, vector<vector<int> > &paths,vector<int>& path) {\n         if (root == NULL) {\n             return;\n         }\n         sum -= root->val;\n         path.push_back(root->val);\n         if (root->left == NULL && root->right == NULL) {\n             if (sum == 0) {\n                 paths.push_back(path);\n             }\n         } else {\n             if (root->left != NULL) {\n                 helper(root->left, sum, paths,path);\n             }\n             if (root->right != NULL) {\n                 helper(root->right, sum, paths,path);\n             }\n         }\n         sum += root->val;\n         path.pop_back();\n     }\n };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);