(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{500:function(t,s,a){"use strict";a.r(s);var r=a(1),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"不重复打印排序数组中相加和为给定值的所有二元组-三元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不重复打印排序数组中相加和为给定值的所有二元组-三元组"}},[t._v("#")]),t._v(" 不重复打印排序数组中相加和为给定值的所有二元组/三元组")]),t._v(" "),a("h2",{attrs:{id:"不重复打印排序数组中相加和为给定值的所有二元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不重复打印排序数组中相加和为给定值的所有二元组"}},[t._v("#")]),t._v(" 不重复打印排序数组中相加和为给定值的所有二元组")]),t._v(" "),a("h3",{attrs:{id:"题意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题意"}},[t._v("#")]),t._v(" 题意")]),t._v(" "),a("p",[t._v("给定一个排好序的数组arr 和整数k，不重复打印出 arr 中所有相加和为 k 的不降序二元组。例如，arr = [-8,-4,3,0,1,2,4,5,8,9], k = 10, 打印结果为：[1,9]和[2,8]")]),t._v(" "),a("h3",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("p",[t._v("由于整个数组是排好序的，因此我们可以从数组的两端出发，向中间收紧。用一个左指针left和一个右指针right，左指针指向数组的第一个元素，右指针指向数组的最后一个元素，然后比较 left+right 与 k 的大小：")]),t._v(" "),a("ul",[a("li",[t._v("如果 left + right == k，那么打印 left 和 right, 然后 left++, right--;")]),t._v(" "),a("li",[t._v("如果 left + right > k, 那么right--;")]),t._v(" "),a("li",[t._v("如果 left + right < k, 那么left++;")])]),t._v(" "),a("p",[t._v("因为还有不重复的要求，因此我们还要加一个判断：如果 left 和 left-1 的值相同，那么就跳过, left++。")]),t._v(" "),a("h3",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class Solution {\npublic:\n\tvoid printUniquePair(vector<int> &arr, int k) {\n     \tif (arr.size() < 2) {\n        \treturn;\n     \t}\n     \tint left = 0;\n     \tint right = arr.size()-1;\n     \twhile(left < right) {\n        \tint result = arr[left] + arr[right];\n        \tif (result > k) {\n             \tright--;\n        \t} else if (result < k) {\n             \tleft++;\n        \t} else {\n        \t\tif (left == 0 || arr[left-1] != arr[left]) {\n                 \tprintf("[%d,%d]\\n",arr[left],arr[right]);\n        \t\t}\n             \t left++;\n             \t right--;\n        \t}\n     \t}\n\t}\t\n}; \n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("h2",{attrs:{id:"不重复打印排序数组中相加和为给定值的所有三元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不重复打印排序数组中相加和为给定值的所有三元组"}},[t._v("#")]),t._v(" 不重复打印排序数组中相加和为给定值的所有三元组")]),t._v(" "),a("h3",{attrs:{id:"题意-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题意-2"}},[t._v("#")]),t._v(" 题意")]),t._v(" "),a("p",[t._v("给定一个排好序的数组arr 和整数k，不重复打印出 arr 中所有相加和为 k 的不降序三元组。例如，arr = [-8,-4,3,0,1,2,4,5,8,9], k = 10, 打印结果为：[-4,5,9],[-3,4,9],[-3,5,8],[0,1,9],[0,2,8],[1,4,5]")]),t._v(" "),a("h3",{attrs:{id:"思路-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路-2"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("p",[t._v("和求二元组类似，用三个指针，记为 left, mid, right, 然后对于每一个left，寻找和为 k - left的二元组。")]),t._v(" "),a("h3",{attrs:{id:"代码-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-2"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class Solution {\npublic:\n\tvoid printUniqueTriple(vector<int> &arr, int k) {\n     \tif (arr.size() < 3) {\n        \treturn;\n     \t}\n     \tfor(int i = 0; i < arr.size() - 2; i++) {\n         \tif (i == 0 || arr[i] != arr[i-1]) {\n             \tprintRest(arr, i, i+1, arr.size()-1, k - arr[i]);\n         \t}\n     \t}\n\t}\t\n\tvoid printRest(vector<int> &arr, int left, int mid, int right, int k) {\n     \twhile(mid < right) {\n         \tint result = arr[mid] + arr[right];\n         \tif (result < k) {\n             \tmid++;\n         \t} else if (result > k) {\n             \tright--;\n         \t} else {\n             \tif (mid = left + 1 || arr[mid] != arr[mid-1]) {\n                 \tprintf("[%d, %d, %d]\\n",arr[left],arr[mid],arr[right]);\n             \t}\n         \t}\n     \t}\n\t}\n}; \n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);