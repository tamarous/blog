(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{378:function(t,a,e){"use strict";e.r(a);var n=e(42),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"leetcode-48-rotate-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-48-rotate-image"}},[t._v("#")]),t._v(" LeetCode-48-Rotate Image")]),t._v(" "),e("p",[t._v("题意：给定一个 N*N 的矩阵，将这个矩阵顺时针旋转90°。")]),t._v(" "),e("p",[t._v("例如，输入：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n] \n")])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n")])])]),e("h2",{attrs:{id:"思路一-分圈处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思路一-分圈处理"}},[t._v("#")]),t._v(" 思路一 分圈处理")]),t._v(" "),e("p",[t._v("一种思路是类似于“转圈打印矩阵”，分圈对矩阵进行处理。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Solution {\npublic:\n\tvoid rotateMatrix(vector<vector<int> > &matrix) {\n        int tR = 0;\n        int tC = 0;\n        int dR = matrix.size() - 1;\n        int dC = matrix[0].size() - 1;\n        while(tR < dR) {\n          \trotateEdge(matrix, tR++, tC++, dR++, dC++);\n        }\n\t}\n\t\n\tvoid rotateEdge(vector<vector<int> > &matrix, int tR, int tC, int dR, int dC) {\n    \tint times = dC - tC;\n    \tint temp = 0;\n    \tfor(int i = 0; i < times; i++) {\n        \ttemp = m[tR][tC+i];\n        \tm[tR][tC+i] = m[dR - i][tC];\n        \tm[dR - i][tC] = m[dR][dC - i];\n        \tm[dR][dC - i] = m[tR+i][dC];\n        \tm[tR+i][dC] = temp;\n    \t}\n\t}\n};\n")])])]),e("h2",{attrs:{id:"思路二-逆序交换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思路二-逆序交换"}},[t._v("#")]),t._v(" 思路二 逆序交换")]),t._v(" "),e("p",[t._v("首先我们将输入逆序，也就是将")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n] \n")])])]),e("p",[t._v("逆序为")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[\n  [7,8,9],\n  [4,5,6],\n  [1,2,3]\n] \n")])])]),e("p",[t._v("之后再将主对角线上的元素交换一下，就可以得到旋转90°后的矩阵了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n] \n")])])]),e("p",[t._v("代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        std::reverse(matrix.begin(), matrix.end());\n        for(int i = 0 ; i < matrix.size(); i++) {\n            for (int j = i+1; j < matrix.size(); j++) {\n                swap(matrix[i][j], matrix[j][i]);\n            }\n        }\n    }\n};\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);