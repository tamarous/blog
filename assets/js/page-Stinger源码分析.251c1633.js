(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{569:function(s,n,e){"use strict";e.r(n);var a=e(1),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"stinger-源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stinger-源码分析"}},[s._v("#")]),s._v(" Stinger 源码分析")]),s._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[n("RouterLink",{attrs:{to:"/iOS/aspects_source_probe.html"}},[s._v("前文")]),s._v("分析过 "),n("code",[s._v("Aspects")]),s._v(" 实现 AOP 的原理，而由饿了么开源的组件 "),n("a",{attrs:{href:"https://github.com/eleme/Stinger",target:"_blank",rel:"noopener noreferrer"}},[s._v("Stinger"),n("OutboundLink")],1),s._v("同样是一个用于 AOP 的组件，并且饿了么宣称 "),n("code",[s._v("Stinger")]),s._v(" 在性能上能够吊打 "),n("code",[s._v("Aspects")]),s._v("，并且给出了测试的数据。那么 "),n("code",[s._v("Stinger")]),s._v(" 究竟是如何实现性能的飞跃的呢？让我们一起来探究一下。")],1),s._v(" "),n("blockquote",[n("p",[s._v("本文分析时的 "),n("code",[s._v("Stinger")]),s._v(" 版本为 "),n("a",{attrs:{href:"https://github.com/eleme/Stinger/tree/1.0.0",target:"_blank",rel:"noopener noreferrer"}},[s._v("1.0.0"),n("OutboundLink")],1),s._v("。")])]),s._v(" "),n("h2",{attrs:{id:"接口设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口设计"}},[s._v("#")]),s._v(" 接口设计")]),s._v(" "),n("p",[n("code",[s._v("Stinger")]),s._v(" 提供了同 "),n("code",[s._v("Aspects")]),s._v(" 类似的接口，分别用于 Hook 一个类以及 Hook 一个实例对象：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@interface NSObject (Stinger)\n\n#pragma mark - For specific class\n+ (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;\n+ (STHookResult)st_hookClassMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;\n\n#pragma mark - For specific instance\n- (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block;\n\n@end\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"stoption"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stoption"}},[s._v("#")]),s._v(" STOption")]),s._v(" "),n("p",[n("code",[s._v("STOption")]),s._v(" 用于设置 AOP 切面逻辑的执行时机及签名校验：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef NS_OPTIONS(NSInteger, STOption) {\n  STOptionAfter = 0,     // 在原方法调用后执行\n  STOptionInstead = 1,   // 替换原方法\n  STOptionBefore = 2,    // 在原方法调用前执行\n  STOptionAutomaticRemoval = 1 << 3, // Hook 逻辑只执行一次，第二次及以后都等同于调用原方法\n  STOptionWeakCheckSignature = 1 << 16, // 弱校验模式\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("在默认情况下，原方法和 hook block 的方法签名应该是完全相同的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  //argument count\n  if (strictCheck && methodSignature.numberOfArguments != blockSignature.numberOfArguments) {\n    NSCAssert(NO, @"count of arguments isn\'t equal. Class: (%@), SEL: (%@), Identifier: (%@)", cls, NSStringFromSelector(sel), identifier);\n    return NO;\n  };\n  if (strictCheck) {\n    // from loc 2.\n    for (NSInteger i = 2; i < methodSignature.numberOfArguments; i++) {\n      const char *methodType = [methodSignature getArgumentTypeAtIndex:i];\n      const char *blockType = [blockSignature getArgumentTypeAtIndex:i];\n      if (!methodType || !blockType || methodType[0] != blockType[0]) {\n        NSCAssert(NO, @"argument (%zd) type isn\'t equal. Class: (%@), SEL: (%@), Identifier: (%@)", i, cls, NSStringFromSelector(sel), identifier);\n        return NO;\n      }\n    }\n  }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("当 "),n("code",[s._v("STOptionWeakCheckSignature")]),s._v(" 选项开启时，"),n("code",[s._v("Stinger")]),s._v(" 内部只会检查第一个参数和返回值的类型。")]),s._v(" "),n("h3",{attrs:{id:"sthookresult"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sthookresult"}},[s._v("#")]),s._v(" STHookResult")]),s._v(" "),n("p",[n("code",[s._v("STHookResult")]),s._v("表示 Hook 的结果，有以下几种取值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef NS_ENUM(NSInteger, STHookResult) {\n  STHookResultSuccuss = 1, // fix typo\n  STHookResultSuccess = 1,\n  STHookResultErrorMethodNotFound = -1,\n  STHookResultErrorBlockNotMatched = -2,\n  STHookResultErrorIDExisted = -3,\n  STHookResultOther = -4,\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"hook-一个类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hook-一个类"}},[s._v("#")]),s._v(" Hook 一个类")]),s._v(" "),n("blockquote",[n("p",[s._v("当 Hook 的对象是一个类的时候，Hook 逻辑对于这个类的所有实例都生效。")])]),s._v(" "),n("p",[s._v("Hook 一个类时，实质是调用 "),n("code",[s._v("hookMethod")]),s._v(" 这个静态方法，当 Hook 的为实例方法时，传入类对象本身，当 Hook 的为类方法时，传入类的元类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("+ (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {\n  return hookMethod(self, sel, option, identifier, block);\n}\n\n+ (STHookResult)st_hookClassMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {\n  return hookMethod(object_getClass(self), sel, option, identifier, block);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"hook-一个类的实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hook-一个类的实例"}},[s._v("#")]),s._v(" Hook 一个类的实例")]),s._v(" "),n("blockquote",[n("p",[s._v("当 Hook 的对象是一个类的实例的时候，Hook 逻辑仅对这个特定的实例对象生效。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("- (STHookResult)st_hookInstanceMethod:(SEL)sel option:(STOption)option usingIdentifier:(STIdentifier)identifier withBlock:(id)block {\n  @synchronized(self) {\n    Class stSubClass = getSTSubClass(self);\n    if (!stSubClass) return STHookResultOther;\n    \n    STHookResult hookMethodResult = hookMethod(stSubClass, sel, option, identifier, block);\n    if (hookMethodResult != STHookResultSuccess) return hookMethodResult;\n    if (!objc_getAssociatedObject(self, STSubClassKey)) {\n      object_setClass(self, stSubClass);\n      objc_setAssociatedObject(self, STSubClassKey, stSubClass, OBJC_ASSOCIATION_ASSIGN);\n    }\n    \n    id<STHookInfoPool> instanceHookInfoPool = st_getHookInfoPool(self, sel);\n    if (!instanceHookInfoPool) {\n      instanceHookInfoPool = [STHookInfoPool poolWithTypeEncoding:nil originalIMP:NULL selector:sel];\n      st_setHookInfoPool(self, sel, instanceHookInfoPool);\n    }\n    \n    STHookInfo *instanceHookInfo = [STHookInfo infoWithOption:option withIdentifier:identifier withBlock:block];\n    return [instanceHookInfoPool addInfo:instanceHookInfo] ? STHookResultSuccess : STHookResultErrorIDExisted;\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("Hook 类实例的时候，由于目的是只让 Hook 逻辑对于这个特定的实例生效，那么其实只要将这个实例的类对象通过 runtime 修改为一个唯一的类，就可以将逻辑转换为 Hook 类对象的方法，因此其核心同样是 "),n("code",[s._v("hookMethod")]),s._v(" 方法。")]),s._v(" "),n("h2",{attrs:{id:"hookmethod"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hookmethod"}},[s._v("#")]),s._v(" hookMethod")]),s._v(" "),n("p",[s._v("如前文所述，"),n("code",[s._v("hookMethod")]),s._v(" 是 "),n("code",[s._v("Stinger")]),s._v(" 的核心，它的实现如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('NS_INLINE STHookResult hookMethod(Class hookedCls, SEL sel, STOption option, STIdentifier identifier, id block) {\n  NSCParameterAssert(hookedCls);\n  NSCParameterAssert(sel);\n  NSCParameterAssert(identifier);\n  NSCParameterAssert(block);\n  Method m = class_getInstanceMethod(hookedCls, sel);\n  NSCAssert(m, @"SEL (%@) doesn\'t has a imp in Class (%@) originally", NSStringFromSelector(sel), hookedCls);\n  if (!m) return STHookResultErrorMethodNotFound;\n  const char * typeEncoding = method_getTypeEncoding(m);\n  NSMethodSignature *methodSignature = [NSMethodSignature signatureWithObjCTypes:typeEncoding];\n  NSMethodSignature *blockSignature = st_getSignatureForBlock(block);\n\n  if (!isMatched(methodSignature, blockSignature, option, hookedCls, sel, identifier)) {\n    return STHookResultErrorBlockNotMatched;\n  }\n  \n  IMP originalImp = method_getImplementation(m);\n  @synchronized(hookedCls) {\n    id<STHookInfoPool> hookInfoPool = st_getHookInfoPool(hookedCls, sel);\n    if (!hookInfoPool) {\n      hookInfoPool = [STHookInfoPool poolWithTypeEncoding:[NSString stringWithUTF8String:typeEncoding] originalIMP:NULL selector:sel];\n      hookInfoPool.hookedCls = hookedCls;\n      hookInfoPool.statedCls = [hookedCls class];\n      \n      IMP stingerIMP = [hookInfoPool stingerIMP];\n      hookInfoPool.originalIMP = originalImp;\n      if (!class_addMethod(hookedCls, sel, stingerIMP, typeEncoding)) {\n        class_replaceMethod(hookedCls, sel, stingerIMP, typeEncoding);\n      }\n      \n      st_setHookInfoPool(hookedCls, sel, hookInfoPool);\n    }\n    if (st_isIntanceHookCls(hookedCls)) {\n      return STHookResultSuccess;\n    } else {\n      STHookInfo *hookInfo = [STHookInfo infoWithOption:option withIdentifier:identifier withBlock:block];\n      return [hookInfoPool addInfo:hookInfo] ? STHookResultSuccess :  STHookResultErrorIDExisted;\n    }\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("p",[s._v("粗略看来，这个方法内部的逻辑和 "),n("code",[s._v("Method Swizzling")]),s._v(" 的步骤基本上类似，首先拿到被 hook 的 selector 的原始实现 originalImp，然后通过一个类 "),n("code",[s._v("STHookInfoPool")]),s._v(" 的实例 hookInfoPool 拿到 stingerIMP，之后通过 "),n("code",[s._v("class_addMethod")]),s._v(" 和 "),n("code",[s._v("class_replaceMethod")]),s._v(" 来交换 selector 对应的实现。\nhookInfoPool 实例，先尝试通过 hookedClass 和 selector 来获取：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('id<STHookInfoPool> st_getHookInfoPool(id obj, SEL key) {\n  NSCParameterAssert(obj);\n  NSCParameterAssert(key);\n  return objc_getAssociatedObject(obj, NSSelectorFromString([NSString stringWithFormat:@"%@%@", STSelectorPrefix, NSStringFromSelector(key)]));\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果获得不到，则传入 selector 和 selector 对应的原方法的 IMP 的 type encoding 和 selector 来创建一个新的实例，并保存类对象和类的元类对象：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// STHookInfoPool.m\n+ (instancetype)poolWithTypeEncoding:(NSString *)typeEncoding originalIMP:(IMP)imp selector:(SEL)sel {\n  STHookInfoPool *pool = [[STHookInfoPool alloc] init];\n  pool.typeEncoding = typeEncoding;\n  pool.originalIMP = imp;\n  pool.sel = sel;\n  return pool;\n}\n\n- (instancetype)init {\n  if (self = [super init]) {\n    _beforeInfos = [[NSMutableArray alloc] init];\n    _insteadInfo = nil;\n    _afterInfos = [[NSMutableArray alloc] init];\n    _semaphore = dispatch_semaphore_create(1);\n  }\n  return self;\n}\n\n- (void)setTypeEncoding:(NSString *)typeEncoding {\n  _typeEncoding = typeEncoding;\n  _signature = typeEncoding ? [NSMethodSignature signatureWithObjCTypes:[typeEncoding UTF8String]]: nil;\n  _argsCount = _signature.numberOfArguments;\n}\n\n- (void)setHookedCls:(Class)hookedCls {\n  _hookedCls = hookedCls;\n  _isInstanceHook = st_isIntanceHookCls(hookedCls);\n}\n\n- (void)setSel:(SEL)sel {\n  _sel = sel;\n  _uniqueKey = NSSelectorFromString([NSString stringWithFormat:@"%@%@", STSelectorPrefix, NSStringFromSelector(sel)]);\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("在方法交换后，将 hookInfoPool 对象关联到 hookedClass 上。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void st_setHookInfoPool(id obj, SEL key, id<STHookInfoPool> infoPool) {\n  NSCParameterAssert(obj);\n  NSCParameterAssert(key);\n  objc_setAssociatedObject(obj, NSSelectorFromString([STSelectorPrefix stringByAppendingString:NSStringFromSelector(key)]), infoPool, OBJC_ASSOCIATION_RETAIN);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("最后，通过 "),n("code",[s._v("st_isInstanceHook")]),s._v(" 来判断是不是对 hookedCls 类实例的 hook，是的话直接返回，不是的话，生成一个 hookInfo 实例，加入到 hookInfoPool 中。")]),s._v(" "),n("h2",{attrs:{id:"libffi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#libffi"}},[s._v("#")]),s._v(" libffi")]),s._v(" "),n("p",[s._v("在继续分析之前，我们先停下来，简单了解下 "),n("code",[s._v("libffi")]),s._v(" 的使用。")]),s._v(" "),n("p",[s._v("FFI（Foreign Function Interface，外部函数接口）允许在一门语言中动态地去调用另一门语言的代码，而"),n("a",{attrs:{href:"https://github.com/libffi/libffi",target:"_blank",rel:"noopener noreferrer"}},[s._v("libffi"),n("OutboundLink")],1),s._v(" 就是一种提供最底层支持、面向架构的 FFI。让我们通过两个例子来看下如何使用 "),n("code",[s._v("libffi")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"直接调用-c-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接调用-c-方法"}},[s._v("#")]),s._v(" 直接调用 C 方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int hello(int a , int b) {\n    int x = a + b;\n    return x;\n}\n\nint main() {\n    ffi_cif cif;\n    ffi_type *argTypes[] = {&ffi_type_sint, &ffi_type_sint};\n    ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &ffi_type_sint, argTypes);\n\n    int a = 123;\n    int b = 456;\n    void *args[] = {&a, &b};\n    int retValue;\n    ffi_call(&cif, (void *)hello, &retValue, args);\n    \n    return 0;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("总共分为以下几步：")]),s._v(" "),n("ol",[n("li",[s._v("首先先生成一个 "),n("code",[s._v("ffi_cif")]),s._v(" 对象 ，这个对象相当于 Objective-C 中的 Method Signature。")]),s._v(" "),n("li",[s._v("argsTypes 数组用于告诉 cif 每个参数的类型。")]),s._v(" "),n("li",[s._v("调用 "),n("code",[s._v("ffi_prep_cif")]),s._v(" 来告诉 cif，参数的数量、返回值的类型。")]),s._v(" "),n("li",[s._v("最后调用 "),n("code",[s._v("ffi_call")]),s._v("，传入参数、保存返回值的地址和被调用方法的地址。")])]),s._v(" "),n("h3",{attrs:{id:"通用闭包函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通用闭包函数"}},[s._v("#")]),s._v(" 通用闭包函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/* Acts like puts with the file given at time of enclosure. */\nvoid puts_binding(ffi_cif *cif, unsigned int *ret, void* args[],\n    FILE *stream)\n{\n  *ret = fputs(*(char **)args[0], stream);\n}\n\nint main()\n{\n  ffi_cif cif;\n  ffi_type *args[1];\n  ffi_closure *closure;\n\n  int (*bound_puts)(char *);\n  int rc;\n\n  /* Allocate closure and bound_puts */\n  closure = ffi_closure_alloc(sizeof(ffi_closure), &bound_puts);\n\n  if (closure)\n  {\n    /* Initialize the argument info vectors */\n    args[0] = &ffi_type_pointer;\n\n    /* Initialize the cif */\n    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n          &ffi_type_uint, args) == FFI_OK)\n    {\n      /* Initialize the closure, setting stream to stdout */\n      if (ffi_prep_closure_loc(closure, &cif, puts_binding,\n            stdout, bound_puts) == FFI_OK)\n      {\n        printf("Before bound_put()\\n");\n        rc = bound_puts("Hello World!");\n        /* rc now holds the result of the call to fputs */\n      }\n    }\n  }\n\n  /* Deallocate both closure, and bound_puts */\n  ffi_closure_free(closure);\n\n  return 0;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])]),n("p",[s._v("在上述的例子中，通过"),n("code",[s._v("ffi_prep_closure_loc")]),s._v("创建了一个新的指向 puts_binding 方法的函数指针 bounds_puts，并且将 stdout 作为 user_data 传入到了 puts_binding 中。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("fi_prep_closure_loc (ffi_closure *closure, ffi_cif *cif, void (*fun) (ffi_cif *cif, void *ret, void **args, void *user_data), void *user_data, void *codeloc)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实际上，可以将任意数据通过 user_data 塞到 fun 中。比如我们可以自定义一个类型，存储想要 hook 的方法的原始实现地址、方法参数、返回值等信息，那么我们就可以在 fun 中通过 user_data 拿到被 hook 方法的原始实现地址、方法参数及返回值，然后通过前面介绍的 "),n("code",[s._v("ffi_call")]),s._v(" 来进行调用，这样便实现了一个能 hook 各种函数调用的通用闭包方法。")]),s._v(" "),n("h2",{attrs:{id:"stingerimp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stingerimp"}},[s._v("#")]),s._v(" stingerIMP")]),s._v(" "),n("p",[s._v("stingerIMP 这个方法的实现就是对上文中 "),n("code",[s._v("libffi")]),s._v(" 的利用：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// STHookInfoPool.m\n- (StingerIMP)stingerIMP {\n  if (_stingerIMP == NULL) {\n    ffi_type *returnType = st_ffiTypeWithType(self.signature.methodReturnType);\n    NSCAssert(returnType, @"can\'t find a ffi_type of %s", self.signature.methodReturnType);\n    \n    NSUInteger argumentCount = self->_argsCount;\n    _args = malloc(sizeof(ffi_type *) * argumentCount) ;\n    \n    for (int i = 0; i < argumentCount; i++) {\n      ffi_type* current_ffi_type = st_ffiTypeWithType([self.signature getArgumentTypeAtIndex:i]);\n      NSCAssert(current_ffi_type, @"can\'t find a ffi_type of %s", [self.signature getArgumentTypeAtIndex:i]);\n      _args[i] = current_ffi_type;\n    }\n    \n    _closure = ffi_closure_alloc(sizeof(ffi_closure), (void **)&_stingerIMP);\n    \n    if(ffi_prep_cif(&_cif, FFI_DEFAULT_ABI, (unsigned int)argumentCount, returnType, _args) == FFI_OK) {\n      if (ffi_prep_closure_loc(_closure, &_cif, _st_ffi_function, (__bridge void *)(self), _stingerIMP) != FFI_OK) {\n        NSCAssert(NO, @"genarate IMP failed");\n      }\n    } else {\n      NSCAssert(NO, @"OMG");\n    }\n    \n    [self _genarateBlockCif];\n  }\n  return _stingerIMP;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("前面我们分析过，被 hook 的 selector 的实现已经被替换为 stingerIMP，那么在调用selector 时，会调用 stingerIMP，进而调用 "),n("code",[s._v("_st_ffi_function")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"st-ffi-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#st-ffi-function"}},[s._v("#")]),s._v(" _st_ffi_function")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("NS_INLINE void _st_ffi_function(ffi_cif *cif, void *ret, void **args, void *userdata) {\n  STHookInfoPool *hookedClassInfoPool = (__bridge STHookInfoPool *)userdata;\n  STHookInfoPool *statedClassInfoPool = nil;\n  STHookInfoPool *instanceInfoPool = nil;\n  \n  void **innerArgs = alloca(hookedClassInfoPool->_argsCount * sizeof(*innerArgs));\n  void **slf = args[0];\n  \n  if (hookedClassInfoPool->_isInstanceHook) {\n    statedClassInfoPool = _st_fast_get_HookInfoPool(hookedClassInfoPool->_statedCls, hookedClassInfoPool->_uniqueKey);\n    instanceInfoPool = _st_fast_get_HookInfoPool((__bridge id)(*slf), hookedClassInfoPool->_uniqueKey);\n  }\n\n  StingerParams *params = [[StingerParams alloc] initWithType:hookedClassInfoPool->_typeEncoding originalIMP:hookedClassInfoPool->_originalIMP sel:hookedClassInfoPool->_sel args:args argumentTypes:hookedClassInfoPool->_signature.argumentTypes];\n  innerArgs[1] = &params;\n  \n  memcpy(innerArgs + 2, args + 2, (hookedClassInfoPool->_argsCount - 2) * sizeof(*args));\n  \n  // before hooks\n  if (REAL_STATED_CALSS_INFO_POOL) ffi_call_infos(REAL_STATED_CALSS_INFO_POOL->_beforeInfos);\n  if (instanceInfoPool) ffi_call_infos(instanceInfoPool->_beforeInfos);\n\n  // instead hooks\n  if (instanceInfoPool && instanceInfoPool->_insteadInfo) {\n    innerArgs[0] = &(((STHookInfo *)(instanceInfoPool->_insteadInfo))->_block);\n    ffi_call(&(hookedClassInfoPool->_blockCif), _st_impForBlock(((STHookInfo *)(instanceInfoPool->_insteadInfo))->_block), ret, innerArgs);\n    if (((STHookInfo *)(instanceInfoPool->_insteadInfo))->automaticRemoval) {\n      instanceInfoPool->_insteadInfo = nil;\n    }\n  } else if (REAL_STATED_CALSS_INFO_POOL && REAL_STATED_CALSS_INFO_POOL->_insteadInfo) {\n    innerArgs[0] = &(((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL->_insteadInfo))->_block);\n    ffi_call(&(hookedClassInfoPool->_blockCif), _st_impForBlock(((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL->_insteadInfo))->_block), ret, innerArgs);\n    if (((STHookInfo *)(REAL_STATED_CALSS_INFO_POOL->_insteadInfo))->automaticRemoval) {\n      REAL_STATED_CALSS_INFO_POOL->_insteadInfo = nil;\n    }\n  } else {\n    /// original IMP\n    /// if original selector is hooked by aspects or jspatch.., which use message-forwarding, invoke invacation.\n    BOOL isForward = hookedClassInfoPool->_originalIMP == _objc_msgForward\n#if !defined(__arm64__)\n    || hookedClassInfoPool->_originalIMP == (IMP)_objc_msgForward_stret\n#endif\n    ;\n    if (isForward) {\n      [params invokeAndGetOriginalRetValue:ret];\n    } else {\n      ffi_call(cif, (void (*)(void))hookedClassInfoPool->_originalIMP, ret, args);\n    }\n  }\n  // after hooks\n  if (REAL_STATED_CALSS_INFO_POOL) ffi_call_infos(REAL_STATED_CALSS_INFO_POOL->_afterInfos);\n  if (instanceInfoPool) ffi_call_infos(instanceInfoPool->_afterInfos);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br")])]),n("p",[s._v("粗略来说，该方法就是从 hookInfoPool 中依次取出 beforeInfos、insteadInfos、afterInfos，然后遍历 infos 数组，从 info 中取出 block，然后通过 "),n("code",[s._v("ffi_call")]),s._v(" 来调用各个 block。")]),s._v(" "),n("p",[n("code",[s._v("ffi_call_infos")]),s._v(" 是 "),n("code",[s._v("Stinger")]),s._v(" 内部定义的宏：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#define REAL_STATED_CALSS_INFO_POOL (statedClassInfoPool ?: hookedClassInfoPool)\n\n#define ffi_call_infos(infos) \\\nfor (NSUInteger i = 0; i < infos.count; i++) { \\\n  STHookInfo *info = infos[i];\\\n  innerArgs[0] = &(info->_block); \\\n  ffi_call(&(hookedClassInfoPool->_blockCif), _st_impForBlock(info->_block), NULL, innerArgs); \\\n  if (info->automaticRemoval) { \\\n    [(NSMutableArray *)infos removeObject:info]; \\\n    i--; \\\n  } \\\n}  \\\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("在调用原始实现的时候，可以看到 "),n("code",[s._v("Stinger")]),s._v(" 已经兼容了 "),n("code",[s._v("Aspects")]),s._v(" 及 "),n("code",[s._v("JSPatch")]),s._v(" 这种将被 selector 的原始实现交换为 "),n("code",[s._v("objc_msgForward")]),s._v(" 的情况：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/// original IMP\n    /// if original selector is hooked by aspects or jspatch.., which use message-forwarding, invoke invacation.\n    BOOL isForward = hookedClassInfoPool->_originalIMP == _objc_msgForward\n#if !defined(__arm64__)\n    || hookedClassInfoPool->_originalIMP == (IMP)_objc_msgForward_stret\n#endif\n    ;\n    if (isForward) {\n      [params invokeAndGetOriginalRetValue:ret];\n    } else {\n      ffi_call(cif, (void (*)(void))hookedClassInfoPool->_originalIMP, ret, args);\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("总结下 "),n("code",[s._v("Stinger")]),s._v(" 实现 AOP 的基本原理：")]),s._v(" "),n("ol",[n("li",[s._v("将被 hook 的 selector 的实现交换为 stingerIMP。")]),s._v(" "),n("li",[s._v("使用 "),n("code",[s._v("libffi")]),s._v("的创建函数闭包的能力，将 stingerIMP 和 "),n("code",[s._v("_st_ffi_function")]),s._v(" 绑定在一起。")]),s._v(" "),n("li",[s._v("执行被 hook 的 selector 的时候，转为执行 stingerIMP 方法，进而执行 "),n("code",[s._v("_st_ffi_function")]),s._v("。")]),s._v(" "),n("li",[s._v("在 "),n("code",[s._v("_st_ffi_function")]),s._v(" 中，通过 "),n("code",[s._v("ffi_call")]),s._v("来执行被 hook 的 selector 对应的原始实现，并根据设置在合适时机执行切面的逻辑。")])]),s._v(" "),n("p",[s._v("可以看出，"),n("code",[s._v("Stinger")]),s._v(" 在执行 hook 逻辑时，并没有走 "),n("code",[s._v("Objective-C")]),s._v(" 的消息转发的流程，因此它在性能上要显著优于 Aspects。")])])}),[],!1,null,null,null);n.default=t.exports}}]);