(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{507:function(n,s,e){"use strict";e.r(s);var t=e(1),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"leetcode-347-top-k-frequent-elements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-347-top-k-frequent-elements"}},[n._v("#")]),n._v(" LeetCode-347-Top K Frequent Elements")]),n._v(" "),e("p",[n._v("这道题的题意是：给出一个数组和一个数字k，返回一个由输入数组中出现次数排在前K位的元素组成的数组。")]),n._v(" "),e("p",[n._v("思路：由题意，显然我们要将数组中的每个元素出现的次数记录下来，而这可以用哈希表来实现。在C++的标准库里，unordered_map是实现这一功能的库。于是我们可以先将每个元素出现的次数记录下来，然后把所有次数装进一个vector里面并排序。之后我们就可以从这个vector的末尾出发，去哈希表中找对应的键是什么，如果找到的话就把键加入到最终的结果数组中，直到遍历完vector的后K个元素。")]),n._v(" "),e("p",[n._v("代码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        vector<int> result;\n        unordered_map<int,int> set;\n        for(int i = 0; i < nums.size(); i++) {\n            if (set.find(nums[i]) != set.end()) {\n                set[nums[i]] ++;\n            } else {\n                set.insert({nums[i],1});\n            }\n        }\n        vector<int> indexs;\n        for(auto &index: set) {\n            indexs.push_back(index.second);\n        }\n        sort(indexs.begin(), indexs.end());\n        size_t j = indexs.size();\n        for(int i = 0; i < k; i++) {\n            int x = indexs[j-1];\n            j--;\n            unordered_map<int,int>::iterator it = set.begin();\n            for(; it != set.end();it++) {\n                if (it->second == x) {\n                    result.push_back(it->first);\n                    set.erase(it);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n};\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);