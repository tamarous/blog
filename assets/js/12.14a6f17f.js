(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{368:function(t,e,n){"use strict";n.r(e);var a=n(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-120-triangle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-120-triangle"}},[t._v("#")]),t._v(" LeetCode-120-Triangle")]),t._v(" "),n("p",[t._v("这道题的题意是：给定一个数组形成的三角形，在从三角形的顶部出发的路径中，求节点数值相加结果为最小的和。")]),t._v(" "),n("p",[t._v("例子：输入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n")])])]),n("p",[t._v("那么从顶部到底部最小的一条路径和为："),n("code",[t._v("2+3+5+1=11")]),t._v("。")]),t._v(" "),n("p",[t._v("思路：这是一道逆序的二维动态规划题，和之前看过的一道题--"),n("a",{attrs:{href:"http://blog.csdn.net/yu280265067/article/details/50854944",target:"_blank",rel:"noopener noreferrer"}},[t._v("《龙与地下城》"),n("OutboundLink")],1),t._v("非常相似，都是逆序地从下往上求 DP数组。代码很简单，就不多做分析了，相信大家一看就能看懂。")]),t._v(" "),n("p",[t._v("代码如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n        for (int i = triangle.size() - 2; i >= 0; i--) {\n            for (int j = 0; j < i + 1; j++) {\n                triangle[i][j] = min(triangle[i + 1][j], triangle[i + 1][j + 1]) + triangle[i][j];\n            }\n        }\n        return triangle[0][0];\n    }\n};\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);